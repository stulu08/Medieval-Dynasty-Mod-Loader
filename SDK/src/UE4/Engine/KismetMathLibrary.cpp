#include "../SDK.h"
#include "KismetMathLibrary.h"
namespace UE4 {
#pragma region Members
#pragma endregion
#pragma region Functions
/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Abs
// Flags: Final, Native, Static, Public, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: float	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
float UKismetMathLibrary::Abs(float A) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Abs");

	struct UKismetMathLibrary_Abs_Params {
		float A;			//Offset: 0 | ElementSize: 4
		float ReturnValue;			//Offset: 4 | ElementSize: 4
	};
	UKismetMathLibrary_Abs_Params params;
	params.A = A;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Abs_Int
// Flags: Final, Native, Static, Public, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: int32_t	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: int32_t	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
int32_t UKismetMathLibrary::Abs_Int(int32_t A) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Abs_Int");

	struct UKismetMathLibrary_Abs_Int_Params {
		int32_t A;			//Offset: 0 | ElementSize: 4
		int32_t ReturnValue;			//Offset: 4 | ElementSize: 4
	};
	UKismetMathLibrary_Abs_Int_Params params;
	params.A = A;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Abs_Int64
// Flags: Final, Native, Static, Public, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: int64_t	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: int64_t	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
int64_t UKismetMathLibrary::Abs_Int64(int64_t A) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Abs_Int64");

	struct UKismetMathLibrary_Abs_Int64_Params {
		int64_t A;			//Offset: 0 | ElementSize: 8
		int64_t ReturnValue;			//Offset: 8 | ElementSize: 8
	};
	UKismetMathLibrary_Abs_Int64_Params params;
	params.A = A;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Acos
// Flags: Final, Native, Static, Public, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: float	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
float UKismetMathLibrary::Acos(float A) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Acos");

	struct UKismetMathLibrary_Acos_Params {
		float A;			//Offset: 0 | ElementSize: 4
		float ReturnValue;			//Offset: 4 | ElementSize: 4
	};
	UKismetMathLibrary_Acos_Params params;
	params.A = A;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Add_ByteByte
// Flags: Final, Native, Static, Public, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: unsigned char	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: B	Type: unsigned char	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: unsigned char	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
unsigned char UKismetMathLibrary::Add_ByteByte(unsigned char A, unsigned char B) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Add_ByteByte");

	struct UKismetMathLibrary_Add_ByteByte_Params {
		unsigned char A;			//Offset: 0 | ElementSize: 1
		unsigned char B;			//Offset: 1 | ElementSize: 1
		unsigned char ReturnValue;			//Offset: 2 | ElementSize: 1
	};
	UKismetMathLibrary_Add_ByteByte_Params params;
	params.A = A;
	params.B = B;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Add_DateTimeDateTime
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: struct FDateTime	Flags: Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: B	Type: struct FDateTime	Flags: Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FDateTime	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FDateTime UKismetMathLibrary::Add_DateTimeDateTime(struct FDateTime A, struct FDateTime B) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Add_DateTimeDateTime");

	struct UKismetMathLibrary_Add_DateTimeDateTime_Params {
		struct FDateTime A;			//Offset: 0 | ElementSize: 8
		struct FDateTime B;			//Offset: 8 | ElementSize: 8
		struct FDateTime ReturnValue;			//Offset: 16 | ElementSize: 8
	};
	UKismetMathLibrary_Add_DateTimeDateTime_Params params;
	params.A = A;
	params.B = B;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Add_DateTimeTimespan
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: struct FDateTime	Flags: Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: B	Type: struct FTimespan	Flags: Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FDateTime	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FDateTime UKismetMathLibrary::Add_DateTimeTimespan(struct FDateTime A, struct FTimespan B) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Add_DateTimeTimespan");

	struct UKismetMathLibrary_Add_DateTimeTimespan_Params {
		struct FDateTime A;			//Offset: 0 | ElementSize: 8
		struct FTimespan B;			//Offset: 8 | ElementSize: 8
		struct FDateTime ReturnValue;			//Offset: 16 | ElementSize: 8
	};
	UKismetMathLibrary_Add_DateTimeTimespan_Params params;
	params.A = A;
	params.B = B;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Add_FloatFloat
// Flags: Final, Native, Static, Public, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: B	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: float	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
float UKismetMathLibrary::Add_FloatFloat(float A, float B) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Add_FloatFloat");

	struct UKismetMathLibrary_Add_FloatFloat_Params {
		float A;			//Offset: 0 | ElementSize: 4
		float B;			//Offset: 4 | ElementSize: 4
		float ReturnValue;			//Offset: 8 | ElementSize: 4
	};
	UKismetMathLibrary_Add_FloatFloat_Params params;
	params.A = A;
	params.B = B;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Add_Int64Int64
// Flags: Final, Native, Static, Public, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: int64_t	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: B	Type: int64_t	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: int64_t	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
int64_t UKismetMathLibrary::Add_Int64Int64(int64_t A, int64_t B) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Add_Int64Int64");

	struct UKismetMathLibrary_Add_Int64Int64_Params {
		int64_t A;			//Offset: 0 | ElementSize: 8
		int64_t B;			//Offset: 8 | ElementSize: 8
		int64_t ReturnValue;			//Offset: 16 | ElementSize: 8
	};
	UKismetMathLibrary_Add_Int64Int64_Params params;
	params.A = A;
	params.B = B;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Add_IntInt
// Flags: Final, Native, Static, Public, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: int32_t	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: B	Type: int32_t	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: int32_t	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
int32_t UKismetMathLibrary::Add_IntInt(int32_t A, int32_t B) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Add_IntInt");

	struct UKismetMathLibrary_Add_IntInt_Params {
		int32_t A;			//Offset: 0 | ElementSize: 4
		int32_t B;			//Offset: 4 | ElementSize: 4
		int32_t ReturnValue;			//Offset: 8 | ElementSize: 4
	};
	UKismetMathLibrary_Add_IntInt_Params params;
	params.A = A;
	params.B = B;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Add_IntPointInt
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: struct FIntPoint	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: B	Type: int32_t	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FIntPoint	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FIntPoint UKismetMathLibrary::Add_IntPointInt(struct FIntPoint A, int32_t B) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Add_IntPointInt");

	struct UKismetMathLibrary_Add_IntPointInt_Params {
		struct FIntPoint A;			//Offset: 0 | ElementSize: 8
		int32_t B;			//Offset: 8 | ElementSize: 4
		struct FIntPoint ReturnValue;			//Offset: 12 | ElementSize: 8
	};
	UKismetMathLibrary_Add_IntPointInt_Params params;
	params.A = A;
	params.B = B;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Add_IntPointIntPoint
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: struct FIntPoint	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: B	Type: struct FIntPoint	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FIntPoint	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FIntPoint UKismetMathLibrary::Add_IntPointIntPoint(struct FIntPoint A, struct FIntPoint B) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Add_IntPointIntPoint");

	struct UKismetMathLibrary_Add_IntPointIntPoint_Params {
		struct FIntPoint A;			//Offset: 0 | ElementSize: 8
		struct FIntPoint B;			//Offset: 8 | ElementSize: 8
		struct FIntPoint ReturnValue;			//Offset: 16 | ElementSize: 8
	};
	UKismetMathLibrary_Add_IntPointIntPoint_Params params;
	params.A = A;
	params.B = B;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Add_LinearColorLinearColor
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: struct FLinearColor	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: B	Type: struct FLinearColor	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FLinearColor	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FLinearColor UKismetMathLibrary::Add_LinearColorLinearColor(struct FLinearColor A, struct FLinearColor B) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Add_LinearColorLinearColor");

	struct UKismetMathLibrary_Add_LinearColorLinearColor_Params {
		struct FLinearColor A;			//Offset: 0 | ElementSize: 16
		struct FLinearColor B;			//Offset: 16 | ElementSize: 16
		struct FLinearColor ReturnValue;			//Offset: 32 | ElementSize: 16
	};
	UKismetMathLibrary_Add_LinearColorLinearColor_Params params;
	params.A = A;
	params.B = B;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Add_MatrixMatrix
// Flags: Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: struct FMatrix	Flags: ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
// Name: B	Type: struct FMatrix	Flags: ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FMatrix	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FMatrix UKismetMathLibrary::Add_MatrixMatrix(const struct FMatrix& A, const struct FMatrix& B) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Add_MatrixMatrix");

	struct UKismetMathLibrary_Add_MatrixMatrix_Params {
		struct FMatrix A;			//Offset: 0 | ElementSize: 64
		struct FMatrix B;			//Offset: 64 | ElementSize: 64
		struct FMatrix ReturnValue;			//Offset: 128 | ElementSize: 64
	};
	UKismetMathLibrary_Add_MatrixMatrix_Params params;
	params.A = A;
	params.B = B;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Add_QuatQuat
// Flags: Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: struct FQuat	Flags: ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
// Name: B	Type: struct FQuat	Flags: ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FQuat	Flags: Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FQuat UKismetMathLibrary::Add_QuatQuat(const struct FQuat& A, const struct FQuat& B) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Add_QuatQuat");

	struct UKismetMathLibrary_Add_QuatQuat_Params {
		struct FQuat A;			//Offset: 0 | ElementSize: 16
		struct FQuat B;			//Offset: 16 | ElementSize: 16
		struct FQuat ReturnValue;			//Offset: 32 | ElementSize: 16
	};
	UKismetMathLibrary_Add_QuatQuat_Params params;
	params.A = A;
	params.B = B;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Add_TimespanTimespan
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: struct FTimespan	Flags: Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: B	Type: struct FTimespan	Flags: Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FTimespan	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FTimespan UKismetMathLibrary::Add_TimespanTimespan(struct FTimespan A, struct FTimespan B) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Add_TimespanTimespan");

	struct UKismetMathLibrary_Add_TimespanTimespan_Params {
		struct FTimespan A;			//Offset: 0 | ElementSize: 8
		struct FTimespan B;			//Offset: 8 | ElementSize: 8
		struct FTimespan ReturnValue;			//Offset: 16 | ElementSize: 8
	};
	UKismetMathLibrary_Add_TimespanTimespan_Params params;
	params.A = A;
	params.B = B;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Add_Vector2DFloat
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: struct FVector2D	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: B	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FVector2D	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FVector2D UKismetMathLibrary::Add_Vector2DFloat(struct FVector2D A, float B) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Add_Vector2DFloat");

	struct UKismetMathLibrary_Add_Vector2DFloat_Params {
		struct FVector2D A;			//Offset: 0 | ElementSize: 8
		float B;			//Offset: 8 | ElementSize: 4
		struct FVector2D ReturnValue;			//Offset: 12 | ElementSize: 8
	};
	UKismetMathLibrary_Add_Vector2DFloat_Params params;
	params.A = A;
	params.B = B;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Add_Vector2DVector2D
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: struct FVector2D	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: B	Type: struct FVector2D	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FVector2D	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FVector2D UKismetMathLibrary::Add_Vector2DVector2D(struct FVector2D A, struct FVector2D B) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Add_Vector2DVector2D");

	struct UKismetMathLibrary_Add_Vector2DVector2D_Params {
		struct FVector2D A;			//Offset: 0 | ElementSize: 8
		struct FVector2D B;			//Offset: 8 | ElementSize: 8
		struct FVector2D ReturnValue;			//Offset: 16 | ElementSize: 8
	};
	UKismetMathLibrary_Add_Vector2DVector2D_Params params;
	params.A = A;
	params.B = B;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Add_Vector4Vector4
// Flags: Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: struct FVector4	Flags: ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: B	Type: struct FVector4	Flags: ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FVector4	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FVector4 UKismetMathLibrary::Add_Vector4Vector4(const struct FVector4& A, const struct FVector4& B) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Add_Vector4Vector4");

	struct UKismetMathLibrary_Add_Vector4Vector4_Params {
		struct FVector4 A;			//Offset: 0 | ElementSize: 16
		struct FVector4 B;			//Offset: 16 | ElementSize: 16
		struct FVector4 ReturnValue;			//Offset: 32 | ElementSize: 16
	};
	UKismetMathLibrary_Add_Vector4Vector4_Params params;
	params.A = A;
	params.B = B;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Add_VectorFloat
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: struct FVector	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: B	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FVector	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FVector UKismetMathLibrary::Add_VectorFloat(struct FVector A, float B) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Add_VectorFloat");

	struct UKismetMathLibrary_Add_VectorFloat_Params {
		struct FVector A;			//Offset: 0 | ElementSize: 12
		float B;			//Offset: 12 | ElementSize: 4
		struct FVector ReturnValue;			//Offset: 16 | ElementSize: 12
	};
	UKismetMathLibrary_Add_VectorFloat_Params params;
	params.A = A;
	params.B = B;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Add_VectorInt
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: struct FVector	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: B	Type: int32_t	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FVector	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FVector UKismetMathLibrary::Add_VectorInt(struct FVector A, int32_t B) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Add_VectorInt");

	struct UKismetMathLibrary_Add_VectorInt_Params {
		struct FVector A;			//Offset: 0 | ElementSize: 12
		int32_t B;			//Offset: 12 | ElementSize: 4
		struct FVector ReturnValue;			//Offset: 16 | ElementSize: 12
	};
	UKismetMathLibrary_Add_VectorInt_Params params;
	params.A = A;
	params.B = B;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Add_VectorVector
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: struct FVector	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: B	Type: struct FVector	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FVector	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FVector UKismetMathLibrary::Add_VectorVector(struct FVector A, struct FVector B) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Add_VectorVector");

	struct UKismetMathLibrary_Add_VectorVector_Params {
		struct FVector A;			//Offset: 0 | ElementSize: 12
		struct FVector B;			//Offset: 12 | ElementSize: 12
		struct FVector ReturnValue;			//Offset: 24 | ElementSize: 12
	};
	UKismetMathLibrary_Add_VectorVector_Params params;
	params.A = A;
	params.B = B;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.And_Int64Int64
// Flags: Final, Native, Static, Public, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: int64_t	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: B	Type: int64_t	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: int64_t	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
int64_t UKismetMathLibrary::And_Int64Int64(int64_t A, int64_t B) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.And_Int64Int64");

	struct UKismetMathLibrary_And_Int64Int64_Params {
		int64_t A;			//Offset: 0 | ElementSize: 8
		int64_t B;			//Offset: 8 | ElementSize: 8
		int64_t ReturnValue;			//Offset: 16 | ElementSize: 8
	};
	UKismetMathLibrary_And_Int64Int64_Params params;
	params.A = A;
	params.B = B;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.And_IntInt
// Flags: Final, Native, Static, Public, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: int32_t	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: B	Type: int32_t	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: int32_t	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
int32_t UKismetMathLibrary::And_IntInt(int32_t A, int32_t B) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.And_IntInt");

	struct UKismetMathLibrary_And_IntInt_Params {
		int32_t A;			//Offset: 0 | ElementSize: 4
		int32_t B;			//Offset: 4 | ElementSize: 4
		int32_t ReturnValue;			//Offset: 8 | ElementSize: 4
	};
	UKismetMathLibrary_And_IntInt_Params params;
	params.A = A;
	params.B = B;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Asin
// Flags: Final, Native, Static, Public, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: float	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
float UKismetMathLibrary::Asin(float A) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Asin");

	struct UKismetMathLibrary_Asin_Params {
		float A;			//Offset: 0 | ElementSize: 4
		float ReturnValue;			//Offset: 4 | ElementSize: 4
	};
	UKismetMathLibrary_Asin_Params params;
	params.A = A;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Atan
// Flags: Final, Native, Static, Public, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: float	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
float UKismetMathLibrary::Atan(float A) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Atan");

	struct UKismetMathLibrary_Atan_Params {
		float A;			//Offset: 0 | ElementSize: 4
		float ReturnValue;			//Offset: 4 | ElementSize: 4
	};
	UKismetMathLibrary_Atan_Params params;
	params.A = A;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Atan2
// Flags: Final, Native, Static, Public, BlueprintCallable, BlueprintPure
// Params:
// Name: Y	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: X	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: float	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
float UKismetMathLibrary::Atan2(float Y, float X) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Atan2");

	struct UKismetMathLibrary_Atan2_Params {
		float Y;			//Offset: 0 | ElementSize: 4
		float X;			//Offset: 4 | ElementSize: 4
		float ReturnValue;			//Offset: 8 | ElementSize: 4
	};
	UKismetMathLibrary_Atan2_Params params;
	params.Y = Y;
	params.X = X;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.BMax
// Flags: Final, Native, Static, Public, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: unsigned char	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: B	Type: unsigned char	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: unsigned char	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
unsigned char UKismetMathLibrary::BMax(unsigned char A, unsigned char B) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.BMax");

	struct UKismetMathLibrary_BMax_Params {
		unsigned char A;			//Offset: 0 | ElementSize: 1
		unsigned char B;			//Offset: 1 | ElementSize: 1
		unsigned char ReturnValue;			//Offset: 2 | ElementSize: 1
	};
	UKismetMathLibrary_BMax_Params params;
	params.A = A;
	params.B = B;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.BMin
// Flags: Final, Native, Static, Public, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: unsigned char	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: B	Type: unsigned char	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: unsigned char	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
unsigned char UKismetMathLibrary::BMin(unsigned char A, unsigned char B) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.BMin");

	struct UKismetMathLibrary_BMin_Params {
		unsigned char A;			//Offset: 0 | ElementSize: 1
		unsigned char B;			//Offset: 1 | ElementSize: 1
		unsigned char ReturnValue;			//Offset: 2 | ElementSize: 1
	};
	UKismetMathLibrary_BMin_Params params;
	params.A = A;
	params.B = B;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.BooleanAND
// Flags: Final, Native, Static, Public, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: bool	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: B	Type: bool	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: bool	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
bool UKismetMathLibrary::BooleanAND(bool A, bool B) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.BooleanAND");

	struct UKismetMathLibrary_BooleanAND_Params {
		bool A;			//Offset: 0 | ElementSize: 1
		bool B;			//Offset: 1 | ElementSize: 1
		bool ReturnValue;			//Offset: 2 | ElementSize: 1
	};
	UKismetMathLibrary_BooleanAND_Params params;
	params.A = A;
	params.B = B;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.BooleanNAND
// Flags: Final, Native, Static, Public, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: bool	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: B	Type: bool	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: bool	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
bool UKismetMathLibrary::BooleanNAND(bool A, bool B) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.BooleanNAND");

	struct UKismetMathLibrary_BooleanNAND_Params {
		bool A;			//Offset: 0 | ElementSize: 1
		bool B;			//Offset: 1 | ElementSize: 1
		bool ReturnValue;			//Offset: 2 | ElementSize: 1
	};
	UKismetMathLibrary_BooleanNAND_Params params;
	params.A = A;
	params.B = B;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.BooleanNOR
// Flags: Final, Native, Static, Public, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: bool	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: B	Type: bool	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: bool	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
bool UKismetMathLibrary::BooleanNOR(bool A, bool B) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.BooleanNOR");

	struct UKismetMathLibrary_BooleanNOR_Params {
		bool A;			//Offset: 0 | ElementSize: 1
		bool B;			//Offset: 1 | ElementSize: 1
		bool ReturnValue;			//Offset: 2 | ElementSize: 1
	};
	UKismetMathLibrary_BooleanNOR_Params params;
	params.A = A;
	params.B = B;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.BooleanOR
// Flags: Final, Native, Static, Public, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: bool	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: B	Type: bool	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: bool	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
bool UKismetMathLibrary::BooleanOR(bool A, bool B) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.BooleanOR");

	struct UKismetMathLibrary_BooleanOR_Params {
		bool A;			//Offset: 0 | ElementSize: 1
		bool B;			//Offset: 1 | ElementSize: 1
		bool ReturnValue;			//Offset: 2 | ElementSize: 1
	};
	UKismetMathLibrary_BooleanOR_Params params;
	params.A = A;
	params.B = B;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.BooleanXOR
// Flags: Final, Native, Static, Public, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: bool	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: B	Type: bool	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: bool	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
bool UKismetMathLibrary::BooleanXOR(bool A, bool B) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.BooleanXOR");

	struct UKismetMathLibrary_BooleanXOR_Params {
		bool A;			//Offset: 0 | ElementSize: 1
		bool B;			//Offset: 1 | ElementSize: 1
		bool ReturnValue;			//Offset: 2 | ElementSize: 1
	};
	UKismetMathLibrary_BooleanXOR_Params params;
	params.A = A;
	params.B = B;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.BreakColor
// Flags: Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: InColor	Type: struct FLinearColor	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: R	Type: float	Flags: Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: G	Type: float	Flags: Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: B	Type: float	Flags: Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: A	Type: float	Flags: Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
void UKismetMathLibrary::BreakColor(struct FLinearColor InColor, float* R, float* G, float* B, float* A) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.BreakColor");

	struct UKismetMathLibrary_BreakColor_Params {
		struct FLinearColor InColor;			//Offset: 0 | ElementSize: 16
		float R;			//Offset: 16 | ElementSize: 4
		float G;			//Offset: 20 | ElementSize: 4
		float B;			//Offset: 24 | ElementSize: 4
		float A;			//Offset: 28 | ElementSize: 4
	};
	UKismetMathLibrary_BreakColor_Params params;
	params.InColor = InColor;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	if (R != nullptr)
		*R = params.R;
	if (G != nullptr)
		*G = params.G;
	if (B != nullptr)
		*B = params.B;
	if (A != nullptr)
		*A = params.A;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.BreakDateTime
// Flags: Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: InDateTime	Type: struct FDateTime	Flags: Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: Year	Type: int32_t	Flags: Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: Month	Type: int32_t	Flags: Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: Day	Type: int32_t	Flags: Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: Hour	Type: int32_t	Flags: Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: Minute	Type: int32_t	Flags: Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: Second	Type: int32_t	Flags: Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: Millisecond	Type: int32_t	Flags: Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
void UKismetMathLibrary::BreakDateTime(struct FDateTime InDateTime, int32_t* Year, int32_t* Month, int32_t* Day, int32_t* Hour, int32_t* Minute, int32_t* Second, int32_t* Millisecond) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.BreakDateTime");

	struct UKismetMathLibrary_BreakDateTime_Params {
		struct FDateTime InDateTime;			//Offset: 0 | ElementSize: 8
		int32_t Year;			//Offset: 8 | ElementSize: 4
		int32_t Month;			//Offset: 12 | ElementSize: 4
		int32_t Day;			//Offset: 16 | ElementSize: 4
		int32_t Hour;			//Offset: 20 | ElementSize: 4
		int32_t Minute;			//Offset: 24 | ElementSize: 4
		int32_t Second;			//Offset: 28 | ElementSize: 4
		int32_t Millisecond;			//Offset: 32 | ElementSize: 4
	};
	UKismetMathLibrary_BreakDateTime_Params params;
	params.InDateTime = InDateTime;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	if (Year != nullptr)
		*Year = params.Year;
	if (Month != nullptr)
		*Month = params.Month;
	if (Day != nullptr)
		*Day = params.Day;
	if (Hour != nullptr)
		*Hour = params.Hour;
	if (Minute != nullptr)
		*Minute = params.Minute;
	if (Second != nullptr)
		*Second = params.Second;
	if (Millisecond != nullptr)
		*Millisecond = params.Millisecond;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.BreakFrameRate
// Flags: Final, Native, Static, Public, HasOutParms, BlueprintCallable, BlueprintPure
// Params:
// Name: InFrameRate	Type: struct FFrameRate	Flags: ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: Numerator	Type: int32_t	Flags: Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: Denominator	Type: int32_t	Flags: Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
void UKismetMathLibrary::BreakFrameRate(const struct FFrameRate& InFrameRate, int32_t* Numerator, int32_t* Denominator) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.BreakFrameRate");

	struct UKismetMathLibrary_BreakFrameRate_Params {
		struct FFrameRate InFrameRate;			//Offset: 0 | ElementSize: 8
		int32_t Numerator;			//Offset: 8 | ElementSize: 4
		int32_t Denominator;			//Offset: 12 | ElementSize: 4
	};
	UKismetMathLibrary_BreakFrameRate_Params params;
	params.InFrameRate = InFrameRate;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	if (Numerator != nullptr)
		*Numerator = params.Numerator;
	if (Denominator != nullptr)
		*Denominator = params.Denominator;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.BreakQualifiedFrameTime
// Flags: Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: InFrameTime	Type: struct FQualifiedFrameTime	Flags: ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: Frame	Type: struct FFrameNumber	Flags: Parm, OutParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: FrameRate	Type: struct FFrameRate	Flags: Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: SubFrame	Type: float	Flags: Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
void UKismetMathLibrary::BreakQualifiedFrameTime(const struct FQualifiedFrameTime& InFrameTime, struct FFrameNumber* Frame, struct FFrameRate* FrameRate, float* SubFrame) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.BreakQualifiedFrameTime");

	struct UKismetMathLibrary_BreakQualifiedFrameTime_Params {
		struct FQualifiedFrameTime InFrameTime;			//Offset: 0 | ElementSize: 16
		struct FFrameNumber Frame;			//Offset: 16 | ElementSize: 4
		struct FFrameRate FrameRate;			//Offset: 20 | ElementSize: 8
		float SubFrame;			//Offset: 28 | ElementSize: 4
	};
	UKismetMathLibrary_BreakQualifiedFrameTime_Params params;
	params.InFrameTime = InFrameTime;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	if (Frame != nullptr)
		*Frame = params.Frame;
	if (FrameRate != nullptr)
		*FrameRate = params.FrameRate;
	if (SubFrame != nullptr)
		*SubFrame = params.SubFrame;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.BreakRandomStream
// Flags: Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: InRandomStream	Type: struct FRandomStream	Flags: ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic
// Name: InitialSeed	Type: int32_t	Flags: Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
void UKismetMathLibrary::BreakRandomStream(const struct FRandomStream& InRandomStream, int32_t* InitialSeed) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.BreakRandomStream");

	struct UKismetMathLibrary_BreakRandomStream_Params {
		struct FRandomStream InRandomStream;			//Offset: 0 | ElementSize: 8
		int32_t InitialSeed;			//Offset: 8 | ElementSize: 4
	};
	UKismetMathLibrary_BreakRandomStream_Params params;
	params.InRandomStream = InRandomStream;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	if (InitialSeed != nullptr)
		*InitialSeed = params.InitialSeed;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.BreakRotator
// Flags: Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: InRot	Type: struct FRotator	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
// Name: Roll	Type: float	Flags: Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: Pitch	Type: float	Flags: Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: Yaw	Type: float	Flags: Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
void UKismetMathLibrary::BreakRotator(struct FRotator InRot, float* Roll, float* Pitch, float* Yaw) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.BreakRotator");

	struct UKismetMathLibrary_BreakRotator_Params {
		struct FRotator InRot;			//Offset: 0 | ElementSize: 12
		float Roll;			//Offset: 12 | ElementSize: 4
		float Pitch;			//Offset: 16 | ElementSize: 4
		float Yaw;			//Offset: 20 | ElementSize: 4
	};
	UKismetMathLibrary_BreakRotator_Params params;
	params.InRot = InRot;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	if (Roll != nullptr)
		*Roll = params.Roll;
	if (Pitch != nullptr)
		*Pitch = params.Pitch;
	if (Yaw != nullptr)
		*Yaw = params.Yaw;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.BreakRotIntoAxes
// Flags: Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: InRot	Type: struct FRotator	Flags: ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
// Name: X	Type: struct FVector	Flags: Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: Y	Type: struct FVector	Flags: Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: Z	Type: struct FVector	Flags: Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
void UKismetMathLibrary::BreakRotIntoAxes(const struct FRotator& InRot, struct FVector* X, struct FVector* Y, struct FVector* Z) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.BreakRotIntoAxes");

	struct UKismetMathLibrary_BreakRotIntoAxes_Params {
		struct FRotator InRot;			//Offset: 0 | ElementSize: 12
		struct FVector X;			//Offset: 12 | ElementSize: 12
		struct FVector Y;			//Offset: 24 | ElementSize: 12
		struct FVector Z;			//Offset: 36 | ElementSize: 12
	};
	UKismetMathLibrary_BreakRotIntoAxes_Params params;
	params.InRot = InRot;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	if (X != nullptr)
		*X = params.X;
	if (Y != nullptr)
		*Y = params.Y;
	if (Z != nullptr)
		*Z = params.Z;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.BreakTimespan
// Flags: Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: InTimespan	Type: struct FTimespan	Flags: Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: Days	Type: int32_t	Flags: Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: Hours	Type: int32_t	Flags: Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: Minutes	Type: int32_t	Flags: Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: Seconds	Type: int32_t	Flags: Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: Milliseconds	Type: int32_t	Flags: Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
void UKismetMathLibrary::BreakTimespan(struct FTimespan InTimespan, int32_t* Days, int32_t* Hours, int32_t* Minutes, int32_t* Seconds, int32_t* Milliseconds) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.BreakTimespan");

	struct UKismetMathLibrary_BreakTimespan_Params {
		struct FTimespan InTimespan;			//Offset: 0 | ElementSize: 8
		int32_t Days;			//Offset: 8 | ElementSize: 4
		int32_t Hours;			//Offset: 12 | ElementSize: 4
		int32_t Minutes;			//Offset: 16 | ElementSize: 4
		int32_t Seconds;			//Offset: 20 | ElementSize: 4
		int32_t Milliseconds;			//Offset: 24 | ElementSize: 4
	};
	UKismetMathLibrary_BreakTimespan_Params params;
	params.InTimespan = InTimespan;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	if (Days != nullptr)
		*Days = params.Days;
	if (Hours != nullptr)
		*Hours = params.Hours;
	if (Minutes != nullptr)
		*Minutes = params.Minutes;
	if (Seconds != nullptr)
		*Seconds = params.Seconds;
	if (Milliseconds != nullptr)
		*Milliseconds = params.Milliseconds;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.BreakTimespan2
// Flags: Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: InTimespan	Type: struct FTimespan	Flags: Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: Days	Type: int32_t	Flags: Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: Hours	Type: int32_t	Flags: Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: Minutes	Type: int32_t	Flags: Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: Seconds	Type: int32_t	Flags: Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: FractionNano	Type: int32_t	Flags: Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
void UKismetMathLibrary::BreakTimespan2(struct FTimespan InTimespan, int32_t* Days, int32_t* Hours, int32_t* Minutes, int32_t* Seconds, int32_t* FractionNano) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.BreakTimespan2");

	struct UKismetMathLibrary_BreakTimespan2_Params {
		struct FTimespan InTimespan;			//Offset: 0 | ElementSize: 8
		int32_t Days;			//Offset: 8 | ElementSize: 4
		int32_t Hours;			//Offset: 12 | ElementSize: 4
		int32_t Minutes;			//Offset: 16 | ElementSize: 4
		int32_t Seconds;			//Offset: 20 | ElementSize: 4
		int32_t FractionNano;			//Offset: 24 | ElementSize: 4
	};
	UKismetMathLibrary_BreakTimespan2_Params params;
	params.InTimespan = InTimespan;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	if (Days != nullptr)
		*Days = params.Days;
	if (Hours != nullptr)
		*Hours = params.Hours;
	if (Minutes != nullptr)
		*Minutes = params.Minutes;
	if (Seconds != nullptr)
		*Seconds = params.Seconds;
	if (FractionNano != nullptr)
		*FractionNano = params.FractionNano;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.BreakTransform
// Flags: Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: InTransform	Type: struct FTransform	Flags: ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
// Name: Location	Type: struct FVector	Flags: Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: Rotation	Type: struct FRotator	Flags: Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
// Name: Scale	Type: struct FVector	Flags: Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
void UKismetMathLibrary::BreakTransform(const struct FTransform& InTransform, struct FVector* Location, struct FRotator* Rotation, struct FVector* Scale) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.BreakTransform");

	struct UKismetMathLibrary_BreakTransform_Params {
		struct FTransform InTransform;			//Offset: 0 | ElementSize: 48
		struct FVector Location;			//Offset: 48 | ElementSize: 12
		struct FRotator Rotation;			//Offset: 60 | ElementSize: 12
		struct FVector Scale;			//Offset: 72 | ElementSize: 12
	};
	UKismetMathLibrary_BreakTransform_Params params;
	params.InTransform = InTransform;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	if (Location != nullptr)
		*Location = params.Location;
	if (Rotation != nullptr)
		*Rotation = params.Rotation;
	if (Scale != nullptr)
		*Scale = params.Scale;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.BreakVector
// Flags: Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: InVec	Type: struct FVector	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: X	Type: float	Flags: Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: Y	Type: float	Flags: Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: Z	Type: float	Flags: Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
void UKismetMathLibrary::BreakVector(struct FVector InVec, float* X, float* Y, float* Z) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.BreakVector");

	struct UKismetMathLibrary_BreakVector_Params {
		struct FVector InVec;			//Offset: 0 | ElementSize: 12
		float X;			//Offset: 12 | ElementSize: 4
		float Y;			//Offset: 16 | ElementSize: 4
		float Z;			//Offset: 20 | ElementSize: 4
	};
	UKismetMathLibrary_BreakVector_Params params;
	params.InVec = InVec;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	if (X != nullptr)
		*X = params.X;
	if (Y != nullptr)
		*Y = params.Y;
	if (Z != nullptr)
		*Z = params.Z;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.BreakVector2D
// Flags: Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: InVec	Type: struct FVector2D	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: X	Type: float	Flags: Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: Y	Type: float	Flags: Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
void UKismetMathLibrary::BreakVector2D(struct FVector2D InVec, float* X, float* Y) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.BreakVector2D");

	struct UKismetMathLibrary_BreakVector2D_Params {
		struct FVector2D InVec;			//Offset: 0 | ElementSize: 8
		float X;			//Offset: 8 | ElementSize: 4
		float Y;			//Offset: 12 | ElementSize: 4
	};
	UKismetMathLibrary_BreakVector2D_Params params;
	params.InVec = InVec;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	if (X != nullptr)
		*X = params.X;
	if (Y != nullptr)
		*Y = params.Y;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.BreakVector4
// Flags: Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: InVec	Type: struct FVector4	Flags: ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: X	Type: float	Flags: Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: Y	Type: float	Flags: Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: Z	Type: float	Flags: Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: W	Type: float	Flags: Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
void UKismetMathLibrary::BreakVector4(const struct FVector4& InVec, float* X, float* Y, float* Z, float* W) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.BreakVector4");

	struct UKismetMathLibrary_BreakVector4_Params {
		struct FVector4 InVec;			//Offset: 0 | ElementSize: 16
		float X;			//Offset: 16 | ElementSize: 4
		float Y;			//Offset: 20 | ElementSize: 4
		float Z;			//Offset: 24 | ElementSize: 4
		float W;			//Offset: 28 | ElementSize: 4
	};
	UKismetMathLibrary_BreakVector4_Params params;
	params.InVec = InVec;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	if (X != nullptr)
		*X = params.X;
	if (Y != nullptr)
		*Y = params.Y;
	if (Z != nullptr)
		*Z = params.Z;
	if (W != nullptr)
		*W = params.W;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.CInterpTo
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: Current	Type: struct FLinearColor	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: Target	Type: struct FLinearColor	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: DeltaTime	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: interpSpeed	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FLinearColor	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FLinearColor UKismetMathLibrary::CInterpTo(struct FLinearColor Current, struct FLinearColor Target, float DeltaTime, float interpSpeed) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.CInterpTo");

	struct UKismetMathLibrary_CInterpTo_Params {
		struct FLinearColor Current;			//Offset: 0 | ElementSize: 16
		struct FLinearColor Target;			//Offset: 16 | ElementSize: 16
		float DeltaTime;			//Offset: 32 | ElementSize: 4
		float interpSpeed;			//Offset: 36 | ElementSize: 4
		struct FLinearColor ReturnValue;			//Offset: 40 | ElementSize: 16
	};
	UKismetMathLibrary_CInterpTo_Params params;
	params.Current = Current;
	params.Target = Target;
	params.DeltaTime = DeltaTime;
	params.interpSpeed = interpSpeed;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Clamp
// Flags: Final, Native, Static, Public, BlueprintCallable, BlueprintPure
// Params:
// Name: Value	Type: int32_t	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: Min	Type: int32_t	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: Max	Type: int32_t	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: int32_t	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
int32_t UKismetMathLibrary::Clamp(int32_t Value, int32_t Min, int32_t Max) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Clamp");

	struct UKismetMathLibrary_Clamp_Params {
		int32_t Value;			//Offset: 0 | ElementSize: 4
		int32_t Min;			//Offset: 4 | ElementSize: 4
		int32_t Max;			//Offset: 8 | ElementSize: 4
		int32_t ReturnValue;			//Offset: 12 | ElementSize: 4
	};
	UKismetMathLibrary_Clamp_Params params;
	params.Value = Value;
	params.Min = Min;
	params.Max = Max;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.ClampAngle
// Flags: Final, Native, Static, Public, BlueprintCallable, BlueprintPure
// Params:
// Name: AngleDegrees	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: MinAngleDegrees	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: MaxAngleDegrees	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: float	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
float UKismetMathLibrary::ClampAngle(float AngleDegrees, float MinAngleDegrees, float MaxAngleDegrees) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.ClampAngle");

	struct UKismetMathLibrary_ClampAngle_Params {
		float AngleDegrees;			//Offset: 0 | ElementSize: 4
		float MinAngleDegrees;			//Offset: 4 | ElementSize: 4
		float MaxAngleDegrees;			//Offset: 8 | ElementSize: 4
		float ReturnValue;			//Offset: 12 | ElementSize: 4
	};
	UKismetMathLibrary_ClampAngle_Params params;
	params.AngleDegrees = AngleDegrees;
	params.MinAngleDegrees = MinAngleDegrees;
	params.MaxAngleDegrees = MaxAngleDegrees;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.ClampAxes2D
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: struct FVector2D	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: MinAxisVal	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: MaxAxisVal	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FVector2D	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FVector2D UKismetMathLibrary::ClampAxes2D(struct FVector2D A, float MinAxisVal, float MaxAxisVal) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.ClampAxes2D");

	struct UKismetMathLibrary_ClampAxes2D_Params {
		struct FVector2D A;			//Offset: 0 | ElementSize: 8
		float MinAxisVal;			//Offset: 8 | ElementSize: 4
		float MaxAxisVal;			//Offset: 12 | ElementSize: 4
		struct FVector2D ReturnValue;			//Offset: 16 | ElementSize: 8
	};
	UKismetMathLibrary_ClampAxes2D_Params params;
	params.A = A;
	params.MinAxisVal = MinAxisVal;
	params.MaxAxisVal = MaxAxisVal;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.ClampAxis
// Flags: Final, Native, Static, Public, BlueprintCallable, BlueprintPure
// Params:
// Name: Angle	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: float	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
float UKismetMathLibrary::ClampAxis(float Angle) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.ClampAxis");

	struct UKismetMathLibrary_ClampAxis_Params {
		float Angle;			//Offset: 0 | ElementSize: 4
		float ReturnValue;			//Offset: 4 | ElementSize: 4
	};
	UKismetMathLibrary_ClampAxis_Params params;
	params.Angle = Angle;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.ClampInt64
// Flags: Final, Native, Static, Public, BlueprintCallable, BlueprintPure
// Params:
// Name: Value	Type: int64_t	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: Min	Type: int64_t	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: Max	Type: int64_t	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: int64_t	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
int64_t UKismetMathLibrary::ClampInt64(int64_t Value, int64_t Min, int64_t Max) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.ClampInt64");

	struct UKismetMathLibrary_ClampInt64_Params {
		int64_t Value;			//Offset: 0 | ElementSize: 8
		int64_t Min;			//Offset: 8 | ElementSize: 8
		int64_t Max;			//Offset: 16 | ElementSize: 8
		int64_t ReturnValue;			//Offset: 24 | ElementSize: 8
	};
	UKismetMathLibrary_ClampInt64_Params params;
	params.Value = Value;
	params.Min = Min;
	params.Max = Max;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.ClampVectorSize
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: struct FVector	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: Min	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: Max	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FVector	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FVector UKismetMathLibrary::ClampVectorSize(struct FVector A, float Min, float Max) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.ClampVectorSize");

	struct UKismetMathLibrary_ClampVectorSize_Params {
		struct FVector A;			//Offset: 0 | ElementSize: 12
		float Min;			//Offset: 12 | ElementSize: 4
		float Max;			//Offset: 16 | ElementSize: 4
		struct FVector ReturnValue;			//Offset: 20 | ElementSize: 12
	};
	UKismetMathLibrary_ClampVectorSize_Params params;
	params.A = A;
	params.Min = Min;
	params.Max = Max;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.ClassIsChildOf
// Flags: Final, Native, Static, Public, BlueprintCallable, BlueprintPure
// Params:
// Name: TestClass	Type: class UObject*	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ParentClass	Type: class UObject*	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: bool	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
bool UKismetMathLibrary::ClassIsChildOf(class UObject* TestClass, class UObject* ParentClass) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.ClassIsChildOf");

	struct UKismetMathLibrary_ClassIsChildOf_Params {
		class UObject* TestClass;			//Offset: 0 | ElementSize: 8
		class UObject* ParentClass;			//Offset: 8 | ElementSize: 8
		bool ReturnValue;			//Offset: 16 | ElementSize: 1
	};
	UKismetMathLibrary_ClassIsChildOf_Params params;
	params.TestClass = TestClass;
	params.ParentClass = ParentClass;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.ComposeRotators
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: struct FRotator	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
// Name: B	Type: struct FRotator	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FRotator	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FRotator UKismetMathLibrary::ComposeRotators(struct FRotator A, struct FRotator B) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.ComposeRotators");

	struct UKismetMathLibrary_ComposeRotators_Params {
		struct FRotator A;			//Offset: 0 | ElementSize: 12
		struct FRotator B;			//Offset: 12 | ElementSize: 12
		struct FRotator ReturnValue;			//Offset: 24 | ElementSize: 12
	};
	UKismetMathLibrary_ComposeRotators_Params params;
	params.A = A;
	params.B = B;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.ComposeTransforms
// Flags: Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: struct FTransform	Flags: ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
// Name: B	Type: struct FTransform	Flags: ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FTransform	Flags: Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FTransform UKismetMathLibrary::ComposeTransforms(const struct FTransform& A, const struct FTransform& B) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.ComposeTransforms");

	struct UKismetMathLibrary_ComposeTransforms_Params {
		struct FTransform A;			//Offset: 0 | ElementSize: 48
		struct FTransform B;			//Offset: 48 | ElementSize: 48
		struct FTransform ReturnValue;			//Offset: 96 | ElementSize: 48
	};
	UKismetMathLibrary_ComposeTransforms_Params params;
	params.A = A;
	params.B = B;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Conv_BoolToByte
// Flags: Final, Native, Static, Public, BlueprintCallable, BlueprintPure
// Params:
// Name: InBool	Type: bool	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: unsigned char	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
unsigned char UKismetMathLibrary::Conv_BoolToByte(bool InBool) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Conv_BoolToByte");

	struct UKismetMathLibrary_Conv_BoolToByte_Params {
		bool InBool;			//Offset: 0 | ElementSize: 1
		unsigned char ReturnValue;			//Offset: 1 | ElementSize: 1
	};
	UKismetMathLibrary_Conv_BoolToByte_Params params;
	params.InBool = InBool;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Conv_BoolToFloat
// Flags: Final, Native, Static, Public, BlueprintCallable, BlueprintPure
// Params:
// Name: InBool	Type: bool	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: float	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
float UKismetMathLibrary::Conv_BoolToFloat(bool InBool) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Conv_BoolToFloat");

	struct UKismetMathLibrary_Conv_BoolToFloat_Params {
		bool InBool;			//Offset: 0 | ElementSize: 1
		float ReturnValue;			//Offset: 4 | ElementSize: 4
	};
	UKismetMathLibrary_Conv_BoolToFloat_Params params;
	params.InBool = InBool;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Conv_BoolToInt
// Flags: Final, Native, Static, Public, BlueprintCallable, BlueprintPure
// Params:
// Name: InBool	Type: bool	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: int32_t	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
int32_t UKismetMathLibrary::Conv_BoolToInt(bool InBool) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Conv_BoolToInt");

	struct UKismetMathLibrary_Conv_BoolToInt_Params {
		bool InBool;			//Offset: 0 | ElementSize: 1
		int32_t ReturnValue;			//Offset: 4 | ElementSize: 4
	};
	UKismetMathLibrary_Conv_BoolToInt_Params params;
	params.InBool = InBool;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Conv_ByteToFloat
// Flags: Final, Native, Static, Public, BlueprintCallable, BlueprintPure
// Params:
// Name: InByte	Type: unsigned char	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: float	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
float UKismetMathLibrary::Conv_ByteToFloat(unsigned char InByte) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Conv_ByteToFloat");

	struct UKismetMathLibrary_Conv_ByteToFloat_Params {
		unsigned char InByte;			//Offset: 0 | ElementSize: 1
		float ReturnValue;			//Offset: 4 | ElementSize: 4
	};
	UKismetMathLibrary_Conv_ByteToFloat_Params params;
	params.InByte = InByte;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Conv_ByteToInt
// Flags: Final, Native, Static, Public, BlueprintCallable, BlueprintPure
// Params:
// Name: InByte	Type: unsigned char	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: int32_t	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
int32_t UKismetMathLibrary::Conv_ByteToInt(unsigned char InByte) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Conv_ByteToInt");

	struct UKismetMathLibrary_Conv_ByteToInt_Params {
		unsigned char InByte;			//Offset: 0 | ElementSize: 1
		int32_t ReturnValue;			//Offset: 4 | ElementSize: 4
	};
	UKismetMathLibrary_Conv_ByteToInt_Params params;
	params.InByte = InByte;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Conv_ColorToLinearColor
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: InColor	Type: struct FColor	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FLinearColor	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FLinearColor UKismetMathLibrary::Conv_ColorToLinearColor(struct FColor InColor) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Conv_ColorToLinearColor");

	struct UKismetMathLibrary_Conv_ColorToLinearColor_Params {
		struct FColor InColor;			//Offset: 0 | ElementSize: 4
		struct FLinearColor ReturnValue;			//Offset: 4 | ElementSize: 16
	};
	UKismetMathLibrary_Conv_ColorToLinearColor_Params params;
	params.InColor = InColor;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Conv_FloatToLinearColor
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: InFloat	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FLinearColor	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FLinearColor UKismetMathLibrary::Conv_FloatToLinearColor(float InFloat) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Conv_FloatToLinearColor");

	struct UKismetMathLibrary_Conv_FloatToLinearColor_Params {
		float InFloat;			//Offset: 0 | ElementSize: 4
		struct FLinearColor ReturnValue;			//Offset: 4 | ElementSize: 16
	};
	UKismetMathLibrary_Conv_FloatToLinearColor_Params params;
	params.InFloat = InFloat;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Conv_FloatToVector
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: InFloat	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FVector	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FVector UKismetMathLibrary::Conv_FloatToVector(float InFloat) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Conv_FloatToVector");

	struct UKismetMathLibrary_Conv_FloatToVector_Params {
		float InFloat;			//Offset: 0 | ElementSize: 4
		struct FVector ReturnValue;			//Offset: 4 | ElementSize: 12
	};
	UKismetMathLibrary_Conv_FloatToVector_Params params;
	params.InFloat = InFloat;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Conv_Int64ToByte
// Flags: Final, Native, Static, Public, BlueprintCallable, BlueprintPure
// Params:
// Name: inInt	Type: int64_t	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: unsigned char	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
unsigned char UKismetMathLibrary::Conv_Int64ToByte(int64_t inInt) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Conv_Int64ToByte");

	struct UKismetMathLibrary_Conv_Int64ToByte_Params {
		int64_t inInt;			//Offset: 0 | ElementSize: 8
		unsigned char ReturnValue;			//Offset: 8 | ElementSize: 1
	};
	UKismetMathLibrary_Conv_Int64ToByte_Params params;
	params.inInt = inInt;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Conv_Int64ToInt
// Flags: Final, Native, Static, Public, BlueprintCallable, BlueprintPure
// Params:
// Name: inInt	Type: int64_t	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: int32_t	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
int32_t UKismetMathLibrary::Conv_Int64ToInt(int64_t inInt) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Conv_Int64ToInt");

	struct UKismetMathLibrary_Conv_Int64ToInt_Params {
		int64_t inInt;			//Offset: 0 | ElementSize: 8
		int32_t ReturnValue;			//Offset: 8 | ElementSize: 4
	};
	UKismetMathLibrary_Conv_Int64ToInt_Params params;
	params.inInt = inInt;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Conv_IntPointToVector2D
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: InIntPoint	Type: struct FIntPoint	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FVector2D	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FVector2D UKismetMathLibrary::Conv_IntPointToVector2D(struct FIntPoint InIntPoint) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Conv_IntPointToVector2D");

	struct UKismetMathLibrary_Conv_IntPointToVector2D_Params {
		struct FIntPoint InIntPoint;			//Offset: 0 | ElementSize: 8
		struct FVector2D ReturnValue;			//Offset: 8 | ElementSize: 8
	};
	UKismetMathLibrary_Conv_IntPointToVector2D_Params params;
	params.InIntPoint = InIntPoint;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Conv_IntToBool
// Flags: Final, Native, Static, Public, BlueprintCallable, BlueprintPure
// Params:
// Name: inInt	Type: int32_t	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: bool	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
bool UKismetMathLibrary::Conv_IntToBool(int32_t inInt) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Conv_IntToBool");

	struct UKismetMathLibrary_Conv_IntToBool_Params {
		int32_t inInt;			//Offset: 0 | ElementSize: 4
		bool ReturnValue;			//Offset: 4 | ElementSize: 1
	};
	UKismetMathLibrary_Conv_IntToBool_Params params;
	params.inInt = inInt;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Conv_IntToByte
// Flags: Final, Native, Static, Public, BlueprintCallable, BlueprintPure
// Params:
// Name: inInt	Type: int32_t	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: unsigned char	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
unsigned char UKismetMathLibrary::Conv_IntToByte(int32_t inInt) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Conv_IntToByte");

	struct UKismetMathLibrary_Conv_IntToByte_Params {
		int32_t inInt;			//Offset: 0 | ElementSize: 4
		unsigned char ReturnValue;			//Offset: 4 | ElementSize: 1
	};
	UKismetMathLibrary_Conv_IntToByte_Params params;
	params.inInt = inInt;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Conv_IntToFloat
// Flags: Final, Native, Static, Public, BlueprintCallable, BlueprintPure
// Params:
// Name: inInt	Type: int32_t	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: float	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
float UKismetMathLibrary::Conv_IntToFloat(int32_t inInt) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Conv_IntToFloat");

	struct UKismetMathLibrary_Conv_IntToFloat_Params {
		int32_t inInt;			//Offset: 0 | ElementSize: 4
		float ReturnValue;			//Offset: 4 | ElementSize: 4
	};
	UKismetMathLibrary_Conv_IntToFloat_Params params;
	params.inInt = inInt;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Conv_IntToInt64
// Flags: Final, Native, Static, Public, BlueprintCallable, BlueprintPure
// Params:
// Name: inInt	Type: int32_t	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: int64_t	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
int64_t UKismetMathLibrary::Conv_IntToInt64(int32_t inInt) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Conv_IntToInt64");

	struct UKismetMathLibrary_Conv_IntToInt64_Params {
		int32_t inInt;			//Offset: 0 | ElementSize: 4
		int64_t ReturnValue;			//Offset: 8 | ElementSize: 8
	};
	UKismetMathLibrary_Conv_IntToInt64_Params params;
	params.inInt = inInt;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Conv_IntToIntVector
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: inInt	Type: int32_t	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FIntVector	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FIntVector UKismetMathLibrary::Conv_IntToIntVector(int32_t inInt) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Conv_IntToIntVector");

	struct UKismetMathLibrary_Conv_IntToIntVector_Params {
		int32_t inInt;			//Offset: 0 | ElementSize: 4
		struct FIntVector ReturnValue;			//Offset: 4 | ElementSize: 12
	};
	UKismetMathLibrary_Conv_IntToIntVector_Params params;
	params.inInt = inInt;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Conv_IntVectorToVector
// Flags: Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: InIntVector	Type: struct FIntVector	Flags: ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FVector	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FVector UKismetMathLibrary::Conv_IntVectorToVector(const struct FIntVector& InIntVector) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Conv_IntVectorToVector");

	struct UKismetMathLibrary_Conv_IntVectorToVector_Params {
		struct FIntVector InIntVector;			//Offset: 0 | ElementSize: 12
		struct FVector ReturnValue;			//Offset: 12 | ElementSize: 12
	};
	UKismetMathLibrary_Conv_IntVectorToVector_Params params;
	params.InIntVector = InIntVector;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Conv_LinearColorToColor
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: InLinearColor	Type: struct FLinearColor	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: InUseSRGB	Type: bool	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FColor	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FColor UKismetMathLibrary::Conv_LinearColorToColor(struct FLinearColor InLinearColor, bool InUseSRGB) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Conv_LinearColorToColor");

	struct UKismetMathLibrary_Conv_LinearColorToColor_Params {
		struct FLinearColor InLinearColor;			//Offset: 0 | ElementSize: 16
		bool InUseSRGB;			//Offset: 16 | ElementSize: 1
		struct FColor ReturnValue;			//Offset: 20 | ElementSize: 4
	};
	UKismetMathLibrary_Conv_LinearColorToColor_Params params;
	params.InLinearColor = InLinearColor;
	params.InUseSRGB = InUseSRGB;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Conv_LinearColorToVector
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: InLinearColor	Type: struct FLinearColor	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FVector	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FVector UKismetMathLibrary::Conv_LinearColorToVector(struct FLinearColor InLinearColor) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Conv_LinearColorToVector");

	struct UKismetMathLibrary_Conv_LinearColorToVector_Params {
		struct FLinearColor InLinearColor;			//Offset: 0 | ElementSize: 16
		struct FVector ReturnValue;			//Offset: 16 | ElementSize: 12
	};
	UKismetMathLibrary_Conv_LinearColorToVector_Params params;
	params.InLinearColor = InLinearColor;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Conv_MatrixToRotator
// Flags: Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: InMatrix	Type: struct FMatrix	Flags: ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FRotator	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FRotator UKismetMathLibrary::Conv_MatrixToRotator(const struct FMatrix& InMatrix) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Conv_MatrixToRotator");

	struct UKismetMathLibrary_Conv_MatrixToRotator_Params {
		struct FMatrix InMatrix;			//Offset: 0 | ElementSize: 64
		struct FRotator ReturnValue;			//Offset: 64 | ElementSize: 12
	};
	UKismetMathLibrary_Conv_MatrixToRotator_Params params;
	params.InMatrix = InMatrix;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Conv_MatrixToTransform
// Flags: Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: InMatrix	Type: struct FMatrix	Flags: ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FTransform	Flags: Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FTransform UKismetMathLibrary::Conv_MatrixToTransform(const struct FMatrix& InMatrix) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Conv_MatrixToTransform");

	struct UKismetMathLibrary_Conv_MatrixToTransform_Params {
		struct FMatrix InMatrix;			//Offset: 0 | ElementSize: 64
		struct FTransform ReturnValue;			//Offset: 64 | ElementSize: 48
	};
	UKismetMathLibrary_Conv_MatrixToTransform_Params params;
	params.InMatrix = InMatrix;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Conv_RotatorToTransform
// Flags: Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: InRotator	Type: struct FRotator	Flags: ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FTransform	Flags: Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FTransform UKismetMathLibrary::Conv_RotatorToTransform(const struct FRotator& InRotator) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Conv_RotatorToTransform");

	struct UKismetMathLibrary_Conv_RotatorToTransform_Params {
		struct FRotator InRotator;			//Offset: 0 | ElementSize: 12
		struct FTransform ReturnValue;			//Offset: 16 | ElementSize: 48
	};
	UKismetMathLibrary_Conv_RotatorToTransform_Params params;
	params.InRotator = InRotator;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Conv_RotatorToVector
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: InRot	Type: struct FRotator	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FVector	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FVector UKismetMathLibrary::Conv_RotatorToVector(struct FRotator InRot) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Conv_RotatorToVector");

	struct UKismetMathLibrary_Conv_RotatorToVector_Params {
		struct FRotator InRot;			//Offset: 0 | ElementSize: 12
		struct FVector ReturnValue;			//Offset: 12 | ElementSize: 12
	};
	UKismetMathLibrary_Conv_RotatorToVector_Params params;
	params.InRot = InRot;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Conv_TransformToMatrix
// Flags: Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: Transform	Type: struct FTransform	Flags: ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FMatrix	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FMatrix UKismetMathLibrary::Conv_TransformToMatrix(const struct FTransform& Transform) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Conv_TransformToMatrix");

	struct UKismetMathLibrary_Conv_TransformToMatrix_Params {
		struct FTransform Transform;			//Offset: 0 | ElementSize: 48
		struct FMatrix ReturnValue;			//Offset: 48 | ElementSize: 64
	};
	UKismetMathLibrary_Conv_TransformToMatrix_Params params;
	params.Transform = Transform;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Conv_Vector2DToIntPoint
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: InVector2D	Type: struct FVector2D	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FIntPoint	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FIntPoint UKismetMathLibrary::Conv_Vector2DToIntPoint(struct FVector2D InVector2D) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Conv_Vector2DToIntPoint");

	struct UKismetMathLibrary_Conv_Vector2DToIntPoint_Params {
		struct FVector2D InVector2D;			//Offset: 0 | ElementSize: 8
		struct FIntPoint ReturnValue;			//Offset: 8 | ElementSize: 8
	};
	UKismetMathLibrary_Conv_Vector2DToIntPoint_Params params;
	params.InVector2D = InVector2D;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Conv_Vector2DToVector
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: InVector2D	Type: struct FVector2D	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: Z	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FVector	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FVector UKismetMathLibrary::Conv_Vector2DToVector(struct FVector2D InVector2D, float Z) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Conv_Vector2DToVector");

	struct UKismetMathLibrary_Conv_Vector2DToVector_Params {
		struct FVector2D InVector2D;			//Offset: 0 | ElementSize: 8
		float Z;			//Offset: 8 | ElementSize: 4
		struct FVector ReturnValue;			//Offset: 12 | ElementSize: 12
	};
	UKismetMathLibrary_Conv_Vector2DToVector_Params params;
	params.InVector2D = InVector2D;
	params.Z = Z;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Conv_Vector4ToQuaternion
// Flags: Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: InVec	Type: struct FVector4	Flags: ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FQuat	Flags: Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FQuat UKismetMathLibrary::Conv_Vector4ToQuaternion(const struct FVector4& InVec) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Conv_Vector4ToQuaternion");

	struct UKismetMathLibrary_Conv_Vector4ToQuaternion_Params {
		struct FVector4 InVec;			//Offset: 0 | ElementSize: 16
		struct FQuat ReturnValue;			//Offset: 16 | ElementSize: 16
	};
	UKismetMathLibrary_Conv_Vector4ToQuaternion_Params params;
	params.InVec = InVec;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Conv_Vector4ToRotator
// Flags: Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: InVec	Type: struct FVector4	Flags: ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FRotator	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FRotator UKismetMathLibrary::Conv_Vector4ToRotator(const struct FVector4& InVec) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Conv_Vector4ToRotator");

	struct UKismetMathLibrary_Conv_Vector4ToRotator_Params {
		struct FVector4 InVec;			//Offset: 0 | ElementSize: 16
		struct FRotator ReturnValue;			//Offset: 16 | ElementSize: 12
	};
	UKismetMathLibrary_Conv_Vector4ToRotator_Params params;
	params.InVec = InVec;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Conv_Vector4ToVector
// Flags: Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: InVector4	Type: struct FVector4	Flags: ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FVector	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FVector UKismetMathLibrary::Conv_Vector4ToVector(const struct FVector4& InVector4) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Conv_Vector4ToVector");

	struct UKismetMathLibrary_Conv_Vector4ToVector_Params {
		struct FVector4 InVector4;			//Offset: 0 | ElementSize: 16
		struct FVector ReturnValue;			//Offset: 16 | ElementSize: 12
	};
	UKismetMathLibrary_Conv_Vector4ToVector_Params params;
	params.InVector4 = InVector4;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Conv_VectorToLinearColor
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: InVec	Type: struct FVector	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FLinearColor	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FLinearColor UKismetMathLibrary::Conv_VectorToLinearColor(struct FVector InVec) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Conv_VectorToLinearColor");

	struct UKismetMathLibrary_Conv_VectorToLinearColor_Params {
		struct FVector InVec;			//Offset: 0 | ElementSize: 12
		struct FLinearColor ReturnValue;			//Offset: 12 | ElementSize: 16
	};
	UKismetMathLibrary_Conv_VectorToLinearColor_Params params;
	params.InVec = InVec;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Conv_VectorToQuaternion
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: InVec	Type: struct FVector	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FQuat	Flags: Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FQuat UKismetMathLibrary::Conv_VectorToQuaternion(struct FVector InVec) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Conv_VectorToQuaternion");

	struct UKismetMathLibrary_Conv_VectorToQuaternion_Params {
		struct FVector InVec;			//Offset: 0 | ElementSize: 12
		struct FQuat ReturnValue;			//Offset: 16 | ElementSize: 16
	};
	UKismetMathLibrary_Conv_VectorToQuaternion_Params params;
	params.InVec = InVec;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Conv_VectorToRotator
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: InVec	Type: struct FVector	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FRotator	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FRotator UKismetMathLibrary::Conv_VectorToRotator(struct FVector InVec) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Conv_VectorToRotator");

	struct UKismetMathLibrary_Conv_VectorToRotator_Params {
		struct FVector InVec;			//Offset: 0 | ElementSize: 12
		struct FRotator ReturnValue;			//Offset: 12 | ElementSize: 12
	};
	UKismetMathLibrary_Conv_VectorToRotator_Params params;
	params.InVec = InVec;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Conv_VectorToTransform
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: InLocation	Type: struct FVector	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FTransform	Flags: Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FTransform UKismetMathLibrary::Conv_VectorToTransform(struct FVector InLocation) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Conv_VectorToTransform");

	struct UKismetMathLibrary_Conv_VectorToTransform_Params {
		struct FVector InLocation;			//Offset: 0 | ElementSize: 12
		struct FTransform ReturnValue;			//Offset: 16 | ElementSize: 48
	};
	UKismetMathLibrary_Conv_VectorToTransform_Params params;
	params.InLocation = InLocation;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Conv_VectorToVector2D
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: InVector	Type: struct FVector	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FVector2D	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FVector2D UKismetMathLibrary::Conv_VectorToVector2D(struct FVector InVector) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Conv_VectorToVector2D");

	struct UKismetMathLibrary_Conv_VectorToVector2D_Params {
		struct FVector InVector;			//Offset: 0 | ElementSize: 12
		struct FVector2D ReturnValue;			//Offset: 12 | ElementSize: 8
	};
	UKismetMathLibrary_Conv_VectorToVector2D_Params params;
	params.InVector = InVector;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.ConvertTransformToRelative
// Flags: Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: Transform	Type: struct FTransform	Flags: ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
// Name: ParentTransform	Type: struct FTransform	Flags: ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FTransform	Flags: Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FTransform UKismetMathLibrary::ConvertTransformToRelative(const struct FTransform& Transform, const struct FTransform& ParentTransform) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.ConvertTransformToRelative");

	struct UKismetMathLibrary_ConvertTransformToRelative_Params {
		struct FTransform Transform;			//Offset: 0 | ElementSize: 48
		struct FTransform ParentTransform;			//Offset: 48 | ElementSize: 48
		struct FTransform ReturnValue;			//Offset: 96 | ElementSize: 48
	};
	UKismetMathLibrary_ConvertTransformToRelative_Params params;
	params.Transform = Transform;
	params.ParentTransform = ParentTransform;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Cos
// Flags: Final, Native, Static, Public, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: float	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
float UKismetMathLibrary::Cos(float A) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Cos");

	struct UKismetMathLibrary_Cos_Params {
		float A;			//Offset: 0 | ElementSize: 4
		float ReturnValue;			//Offset: 4 | ElementSize: 4
	};
	UKismetMathLibrary_Cos_Params params;
	params.A = A;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.CreateVectorFromYawPitch
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: Yaw	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: Pitch	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: Length	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FVector	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FVector UKismetMathLibrary::CreateVectorFromYawPitch(float Yaw, float Pitch, float Length) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.CreateVectorFromYawPitch");

	struct UKismetMathLibrary_CreateVectorFromYawPitch_Params {
		float Yaw;			//Offset: 0 | ElementSize: 4
		float Pitch;			//Offset: 4 | ElementSize: 4
		float Length;			//Offset: 8 | ElementSize: 4
		struct FVector ReturnValue;			//Offset: 12 | ElementSize: 12
	};
	UKismetMathLibrary_CreateVectorFromYawPitch_Params params;
	params.Yaw = Yaw;
	params.Pitch = Pitch;
	params.Length = Length;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Cross_VectorVector
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: struct FVector	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: B	Type: struct FVector	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FVector	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FVector UKismetMathLibrary::Cross_VectorVector(struct FVector A, struct FVector B) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Cross_VectorVector");

	struct UKismetMathLibrary_Cross_VectorVector_Params {
		struct FVector A;			//Offset: 0 | ElementSize: 12
		struct FVector B;			//Offset: 12 | ElementSize: 12
		struct FVector ReturnValue;			//Offset: 24 | ElementSize: 12
	};
	UKismetMathLibrary_Cross_VectorVector_Params params;
	params.A = A;
	params.B = B;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.CrossProduct2D
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: struct FVector2D	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: B	Type: struct FVector2D	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: float	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
float UKismetMathLibrary::CrossProduct2D(struct FVector2D A, struct FVector2D B) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.CrossProduct2D");

	struct UKismetMathLibrary_CrossProduct2D_Params {
		struct FVector2D A;			//Offset: 0 | ElementSize: 8
		struct FVector2D B;			//Offset: 8 | ElementSize: 8
		float ReturnValue;			//Offset: 16 | ElementSize: 4
	};
	UKismetMathLibrary_CrossProduct2D_Params params;
	params.A = A;
	params.B = B;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.DateTimeFromIsoString
// Flags: Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: IsoString	Type: struct FString	Flags: Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: Result	Type: struct FDateTime	Flags: Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: bool	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
bool UKismetMathLibrary::DateTimeFromIsoString(struct FString IsoString, struct FDateTime* Result) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.DateTimeFromIsoString");

	struct UKismetMathLibrary_DateTimeFromIsoString_Params {
		struct FString IsoString;			//Offset: 0 | ElementSize: 16
		struct FDateTime Result;			//Offset: 16 | ElementSize: 8
		bool ReturnValue;			//Offset: 24 | ElementSize: 1
	};
	UKismetMathLibrary_DateTimeFromIsoString_Params params;
	params.IsoString = IsoString;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	if (Result != nullptr)
		*Result = params.Result;
	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.DateTimeFromString
// Flags: Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: DateTimeString	Type: struct FString	Flags: Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: Result	Type: struct FDateTime	Flags: Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: bool	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
bool UKismetMathLibrary::DateTimeFromString(struct FString DateTimeString, struct FDateTime* Result) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.DateTimeFromString");

	struct UKismetMathLibrary_DateTimeFromString_Params {
		struct FString DateTimeString;			//Offset: 0 | ElementSize: 16
		struct FDateTime Result;			//Offset: 16 | ElementSize: 8
		bool ReturnValue;			//Offset: 24 | ElementSize: 1
	};
	UKismetMathLibrary_DateTimeFromString_Params params;
	params.DateTimeString = DateTimeString;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	if (Result != nullptr)
		*Result = params.Result;
	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.DateTimeMaxValue
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: ReturnValue	Type: struct FDateTime	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FDateTime UKismetMathLibrary::DateTimeMaxValue() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.DateTimeMaxValue");

	struct UKismetMathLibrary_DateTimeMaxValue_Params {
		struct FDateTime ReturnValue;			//Offset: 0 | ElementSize: 8
	};
	UKismetMathLibrary_DateTimeMaxValue_Params params;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.DateTimeMinValue
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: ReturnValue	Type: struct FDateTime	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FDateTime UKismetMathLibrary::DateTimeMinValue() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.DateTimeMinValue");

	struct UKismetMathLibrary_DateTimeMinValue_Params {
		struct FDateTime ReturnValue;			//Offset: 0 | ElementSize: 8
	};
	UKismetMathLibrary_DateTimeMinValue_Params params;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.DaysInMonth
// Flags: Final, Native, Static, Public, BlueprintCallable, BlueprintPure
// Params:
// Name: Year	Type: int32_t	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: Month	Type: int32_t	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: int32_t	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
int32_t UKismetMathLibrary::DaysInMonth(int32_t Year, int32_t Month) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.DaysInMonth");

	struct UKismetMathLibrary_DaysInMonth_Params {
		int32_t Year;			//Offset: 0 | ElementSize: 4
		int32_t Month;			//Offset: 4 | ElementSize: 4
		int32_t ReturnValue;			//Offset: 8 | ElementSize: 4
	};
	UKismetMathLibrary_DaysInMonth_Params params;
	params.Year = Year;
	params.Month = Month;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.DaysInYear
// Flags: Final, Native, Static, Public, BlueprintCallable, BlueprintPure
// Params:
// Name: Year	Type: int32_t	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: int32_t	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
int32_t UKismetMathLibrary::DaysInYear(int32_t Year) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.DaysInYear");

	struct UKismetMathLibrary_DaysInYear_Params {
		int32_t Year;			//Offset: 0 | ElementSize: 4
		int32_t ReturnValue;			//Offset: 4 | ElementSize: 4
	};
	UKismetMathLibrary_DaysInYear_Params params;
	params.Year = Year;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.DegAcos
// Flags: Final, Native, Static, Public, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: float	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
float UKismetMathLibrary::DegAcos(float A) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.DegAcos");

	struct UKismetMathLibrary_DegAcos_Params {
		float A;			//Offset: 0 | ElementSize: 4
		float ReturnValue;			//Offset: 4 | ElementSize: 4
	};
	UKismetMathLibrary_DegAcos_Params params;
	params.A = A;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.DegAsin
// Flags: Final, Native, Static, Public, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: float	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
float UKismetMathLibrary::DegAsin(float A) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.DegAsin");

	struct UKismetMathLibrary_DegAsin_Params {
		float A;			//Offset: 0 | ElementSize: 4
		float ReturnValue;			//Offset: 4 | ElementSize: 4
	};
	UKismetMathLibrary_DegAsin_Params params;
	params.A = A;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.DegAtan
// Flags: Final, Native, Static, Public, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: float	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
float UKismetMathLibrary::DegAtan(float A) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.DegAtan");

	struct UKismetMathLibrary_DegAtan_Params {
		float A;			//Offset: 0 | ElementSize: 4
		float ReturnValue;			//Offset: 4 | ElementSize: 4
	};
	UKismetMathLibrary_DegAtan_Params params;
	params.A = A;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.DegAtan2
// Flags: Final, Native, Static, Public, BlueprintCallable, BlueprintPure
// Params:
// Name: Y	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: X	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: float	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
float UKismetMathLibrary::DegAtan2(float Y, float X) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.DegAtan2");

	struct UKismetMathLibrary_DegAtan2_Params {
		float Y;			//Offset: 0 | ElementSize: 4
		float X;			//Offset: 4 | ElementSize: 4
		float ReturnValue;			//Offset: 8 | ElementSize: 4
	};
	UKismetMathLibrary_DegAtan2_Params params;
	params.Y = Y;
	params.X = X;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.DegCos
// Flags: Final, Native, Static, Public, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: float	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
float UKismetMathLibrary::DegCos(float A) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.DegCos");

	struct UKismetMathLibrary_DegCos_Params {
		float A;			//Offset: 0 | ElementSize: 4
		float ReturnValue;			//Offset: 4 | ElementSize: 4
	};
	UKismetMathLibrary_DegCos_Params params;
	params.A = A;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.DegreesToRadians
// Flags: Final, Native, Static, Public, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: float	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
float UKismetMathLibrary::DegreesToRadians(float A) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.DegreesToRadians");

	struct UKismetMathLibrary_DegreesToRadians_Params {
		float A;			//Offset: 0 | ElementSize: 4
		float ReturnValue;			//Offset: 4 | ElementSize: 4
	};
	UKismetMathLibrary_DegreesToRadians_Params params;
	params.A = A;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.DegSin
// Flags: Final, Native, Static, Public, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: float	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
float UKismetMathLibrary::DegSin(float A) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.DegSin");

	struct UKismetMathLibrary_DegSin_Params {
		float A;			//Offset: 0 | ElementSize: 4
		float ReturnValue;			//Offset: 4 | ElementSize: 4
	};
	UKismetMathLibrary_DegSin_Params params;
	params.A = A;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.DegTan
// Flags: Final, Native, Static, Public, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: float	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
float UKismetMathLibrary::DegTan(float A) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.DegTan");

	struct UKismetMathLibrary_DegTan_Params {
		float A;			//Offset: 0 | ElementSize: 4
		float ReturnValue;			//Offset: 4 | ElementSize: 4
	};
	UKismetMathLibrary_DegTan_Params params;
	params.A = A;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Distance2D
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: v1	Type: struct FVector2D	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: v2	Type: struct FVector2D	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: float	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
float UKismetMathLibrary::Distance2D(struct FVector2D v1, struct FVector2D v2) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Distance2D");

	struct UKismetMathLibrary_Distance2D_Params {
		struct FVector2D v1;			//Offset: 0 | ElementSize: 8
		struct FVector2D v2;			//Offset: 8 | ElementSize: 8
		float ReturnValue;			//Offset: 16 | ElementSize: 4
	};
	UKismetMathLibrary_Distance2D_Params params;
	params.v1 = v1;
	params.v2 = v2;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.DistanceSquared2D
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: v1	Type: struct FVector2D	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: v2	Type: struct FVector2D	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: float	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
float UKismetMathLibrary::DistanceSquared2D(struct FVector2D v1, struct FVector2D v2) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.DistanceSquared2D");

	struct UKismetMathLibrary_DistanceSquared2D_Params {
		struct FVector2D v1;			//Offset: 0 | ElementSize: 8
		struct FVector2D v2;			//Offset: 8 | ElementSize: 8
		float ReturnValue;			//Offset: 16 | ElementSize: 4
	};
	UKismetMathLibrary_DistanceSquared2D_Params params;
	params.v1 = v1;
	params.v2 = v2;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Divide_ByteByte
// Flags: Final, Native, Static, Public, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: unsigned char	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: B	Type: unsigned char	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: unsigned char	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
unsigned char UKismetMathLibrary::Divide_ByteByte(unsigned char A, unsigned char B) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Divide_ByteByte");

	struct UKismetMathLibrary_Divide_ByteByte_Params {
		unsigned char A;			//Offset: 0 | ElementSize: 1
		unsigned char B;			//Offset: 1 | ElementSize: 1
		unsigned char ReturnValue;			//Offset: 2 | ElementSize: 1
	};
	UKismetMathLibrary_Divide_ByteByte_Params params;
	params.A = A;
	params.B = B;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Divide_FloatFloat
// Flags: Final, Native, Static, Public, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: B	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: float	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
float UKismetMathLibrary::Divide_FloatFloat(float A, float B) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Divide_FloatFloat");

	struct UKismetMathLibrary_Divide_FloatFloat_Params {
		float A;			//Offset: 0 | ElementSize: 4
		float B;			//Offset: 4 | ElementSize: 4
		float ReturnValue;			//Offset: 8 | ElementSize: 4
	};
	UKismetMathLibrary_Divide_FloatFloat_Params params;
	params.A = A;
	params.B = B;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Divide_Int64Int64
// Flags: Final, Native, Static, Public, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: int64_t	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: B	Type: int64_t	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: int64_t	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
int64_t UKismetMathLibrary::Divide_Int64Int64(int64_t A, int64_t B) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Divide_Int64Int64");

	struct UKismetMathLibrary_Divide_Int64Int64_Params {
		int64_t A;			//Offset: 0 | ElementSize: 8
		int64_t B;			//Offset: 8 | ElementSize: 8
		int64_t ReturnValue;			//Offset: 16 | ElementSize: 8
	};
	UKismetMathLibrary_Divide_Int64Int64_Params params;
	params.A = A;
	params.B = B;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Divide_IntInt
// Flags: Final, Native, Static, Public, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: int32_t	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: B	Type: int32_t	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: int32_t	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
int32_t UKismetMathLibrary::Divide_IntInt(int32_t A, int32_t B) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Divide_IntInt");

	struct UKismetMathLibrary_Divide_IntInt_Params {
		int32_t A;			//Offset: 0 | ElementSize: 4
		int32_t B;			//Offset: 4 | ElementSize: 4
		int32_t ReturnValue;			//Offset: 8 | ElementSize: 4
	};
	UKismetMathLibrary_Divide_IntInt_Params params;
	params.A = A;
	params.B = B;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Divide_IntPointInt
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: struct FIntPoint	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: B	Type: int32_t	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FIntPoint	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FIntPoint UKismetMathLibrary::Divide_IntPointInt(struct FIntPoint A, int32_t B) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Divide_IntPointInt");

	struct UKismetMathLibrary_Divide_IntPointInt_Params {
		struct FIntPoint A;			//Offset: 0 | ElementSize: 8
		int32_t B;			//Offset: 8 | ElementSize: 4
		struct FIntPoint ReturnValue;			//Offset: 12 | ElementSize: 8
	};
	UKismetMathLibrary_Divide_IntPointInt_Params params;
	params.A = A;
	params.B = B;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Divide_IntPointIntPoint
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: struct FIntPoint	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: B	Type: struct FIntPoint	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FIntPoint	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FIntPoint UKismetMathLibrary::Divide_IntPointIntPoint(struct FIntPoint A, struct FIntPoint B) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Divide_IntPointIntPoint");

	struct UKismetMathLibrary_Divide_IntPointIntPoint_Params {
		struct FIntPoint A;			//Offset: 0 | ElementSize: 8
		struct FIntPoint B;			//Offset: 8 | ElementSize: 8
		struct FIntPoint ReturnValue;			//Offset: 16 | ElementSize: 8
	};
	UKismetMathLibrary_Divide_IntPointIntPoint_Params params;
	params.A = A;
	params.B = B;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Divide_LinearColorLinearColor
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: struct FLinearColor	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: B	Type: struct FLinearColor	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FLinearColor	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FLinearColor UKismetMathLibrary::Divide_LinearColorLinearColor(struct FLinearColor A, struct FLinearColor B) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Divide_LinearColorLinearColor");

	struct UKismetMathLibrary_Divide_LinearColorLinearColor_Params {
		struct FLinearColor A;			//Offset: 0 | ElementSize: 16
		struct FLinearColor B;			//Offset: 16 | ElementSize: 16
		struct FLinearColor ReturnValue;			//Offset: 32 | ElementSize: 16
	};
	UKismetMathLibrary_Divide_LinearColorLinearColor_Params params;
	params.A = A;
	params.B = B;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Divide_TimespanFloat
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: struct FTimespan	Flags: Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: Scalar	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FTimespan	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FTimespan UKismetMathLibrary::Divide_TimespanFloat(struct FTimespan A, float Scalar) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Divide_TimespanFloat");

	struct UKismetMathLibrary_Divide_TimespanFloat_Params {
		struct FTimespan A;			//Offset: 0 | ElementSize: 8
		float Scalar;			//Offset: 8 | ElementSize: 4
		struct FTimespan ReturnValue;			//Offset: 16 | ElementSize: 8
	};
	UKismetMathLibrary_Divide_TimespanFloat_Params params;
	params.A = A;
	params.Scalar = Scalar;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Divide_Vector2DFloat
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: struct FVector2D	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: B	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FVector2D	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FVector2D UKismetMathLibrary::Divide_Vector2DFloat(struct FVector2D A, float B) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Divide_Vector2DFloat");

	struct UKismetMathLibrary_Divide_Vector2DFloat_Params {
		struct FVector2D A;			//Offset: 0 | ElementSize: 8
		float B;			//Offset: 8 | ElementSize: 4
		struct FVector2D ReturnValue;			//Offset: 12 | ElementSize: 8
	};
	UKismetMathLibrary_Divide_Vector2DFloat_Params params;
	params.A = A;
	params.B = B;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Divide_Vector2DVector2D
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: struct FVector2D	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: B	Type: struct FVector2D	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FVector2D	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FVector2D UKismetMathLibrary::Divide_Vector2DVector2D(struct FVector2D A, struct FVector2D B) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Divide_Vector2DVector2D");

	struct UKismetMathLibrary_Divide_Vector2DVector2D_Params {
		struct FVector2D A;			//Offset: 0 | ElementSize: 8
		struct FVector2D B;			//Offset: 8 | ElementSize: 8
		struct FVector2D ReturnValue;			//Offset: 16 | ElementSize: 8
	};
	UKismetMathLibrary_Divide_Vector2DVector2D_Params params;
	params.A = A;
	params.B = B;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Divide_Vector4Vector4
// Flags: Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: struct FVector4	Flags: ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: B	Type: struct FVector4	Flags: ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FVector4	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FVector4 UKismetMathLibrary::Divide_Vector4Vector4(const struct FVector4& A, const struct FVector4& B) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Divide_Vector4Vector4");

	struct UKismetMathLibrary_Divide_Vector4Vector4_Params {
		struct FVector4 A;			//Offset: 0 | ElementSize: 16
		struct FVector4 B;			//Offset: 16 | ElementSize: 16
		struct FVector4 ReturnValue;			//Offset: 32 | ElementSize: 16
	};
	UKismetMathLibrary_Divide_Vector4Vector4_Params params;
	params.A = A;
	params.B = B;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Divide_VectorFloat
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: struct FVector	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: B	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FVector	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FVector UKismetMathLibrary::Divide_VectorFloat(struct FVector A, float B) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Divide_VectorFloat");

	struct UKismetMathLibrary_Divide_VectorFloat_Params {
		struct FVector A;			//Offset: 0 | ElementSize: 12
		float B;			//Offset: 12 | ElementSize: 4
		struct FVector ReturnValue;			//Offset: 16 | ElementSize: 12
	};
	UKismetMathLibrary_Divide_VectorFloat_Params params;
	params.A = A;
	params.B = B;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Divide_VectorInt
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: struct FVector	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: B	Type: int32_t	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FVector	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FVector UKismetMathLibrary::Divide_VectorInt(struct FVector A, int32_t B) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Divide_VectorInt");

	struct UKismetMathLibrary_Divide_VectorInt_Params {
		struct FVector A;			//Offset: 0 | ElementSize: 12
		int32_t B;			//Offset: 12 | ElementSize: 4
		struct FVector ReturnValue;			//Offset: 16 | ElementSize: 12
	};
	UKismetMathLibrary_Divide_VectorInt_Params params;
	params.A = A;
	params.B = B;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Divide_VectorVector
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: struct FVector	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: B	Type: struct FVector	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FVector	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FVector UKismetMathLibrary::Divide_VectorVector(struct FVector A, struct FVector B) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Divide_VectorVector");

	struct UKismetMathLibrary_Divide_VectorVector_Params {
		struct FVector A;			//Offset: 0 | ElementSize: 12
		struct FVector B;			//Offset: 12 | ElementSize: 12
		struct FVector ReturnValue;			//Offset: 24 | ElementSize: 12
	};
	UKismetMathLibrary_Divide_VectorVector_Params params;
	params.A = A;
	params.B = B;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Dot_VectorVector
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: struct FVector	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: B	Type: struct FVector	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: float	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
float UKismetMathLibrary::Dot_VectorVector(struct FVector A, struct FVector B) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Dot_VectorVector");

	struct UKismetMathLibrary_Dot_VectorVector_Params {
		struct FVector A;			//Offset: 0 | ElementSize: 12
		struct FVector B;			//Offset: 12 | ElementSize: 12
		float ReturnValue;			//Offset: 24 | ElementSize: 4
	};
	UKismetMathLibrary_Dot_VectorVector_Params params;
	params.A = A;
	params.B = B;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.DotProduct2D
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: struct FVector2D	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: B	Type: struct FVector2D	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: float	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
float UKismetMathLibrary::DotProduct2D(struct FVector2D A, struct FVector2D B) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.DotProduct2D");

	struct UKismetMathLibrary_DotProduct2D_Params {
		struct FVector2D A;			//Offset: 0 | ElementSize: 8
		struct FVector2D B;			//Offset: 8 | ElementSize: 8
		float ReturnValue;			//Offset: 16 | ElementSize: 4
	};
	UKismetMathLibrary_DotProduct2D_Params params;
	params.A = A;
	params.B = B;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.DynamicWeightedMovingAverage_Float
// Flags: Final, Native, Static, Public, BlueprintCallable, BlueprintPure
// Params:
// Name: CurrentSample	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: PreviousSample	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: MaxDistance	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: MinWeight	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: MaxWeight	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: float	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
float UKismetMathLibrary::DynamicWeightedMovingAverage_Float(float CurrentSample, float PreviousSample, float MaxDistance, float MinWeight, float MaxWeight) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.DynamicWeightedMovingAverage_Float");

	struct UKismetMathLibrary_DynamicWeightedMovingAverage_Float_Params {
		float CurrentSample;			//Offset: 0 | ElementSize: 4
		float PreviousSample;			//Offset: 4 | ElementSize: 4
		float MaxDistance;			//Offset: 8 | ElementSize: 4
		float MinWeight;			//Offset: 12 | ElementSize: 4
		float MaxWeight;			//Offset: 16 | ElementSize: 4
		float ReturnValue;			//Offset: 20 | ElementSize: 4
	};
	UKismetMathLibrary_DynamicWeightedMovingAverage_Float_Params params;
	params.CurrentSample = CurrentSample;
	params.PreviousSample = PreviousSample;
	params.MaxDistance = MaxDistance;
	params.MinWeight = MinWeight;
	params.MaxWeight = MaxWeight;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.DynamicWeightedMovingAverage_FRotator
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: CurrentSample	Type: struct FRotator	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
// Name: PreviousSample	Type: struct FRotator	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
// Name: MaxDistance	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: MinWeight	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: MaxWeight	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FRotator	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FRotator UKismetMathLibrary::DynamicWeightedMovingAverage_FRotator(struct FRotator CurrentSample, struct FRotator PreviousSample, float MaxDistance, float MinWeight, float MaxWeight) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.DynamicWeightedMovingAverage_FRotator");

	struct UKismetMathLibrary_DynamicWeightedMovingAverage_FRotator_Params {
		struct FRotator CurrentSample;			//Offset: 0 | ElementSize: 12
		struct FRotator PreviousSample;			//Offset: 12 | ElementSize: 12
		float MaxDistance;			//Offset: 24 | ElementSize: 4
		float MinWeight;			//Offset: 28 | ElementSize: 4
		float MaxWeight;			//Offset: 32 | ElementSize: 4
		struct FRotator ReturnValue;			//Offset: 36 | ElementSize: 12
	};
	UKismetMathLibrary_DynamicWeightedMovingAverage_FRotator_Params params;
	params.CurrentSample = CurrentSample;
	params.PreviousSample = PreviousSample;
	params.MaxDistance = MaxDistance;
	params.MinWeight = MinWeight;
	params.MaxWeight = MaxWeight;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.DynamicWeightedMovingAverage_FVector
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: CurrentSample	Type: struct FVector	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: PreviousSample	Type: struct FVector	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: MaxDistance	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: MinWeight	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: MaxWeight	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FVector	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FVector UKismetMathLibrary::DynamicWeightedMovingAverage_FVector(struct FVector CurrentSample, struct FVector PreviousSample, float MaxDistance, float MinWeight, float MaxWeight) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.DynamicWeightedMovingAverage_FVector");

	struct UKismetMathLibrary_DynamicWeightedMovingAverage_FVector_Params {
		struct FVector CurrentSample;			//Offset: 0 | ElementSize: 12
		struct FVector PreviousSample;			//Offset: 12 | ElementSize: 12
		float MaxDistance;			//Offset: 24 | ElementSize: 4
		float MinWeight;			//Offset: 28 | ElementSize: 4
		float MaxWeight;			//Offset: 32 | ElementSize: 4
		struct FVector ReturnValue;			//Offset: 36 | ElementSize: 12
	};
	UKismetMathLibrary_DynamicWeightedMovingAverage_FVector_Params params;
	params.CurrentSample = CurrentSample;
	params.PreviousSample = PreviousSample;
	params.MaxDistance = MaxDistance;
	params.MinWeight = MinWeight;
	params.MaxWeight = MaxWeight;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Ease
// Flags: Final, Native, Static, Public, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: B	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: Alpha	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: EasingFunc	Type: TEnumAsByte<EEasingFunc>	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: BlendExp	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: Steps	Type: int32_t	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: float	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
float UKismetMathLibrary::Ease(float A, float B, float Alpha, TEnumAsByte<EEasingFunc> EasingFunc, float BlendExp, int32_t Steps) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Ease");

	struct UKismetMathLibrary_Ease_Params {
		float A;			//Offset: 0 | ElementSize: 4
		float B;			//Offset: 4 | ElementSize: 4
		float Alpha;			//Offset: 8 | ElementSize: 4
		TEnumAsByte<EEasingFunc> EasingFunc;			//Offset: 12 | ElementSize: 1
		float BlendExp;			//Offset: 16 | ElementSize: 4
		int32_t Steps;			//Offset: 20 | ElementSize: 4
		float ReturnValue;			//Offset: 24 | ElementSize: 4
	};
	UKismetMathLibrary_Ease_Params params;
	params.A = A;
	params.B = B;
	params.Alpha = Alpha;
	params.EasingFunc = EasingFunc;
	params.BlendExp = BlendExp;
	params.Steps = Steps;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Equal_IntPointIntPoint
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: struct FIntPoint	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: B	Type: struct FIntPoint	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: bool	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
bool UKismetMathLibrary::Equal_IntPointIntPoint(struct FIntPoint A, struct FIntPoint B) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Equal_IntPointIntPoint");

	struct UKismetMathLibrary_Equal_IntPointIntPoint_Params {
		struct FIntPoint A;			//Offset: 0 | ElementSize: 8
		struct FIntPoint B;			//Offset: 8 | ElementSize: 8
		bool ReturnValue;			//Offset: 16 | ElementSize: 1
	};
	UKismetMathLibrary_Equal_IntPointIntPoint_Params params;
	params.A = A;
	params.B = B;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.EqualEqual_BoolBool
// Flags: Final, Native, Static, Public, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: bool	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: B	Type: bool	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: bool	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
bool UKismetMathLibrary::EqualEqual_BoolBool(bool A, bool B) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.EqualEqual_BoolBool");

	struct UKismetMathLibrary_EqualEqual_BoolBool_Params {
		bool A;			//Offset: 0 | ElementSize: 1
		bool B;			//Offset: 1 | ElementSize: 1
		bool ReturnValue;			//Offset: 2 | ElementSize: 1
	};
	UKismetMathLibrary_EqualEqual_BoolBool_Params params;
	params.A = A;
	params.B = B;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.EqualEqual_ByteByte
// Flags: Final, Native, Static, Public, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: unsigned char	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: B	Type: unsigned char	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: bool	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
bool UKismetMathLibrary::EqualEqual_ByteByte(unsigned char A, unsigned char B) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.EqualEqual_ByteByte");

	struct UKismetMathLibrary_EqualEqual_ByteByte_Params {
		unsigned char A;			//Offset: 0 | ElementSize: 1
		unsigned char B;			//Offset: 1 | ElementSize: 1
		bool ReturnValue;			//Offset: 2 | ElementSize: 1
	};
	UKismetMathLibrary_EqualEqual_ByteByte_Params params;
	params.A = A;
	params.B = B;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.EqualEqual_ClassClass
// Flags: Final, Native, Static, Public, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: class UObject*	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: B	Type: class UObject*	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: bool	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
bool UKismetMathLibrary::EqualEqual_ClassClass(class UObject* A, class UObject* B) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.EqualEqual_ClassClass");

	struct UKismetMathLibrary_EqualEqual_ClassClass_Params {
		class UObject* A;			//Offset: 0 | ElementSize: 8
		class UObject* B;			//Offset: 8 | ElementSize: 8
		bool ReturnValue;			//Offset: 16 | ElementSize: 1
	};
	UKismetMathLibrary_EqualEqual_ClassClass_Params params;
	params.A = A;
	params.B = B;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.EqualEqual_DateTimeDateTime
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: struct FDateTime	Flags: Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: B	Type: struct FDateTime	Flags: Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: bool	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
bool UKismetMathLibrary::EqualEqual_DateTimeDateTime(struct FDateTime A, struct FDateTime B) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.EqualEqual_DateTimeDateTime");

	struct UKismetMathLibrary_EqualEqual_DateTimeDateTime_Params {
		struct FDateTime A;			//Offset: 0 | ElementSize: 8
		struct FDateTime B;			//Offset: 8 | ElementSize: 8
		bool ReturnValue;			//Offset: 16 | ElementSize: 1
	};
	UKismetMathLibrary_EqualEqual_DateTimeDateTime_Params params;
	params.A = A;
	params.B = B;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.EqualEqual_FloatFloat
// Flags: Final, Native, Static, Public, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: B	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: bool	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
bool UKismetMathLibrary::EqualEqual_FloatFloat(float A, float B) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.EqualEqual_FloatFloat");

	struct UKismetMathLibrary_EqualEqual_FloatFloat_Params {
		float A;			//Offset: 0 | ElementSize: 4
		float B;			//Offset: 4 | ElementSize: 4
		bool ReturnValue;			//Offset: 8 | ElementSize: 1
	};
	UKismetMathLibrary_EqualEqual_FloatFloat_Params params;
	params.A = A;
	params.B = B;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.EqualEqual_Int64Int64
// Flags: Final, Native, Static, Public, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: int64_t	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: B	Type: int64_t	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: bool	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
bool UKismetMathLibrary::EqualEqual_Int64Int64(int64_t A, int64_t B) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.EqualEqual_Int64Int64");

	struct UKismetMathLibrary_EqualEqual_Int64Int64_Params {
		int64_t A;			//Offset: 0 | ElementSize: 8
		int64_t B;			//Offset: 8 | ElementSize: 8
		bool ReturnValue;			//Offset: 16 | ElementSize: 1
	};
	UKismetMathLibrary_EqualEqual_Int64Int64_Params params;
	params.A = A;
	params.B = B;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.EqualEqual_IntInt
// Flags: Final, Native, Static, Public, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: int32_t	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: B	Type: int32_t	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: bool	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
bool UKismetMathLibrary::EqualEqual_IntInt(int32_t A, int32_t B) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.EqualEqual_IntInt");

	struct UKismetMathLibrary_EqualEqual_IntInt_Params {
		int32_t A;			//Offset: 0 | ElementSize: 4
		int32_t B;			//Offset: 4 | ElementSize: 4
		bool ReturnValue;			//Offset: 8 | ElementSize: 1
	};
	UKismetMathLibrary_EqualEqual_IntInt_Params params;
	params.A = A;
	params.B = B;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.EqualEqual_LinearColorLinearColor
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: struct FLinearColor	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: B	Type: struct FLinearColor	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: bool	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
bool UKismetMathLibrary::EqualEqual_LinearColorLinearColor(struct FLinearColor A, struct FLinearColor B) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.EqualEqual_LinearColorLinearColor");

	struct UKismetMathLibrary_EqualEqual_LinearColorLinearColor_Params {
		struct FLinearColor A;			//Offset: 0 | ElementSize: 16
		struct FLinearColor B;			//Offset: 16 | ElementSize: 16
		bool ReturnValue;			//Offset: 32 | ElementSize: 1
	};
	UKismetMathLibrary_EqualEqual_LinearColorLinearColor_Params params;
	params.A = A;
	params.B = B;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.EqualEqual_MatrixMatrix
// Flags: Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: struct FMatrix	Flags: ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
// Name: B	Type: struct FMatrix	Flags: ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
// Name: Tolerance	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: bool	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
bool UKismetMathLibrary::EqualEqual_MatrixMatrix(const struct FMatrix& A, const struct FMatrix& B, float Tolerance) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.EqualEqual_MatrixMatrix");

	struct UKismetMathLibrary_EqualEqual_MatrixMatrix_Params {
		struct FMatrix A;			//Offset: 0 | ElementSize: 64
		struct FMatrix B;			//Offset: 64 | ElementSize: 64
		float Tolerance;			//Offset: 128 | ElementSize: 4
		bool ReturnValue;			//Offset: 132 | ElementSize: 1
	};
	UKismetMathLibrary_EqualEqual_MatrixMatrix_Params params;
	params.A = A;
	params.B = B;
	params.Tolerance = Tolerance;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.EqualEqual_NameName
// Flags: Final, Native, Static, Public, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: struct FName	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: B	Type: struct FName	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: bool	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
bool UKismetMathLibrary::EqualEqual_NameName(struct FName A, struct FName B) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.EqualEqual_NameName");

	struct UKismetMathLibrary_EqualEqual_NameName_Params {
		struct FName A;			//Offset: 0 | ElementSize: 8
		struct FName B;			//Offset: 8 | ElementSize: 8
		bool ReturnValue;			//Offset: 16 | ElementSize: 1
	};
	UKismetMathLibrary_EqualEqual_NameName_Params params;
	params.A = A;
	params.B = B;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.EqualEqual_ObjectObject
// Flags: Final, Native, Static, Public, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: class UObject*	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: B	Type: class UObject*	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: bool	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
bool UKismetMathLibrary::EqualEqual_ObjectObject(class UObject* A, class UObject* B) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.EqualEqual_ObjectObject");

	struct UKismetMathLibrary_EqualEqual_ObjectObject_Params {
		class UObject* A;			//Offset: 0 | ElementSize: 8
		class UObject* B;			//Offset: 8 | ElementSize: 8
		bool ReturnValue;			//Offset: 16 | ElementSize: 1
	};
	UKismetMathLibrary_EqualEqual_ObjectObject_Params params;
	params.A = A;
	params.B = B;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.EqualEqual_QuatQuat
// Flags: Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: struct FQuat	Flags: ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
// Name: B	Type: struct FQuat	Flags: ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
// Name: Tolerance	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: bool	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
bool UKismetMathLibrary::EqualEqual_QuatQuat(const struct FQuat& A, const struct FQuat& B, float Tolerance) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.EqualEqual_QuatQuat");

	struct UKismetMathLibrary_EqualEqual_QuatQuat_Params {
		struct FQuat A;			//Offset: 0 | ElementSize: 16
		struct FQuat B;			//Offset: 16 | ElementSize: 16
		float Tolerance;			//Offset: 32 | ElementSize: 4
		bool ReturnValue;			//Offset: 36 | ElementSize: 1
	};
	UKismetMathLibrary_EqualEqual_QuatQuat_Params params;
	params.A = A;
	params.B = B;
	params.Tolerance = Tolerance;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.EqualEqual_RotatorRotator
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: struct FRotator	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
// Name: B	Type: struct FRotator	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
// Name: ErrorTolerance	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: bool	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
bool UKismetMathLibrary::EqualEqual_RotatorRotator(struct FRotator A, struct FRotator B, float ErrorTolerance) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.EqualEqual_RotatorRotator");

	struct UKismetMathLibrary_EqualEqual_RotatorRotator_Params {
		struct FRotator A;			//Offset: 0 | ElementSize: 12
		struct FRotator B;			//Offset: 12 | ElementSize: 12
		float ErrorTolerance;			//Offset: 24 | ElementSize: 4
		bool ReturnValue;			//Offset: 28 | ElementSize: 1
	};
	UKismetMathLibrary_EqualEqual_RotatorRotator_Params params;
	params.A = A;
	params.B = B;
	params.ErrorTolerance = ErrorTolerance;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.EqualEqual_TimespanTimespan
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: struct FTimespan	Flags: Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: B	Type: struct FTimespan	Flags: Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: bool	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
bool UKismetMathLibrary::EqualEqual_TimespanTimespan(struct FTimespan A, struct FTimespan B) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.EqualEqual_TimespanTimespan");

	struct UKismetMathLibrary_EqualEqual_TimespanTimespan_Params {
		struct FTimespan A;			//Offset: 0 | ElementSize: 8
		struct FTimespan B;			//Offset: 8 | ElementSize: 8
		bool ReturnValue;			//Offset: 16 | ElementSize: 1
	};
	UKismetMathLibrary_EqualEqual_TimespanTimespan_Params params;
	params.A = A;
	params.B = B;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.EqualEqual_TransformTransform
// Flags: Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: struct FTransform	Flags: ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
// Name: B	Type: struct FTransform	Flags: ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: bool	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
bool UKismetMathLibrary::EqualEqual_TransformTransform(const struct FTransform& A, const struct FTransform& B) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.EqualEqual_TransformTransform");

	struct UKismetMathLibrary_EqualEqual_TransformTransform_Params {
		struct FTransform A;			//Offset: 0 | ElementSize: 48
		struct FTransform B;			//Offset: 48 | ElementSize: 48
		bool ReturnValue;			//Offset: 96 | ElementSize: 1
	};
	UKismetMathLibrary_EqualEqual_TransformTransform_Params params;
	params.A = A;
	params.B = B;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.EqualEqual_Vector2DVector2D
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: struct FVector2D	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: B	Type: struct FVector2D	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ErrorTolerance	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: bool	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
bool UKismetMathLibrary::EqualEqual_Vector2DVector2D(struct FVector2D A, struct FVector2D B, float ErrorTolerance) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.EqualEqual_Vector2DVector2D");

	struct UKismetMathLibrary_EqualEqual_Vector2DVector2D_Params {
		struct FVector2D A;			//Offset: 0 | ElementSize: 8
		struct FVector2D B;			//Offset: 8 | ElementSize: 8
		float ErrorTolerance;			//Offset: 16 | ElementSize: 4
		bool ReturnValue;			//Offset: 20 | ElementSize: 1
	};
	UKismetMathLibrary_EqualEqual_Vector2DVector2D_Params params;
	params.A = A;
	params.B = B;
	params.ErrorTolerance = ErrorTolerance;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.EqualEqual_Vector4Vector4
// Flags: Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: struct FVector4	Flags: ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: B	Type: struct FVector4	Flags: ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ErrorTolerance	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: bool	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
bool UKismetMathLibrary::EqualEqual_Vector4Vector4(const struct FVector4& A, const struct FVector4& B, float ErrorTolerance) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.EqualEqual_Vector4Vector4");

	struct UKismetMathLibrary_EqualEqual_Vector4Vector4_Params {
		struct FVector4 A;			//Offset: 0 | ElementSize: 16
		struct FVector4 B;			//Offset: 16 | ElementSize: 16
		float ErrorTolerance;			//Offset: 32 | ElementSize: 4
		bool ReturnValue;			//Offset: 36 | ElementSize: 1
	};
	UKismetMathLibrary_EqualEqual_Vector4Vector4_Params params;
	params.A = A;
	params.B = B;
	params.ErrorTolerance = ErrorTolerance;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.EqualEqual_VectorVector
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: struct FVector	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: B	Type: struct FVector	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ErrorTolerance	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: bool	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
bool UKismetMathLibrary::EqualEqual_VectorVector(struct FVector A, struct FVector B, float ErrorTolerance) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.EqualEqual_VectorVector");

	struct UKismetMathLibrary_EqualEqual_VectorVector_Params {
		struct FVector A;			//Offset: 0 | ElementSize: 12
		struct FVector B;			//Offset: 12 | ElementSize: 12
		float ErrorTolerance;			//Offset: 24 | ElementSize: 4
		bool ReturnValue;			//Offset: 28 | ElementSize: 1
	};
	UKismetMathLibrary_EqualEqual_VectorVector_Params params;
	params.A = A;
	params.B = B;
	params.ErrorTolerance = ErrorTolerance;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.EqualExactly_Vector2DVector2D
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: struct FVector2D	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: B	Type: struct FVector2D	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: bool	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
bool UKismetMathLibrary::EqualExactly_Vector2DVector2D(struct FVector2D A, struct FVector2D B) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.EqualExactly_Vector2DVector2D");

	struct UKismetMathLibrary_EqualExactly_Vector2DVector2D_Params {
		struct FVector2D A;			//Offset: 0 | ElementSize: 8
		struct FVector2D B;			//Offset: 8 | ElementSize: 8
		bool ReturnValue;			//Offset: 16 | ElementSize: 1
	};
	UKismetMathLibrary_EqualExactly_Vector2DVector2D_Params params;
	params.A = A;
	params.B = B;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.EqualExactly_Vector4Vector4
// Flags: Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: struct FVector4	Flags: ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: B	Type: struct FVector4	Flags: ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: bool	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
bool UKismetMathLibrary::EqualExactly_Vector4Vector4(const struct FVector4& A, const struct FVector4& B) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.EqualExactly_Vector4Vector4");

	struct UKismetMathLibrary_EqualExactly_Vector4Vector4_Params {
		struct FVector4 A;			//Offset: 0 | ElementSize: 16
		struct FVector4 B;			//Offset: 16 | ElementSize: 16
		bool ReturnValue;			//Offset: 32 | ElementSize: 1
	};
	UKismetMathLibrary_EqualExactly_Vector4Vector4_Params params;
	params.A = A;
	params.B = B;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.EqualExactly_VectorVector
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: struct FVector	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: B	Type: struct FVector	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: bool	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
bool UKismetMathLibrary::EqualExactly_VectorVector(struct FVector A, struct FVector B) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.EqualExactly_VectorVector");

	struct UKismetMathLibrary_EqualExactly_VectorVector_Params {
		struct FVector A;			//Offset: 0 | ElementSize: 12
		struct FVector B;			//Offset: 12 | ElementSize: 12
		bool ReturnValue;			//Offset: 24 | ElementSize: 1
	};
	UKismetMathLibrary_EqualExactly_VectorVector_Params params;
	params.A = A;
	params.B = B;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Exp
// Flags: Final, Native, Static, Public, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: float	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
float UKismetMathLibrary::Exp(float A) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Exp");

	struct UKismetMathLibrary_Exp_Params {
		float A;			//Offset: 0 | ElementSize: 4
		float ReturnValue;			//Offset: 4 | ElementSize: 4
	};
	UKismetMathLibrary_Exp_Params params;
	params.A = A;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.FCeil
// Flags: Final, Native, Static, Public, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: int32_t	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
int32_t UKismetMathLibrary::FCeil(float A) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.FCeil");

	struct UKismetMathLibrary_FCeil_Params {
		float A;			//Offset: 0 | ElementSize: 4
		int32_t ReturnValue;			//Offset: 4 | ElementSize: 4
	};
	UKismetMathLibrary_FCeil_Params params;
	params.A = A;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.FCeil64
// Flags: Final, Native, Static, Public, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: int64_t	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
int64_t UKismetMathLibrary::FCeil64(float A) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.FCeil64");

	struct UKismetMathLibrary_FCeil64_Params {
		float A;			//Offset: 0 | ElementSize: 4
		int64_t ReturnValue;			//Offset: 8 | ElementSize: 8
	};
	UKismetMathLibrary_FCeil64_Params params;
	params.A = A;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.FClamp
// Flags: Final, Native, Static, Public, BlueprintCallable, BlueprintPure
// Params:
// Name: Value	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: Min	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: Max	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: float	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
float UKismetMathLibrary::FClamp(float Value, float Min, float Max) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.FClamp");

	struct UKismetMathLibrary_FClamp_Params {
		float Value;			//Offset: 0 | ElementSize: 4
		float Min;			//Offset: 4 | ElementSize: 4
		float Max;			//Offset: 8 | ElementSize: 4
		float ReturnValue;			//Offset: 12 | ElementSize: 4
	};
	UKismetMathLibrary_FClamp_Params params;
	params.Value = Value;
	params.Min = Min;
	params.Max = Max;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.FFloor
// Flags: Final, Native, Static, Public, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: int32_t	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
int32_t UKismetMathLibrary::FFloor(float A) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.FFloor");

	struct UKismetMathLibrary_FFloor_Params {
		float A;			//Offset: 0 | ElementSize: 4
		int32_t ReturnValue;			//Offset: 4 | ElementSize: 4
	};
	UKismetMathLibrary_FFloor_Params params;
	params.A = A;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.FFloor64
// Flags: Final, Native, Static, Public, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: int64_t	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
int64_t UKismetMathLibrary::FFloor64(float A) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.FFloor64");

	struct UKismetMathLibrary_FFloor64_Params {
		float A;			//Offset: 0 | ElementSize: 4
		int64_t ReturnValue;			//Offset: 8 | ElementSize: 8
	};
	UKismetMathLibrary_FFloor64_Params params;
	params.A = A;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.FindClosestPointOnLine
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: Point	Type: struct FVector	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: LineOrigin	Type: struct FVector	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: LineDirection	Type: struct FVector	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FVector	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FVector UKismetMathLibrary::FindClosestPointOnLine(struct FVector Point, struct FVector LineOrigin, struct FVector LineDirection) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.FindClosestPointOnLine");

	struct UKismetMathLibrary_FindClosestPointOnLine_Params {
		struct FVector Point;			//Offset: 0 | ElementSize: 12
		struct FVector LineOrigin;			//Offset: 12 | ElementSize: 12
		struct FVector LineDirection;			//Offset: 24 | ElementSize: 12
		struct FVector ReturnValue;			//Offset: 36 | ElementSize: 12
	};
	UKismetMathLibrary_FindClosestPointOnLine_Params params;
	params.Point = Point;
	params.LineOrigin = LineOrigin;
	params.LineDirection = LineDirection;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.FindClosestPointOnSegment
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: Point	Type: struct FVector	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: SegmentStart	Type: struct FVector	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: SegmentEnd	Type: struct FVector	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FVector	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FVector UKismetMathLibrary::FindClosestPointOnSegment(struct FVector Point, struct FVector SegmentStart, struct FVector SegmentEnd) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.FindClosestPointOnSegment");

	struct UKismetMathLibrary_FindClosestPointOnSegment_Params {
		struct FVector Point;			//Offset: 0 | ElementSize: 12
		struct FVector SegmentStart;			//Offset: 12 | ElementSize: 12
		struct FVector SegmentEnd;			//Offset: 24 | ElementSize: 12
		struct FVector ReturnValue;			//Offset: 36 | ElementSize: 12
	};
	UKismetMathLibrary_FindClosestPointOnSegment_Params params;
	params.Point = Point;
	params.SegmentStart = SegmentStart;
	params.SegmentEnd = SegmentEnd;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.FindLookAtRotation
// Flags: Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: Start	Type: struct FVector	Flags: ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: Target	Type: struct FVector	Flags: ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FRotator	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FRotator UKismetMathLibrary::FindLookAtRotation(const struct FVector& Start, const struct FVector& Target) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.FindLookAtRotation");

	struct UKismetMathLibrary_FindLookAtRotation_Params {
		struct FVector Start;			//Offset: 0 | ElementSize: 12
		struct FVector Target;			//Offset: 12 | ElementSize: 12
		struct FRotator ReturnValue;			//Offset: 24 | ElementSize: 12
	};
	UKismetMathLibrary_FindLookAtRotation_Params params;
	params.Start = Start;
	params.Target = Target;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.FindNearestPointsOnLineSegments
// Flags: Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: Segment1Start	Type: struct FVector	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: Segment1End	Type: struct FVector	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: Segment2Start	Type: struct FVector	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: Segment2End	Type: struct FVector	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: Segment1Point	Type: struct FVector	Flags: Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: Segment2Point	Type: struct FVector	Flags: Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
void UKismetMathLibrary::FindNearestPointsOnLineSegments(struct FVector Segment1Start, struct FVector Segment1End, struct FVector Segment2Start, struct FVector Segment2End, struct FVector* Segment1Point, struct FVector* Segment2Point) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.FindNearestPointsOnLineSegments");

	struct UKismetMathLibrary_FindNearestPointsOnLineSegments_Params {
		struct FVector Segment1Start;			//Offset: 0 | ElementSize: 12
		struct FVector Segment1End;			//Offset: 12 | ElementSize: 12
		struct FVector Segment2Start;			//Offset: 24 | ElementSize: 12
		struct FVector Segment2End;			//Offset: 36 | ElementSize: 12
		struct FVector Segment1Point;			//Offset: 48 | ElementSize: 12
		struct FVector Segment2Point;			//Offset: 60 | ElementSize: 12
	};
	UKismetMathLibrary_FindNearestPointsOnLineSegments_Params params;
	params.Segment1Start = Segment1Start;
	params.Segment1End = Segment1End;
	params.Segment2Start = Segment2Start;
	params.Segment2End = Segment2End;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	if (Segment1Point != nullptr)
		*Segment1Point = params.Segment1Point;
	if (Segment2Point != nullptr)
		*Segment2Point = params.Segment2Point;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.FInterpEaseInOut
// Flags: Final, Native, Static, Public, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: B	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: Alpha	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: Exponent	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: float	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
float UKismetMathLibrary::FInterpEaseInOut(float A, float B, float Alpha, float Exponent) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.FInterpEaseInOut");

	struct UKismetMathLibrary_FInterpEaseInOut_Params {
		float A;			//Offset: 0 | ElementSize: 4
		float B;			//Offset: 4 | ElementSize: 4
		float Alpha;			//Offset: 8 | ElementSize: 4
		float Exponent;			//Offset: 12 | ElementSize: 4
		float ReturnValue;			//Offset: 16 | ElementSize: 4
	};
	UKismetMathLibrary_FInterpEaseInOut_Params params;
	params.A = A;
	params.B = B;
	params.Alpha = Alpha;
	params.Exponent = Exponent;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.FInterpTo
// Flags: Final, Native, Static, Public, BlueprintCallable, BlueprintPure
// Params:
// Name: Current	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: Target	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: DeltaTime	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: interpSpeed	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: float	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
float UKismetMathLibrary::FInterpTo(float Current, float Target, float DeltaTime, float interpSpeed) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.FInterpTo");

	struct UKismetMathLibrary_FInterpTo_Params {
		float Current;			//Offset: 0 | ElementSize: 4
		float Target;			//Offset: 4 | ElementSize: 4
		float DeltaTime;			//Offset: 8 | ElementSize: 4
		float interpSpeed;			//Offset: 12 | ElementSize: 4
		float ReturnValue;			//Offset: 16 | ElementSize: 4
	};
	UKismetMathLibrary_FInterpTo_Params params;
	params.Current = Current;
	params.Target = Target;
	params.DeltaTime = DeltaTime;
	params.interpSpeed = interpSpeed;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.FInterpTo_Constant
// Flags: Final, Native, Static, Public, BlueprintCallable, BlueprintPure
// Params:
// Name: Current	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: Target	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: DeltaTime	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: interpSpeed	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: float	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
float UKismetMathLibrary::FInterpTo_Constant(float Current, float Target, float DeltaTime, float interpSpeed) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.FInterpTo_Constant");

	struct UKismetMathLibrary_FInterpTo_Constant_Params {
		float Current;			//Offset: 0 | ElementSize: 4
		float Target;			//Offset: 4 | ElementSize: 4
		float DeltaTime;			//Offset: 8 | ElementSize: 4
		float interpSpeed;			//Offset: 12 | ElementSize: 4
		float ReturnValue;			//Offset: 16 | ElementSize: 4
	};
	UKismetMathLibrary_FInterpTo_Constant_Params params;
	params.Current = Current;
	params.Target = Target;
	params.DeltaTime = DeltaTime;
	params.interpSpeed = interpSpeed;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.FixedTurn
// Flags: Final, Native, Static, Public, BlueprintCallable, BlueprintPure
// Params:
// Name: InCurrent	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: InDesired	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: InDeltaRate	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: float	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
float UKismetMathLibrary::FixedTurn(float InCurrent, float InDesired, float InDeltaRate) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.FixedTurn");

	struct UKismetMathLibrary_FixedTurn_Params {
		float InCurrent;			//Offset: 0 | ElementSize: 4
		float InDesired;			//Offset: 4 | ElementSize: 4
		float InDeltaRate;			//Offset: 8 | ElementSize: 4
		float ReturnValue;			//Offset: 12 | ElementSize: 4
	};
	UKismetMathLibrary_FixedTurn_Params params;
	params.InCurrent = InCurrent;
	params.InDesired = InDesired;
	params.InDeltaRate = InDeltaRate;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.FloatSpringInterp
// Flags: Final, Native, Static, Public, HasOutParms, BlueprintCallable
// Params:
// Name: Current	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: Target	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: SpringState	Type: struct FFloatSpringState	Flags: Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic
// Name: Stiffness	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: CriticalDampingFactor	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: DeltaTime	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: Mass	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: float	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
float UKismetMathLibrary::FloatSpringInterp(float Current, float Target, struct FFloatSpringState* SpringState, float Stiffness, float CriticalDampingFactor, float DeltaTime, float Mass) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.FloatSpringInterp");

	struct UKismetMathLibrary_FloatSpringInterp_Params {
		float Current;			//Offset: 0 | ElementSize: 4
		float Target;			//Offset: 4 | ElementSize: 4
		struct FFloatSpringState SpringState;			//Offset: 8 | ElementSize: 8
		float Stiffness;			//Offset: 16 | ElementSize: 4
		float CriticalDampingFactor;			//Offset: 20 | ElementSize: 4
		float DeltaTime;			//Offset: 24 | ElementSize: 4
		float Mass;			//Offset: 28 | ElementSize: 4
		float ReturnValue;			//Offset: 32 | ElementSize: 4
	};
	UKismetMathLibrary_FloatSpringInterp_Params params;
	params.Current = Current;
	params.Target = Target;
	params.Stiffness = Stiffness;
	params.CriticalDampingFactor = CriticalDampingFactor;
	params.DeltaTime = DeltaTime;
	params.Mass = Mass;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	if (SpringState != nullptr)
		*SpringState = params.SpringState;
	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.FMax
// Flags: Final, Native, Static, Public, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: B	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: float	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
float UKismetMathLibrary::FMax(float A, float B) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.FMax");

	struct UKismetMathLibrary_FMax_Params {
		float A;			//Offset: 0 | ElementSize: 4
		float B;			//Offset: 4 | ElementSize: 4
		float ReturnValue;			//Offset: 8 | ElementSize: 4
	};
	UKismetMathLibrary_FMax_Params params;
	params.A = A;
	params.B = B;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.FMin
// Flags: Final, Native, Static, Public, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: B	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: float	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
float UKismetMathLibrary::FMin(float A, float B) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.FMin");

	struct UKismetMathLibrary_FMin_Params {
		float A;			//Offset: 0 | ElementSize: 4
		float B;			//Offset: 4 | ElementSize: 4
		float ReturnValue;			//Offset: 8 | ElementSize: 4
	};
	UKismetMathLibrary_FMin_Params params;
	params.A = A;
	params.B = B;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.FMod
// Flags: Final, Native, Static, Public, HasOutParms, BlueprintCallable, BlueprintPure
// Params:
// Name: Dividend	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: Divisor	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: Remainder	Type: float	Flags: Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: int32_t	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
int32_t UKismetMathLibrary::FMod(float Dividend, float Divisor, float* Remainder) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.FMod");

	struct UKismetMathLibrary_FMod_Params {
		float Dividend;			//Offset: 0 | ElementSize: 4
		float Divisor;			//Offset: 4 | ElementSize: 4
		float Remainder;			//Offset: 8 | ElementSize: 4
		int32_t ReturnValue;			//Offset: 12 | ElementSize: 4
	};
	UKismetMathLibrary_FMod_Params params;
	params.Dividend = Dividend;
	params.Divisor = Divisor;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	if (Remainder != nullptr)
		*Remainder = params.Remainder;
	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Fraction
// Flags: Final, Native, Static, Public, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: float	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
float UKismetMathLibrary::Fraction(float A) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Fraction");

	struct UKismetMathLibrary_Fraction_Params {
		float A;			//Offset: 0 | ElementSize: 4
		float ReturnValue;			//Offset: 4 | ElementSize: 4
	};
	UKismetMathLibrary_Fraction_Params params;
	params.A = A;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.FromDays
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: Days	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FTimespan	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FTimespan UKismetMathLibrary::FromDays(float Days) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.FromDays");

	struct UKismetMathLibrary_FromDays_Params {
		float Days;			//Offset: 0 | ElementSize: 4
		struct FTimespan ReturnValue;			//Offset: 8 | ElementSize: 8
	};
	UKismetMathLibrary_FromDays_Params params;
	params.Days = Days;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.FromHours
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: Hours	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FTimespan	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FTimespan UKismetMathLibrary::FromHours(float Hours) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.FromHours");

	struct UKismetMathLibrary_FromHours_Params {
		float Hours;			//Offset: 0 | ElementSize: 4
		struct FTimespan ReturnValue;			//Offset: 8 | ElementSize: 8
	};
	UKismetMathLibrary_FromHours_Params params;
	params.Hours = Hours;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.FromMilliseconds
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: Milliseconds	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FTimespan	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FTimespan UKismetMathLibrary::FromMilliseconds(float Milliseconds) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.FromMilliseconds");

	struct UKismetMathLibrary_FromMilliseconds_Params {
		float Milliseconds;			//Offset: 0 | ElementSize: 4
		struct FTimespan ReturnValue;			//Offset: 8 | ElementSize: 8
	};
	UKismetMathLibrary_FromMilliseconds_Params params;
	params.Milliseconds = Milliseconds;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.FromMinutes
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: Minutes	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FTimespan	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FTimespan UKismetMathLibrary::FromMinutes(float Minutes) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.FromMinutes");

	struct UKismetMathLibrary_FromMinutes_Params {
		float Minutes;			//Offset: 0 | ElementSize: 4
		struct FTimespan ReturnValue;			//Offset: 8 | ElementSize: 8
	};
	UKismetMathLibrary_FromMinutes_Params params;
	params.Minutes = Minutes;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.FromSeconds
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: Seconds	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FTimespan	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FTimespan UKismetMathLibrary::FromSeconds(float Seconds) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.FromSeconds");

	struct UKismetMathLibrary_FromSeconds_Params {
		float Seconds;			//Offset: 0 | ElementSize: 4
		struct FTimespan ReturnValue;			//Offset: 8 | ElementSize: 8
	};
	UKismetMathLibrary_FromSeconds_Params params;
	params.Seconds = Seconds;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.FTrunc
// Flags: Final, Native, Static, Public, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: int32_t	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
int32_t UKismetMathLibrary::FTrunc(float A) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.FTrunc");

	struct UKismetMathLibrary_FTrunc_Params {
		float A;			//Offset: 0 | ElementSize: 4
		int32_t ReturnValue;			//Offset: 4 | ElementSize: 4
	};
	UKismetMathLibrary_FTrunc_Params params;
	params.A = A;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.FTrunc64
// Flags: Final, Native, Static, Public, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: int64_t	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
int64_t UKismetMathLibrary::FTrunc64(float A) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.FTrunc64");

	struct UKismetMathLibrary_FTrunc64_Params {
		float A;			//Offset: 0 | ElementSize: 4
		int64_t ReturnValue;			//Offset: 8 | ElementSize: 8
	};
	UKismetMathLibrary_FTrunc64_Params params;
	params.A = A;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.FTruncVector
// Flags: Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: InVector	Type: struct FVector	Flags: ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FIntVector	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FIntVector UKismetMathLibrary::FTruncVector(const struct FVector& InVector) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.FTruncVector");

	struct UKismetMathLibrary_FTruncVector_Params {
		struct FVector InVector;			//Offset: 0 | ElementSize: 12
		struct FIntVector ReturnValue;			//Offset: 12 | ElementSize: 12
	};
	UKismetMathLibrary_FTruncVector_Params params;
	params.InVector = InVector;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.FWrap
// Flags: Final, Native, Static, Public, BlueprintCallable, BlueprintPure
// Params:
// Name: Value	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: Min	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: Max	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: float	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
float UKismetMathLibrary::FWrap(float Value, float Min, float Max) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.FWrap");

	struct UKismetMathLibrary_FWrap_Params {
		float Value;			//Offset: 0 | ElementSize: 4
		float Min;			//Offset: 4 | ElementSize: 4
		float Max;			//Offset: 8 | ElementSize: 4
		float ReturnValue;			//Offset: 12 | ElementSize: 4
	};
	UKismetMathLibrary_FWrap_Params params;
	params.Value = Value;
	params.Min = Min;
	params.Max = Max;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.GetAbs2D
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: struct FVector2D	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FVector2D	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FVector2D UKismetMathLibrary::GetAbs2D(struct FVector2D A) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.GetAbs2D");

	struct UKismetMathLibrary_GetAbs2D_Params {
		struct FVector2D A;			//Offset: 0 | ElementSize: 8
		struct FVector2D ReturnValue;			//Offset: 8 | ElementSize: 8
	};
	UKismetMathLibrary_GetAbs2D_Params params;
	params.A = A;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.GetAbsMax2D
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: struct FVector2D	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: float	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
float UKismetMathLibrary::GetAbsMax2D(struct FVector2D A) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.GetAbsMax2D");

	struct UKismetMathLibrary_GetAbsMax2D_Params {
		struct FVector2D A;			//Offset: 0 | ElementSize: 8
		float ReturnValue;			//Offset: 8 | ElementSize: 4
	};
	UKismetMathLibrary_GetAbsMax2D_Params params;
	params.A = A;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.GetAxes
// Flags: Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: struct FRotator	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
// Name: X	Type: struct FVector	Flags: Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: Y	Type: struct FVector	Flags: Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: Z	Type: struct FVector	Flags: Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
void UKismetMathLibrary::GetAxes(struct FRotator A, struct FVector* X, struct FVector* Y, struct FVector* Z) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.GetAxes");

	struct UKismetMathLibrary_GetAxes_Params {
		struct FRotator A;			//Offset: 0 | ElementSize: 12
		struct FVector X;			//Offset: 12 | ElementSize: 12
		struct FVector Y;			//Offset: 24 | ElementSize: 12
		struct FVector Z;			//Offset: 36 | ElementSize: 12
	};
	UKismetMathLibrary_GetAxes_Params params;
	params.A = A;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	if (X != nullptr)
		*X = params.X;
	if (Y != nullptr)
		*Y = params.Y;
	if (Z != nullptr)
		*Z = params.Z;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.GetAzimuthAndElevation
// Flags: Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: InDirection	Type: struct FVector	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReferenceFrame	Type: struct FTransform	Flags: ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
// Name: Azimuth	Type: float	Flags: Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: Elevation	Type: float	Flags: Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
void UKismetMathLibrary::GetAzimuthAndElevation(struct FVector InDirection, const struct FTransform& ReferenceFrame, float* Azimuth, float* Elevation) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.GetAzimuthAndElevation");

	struct UKismetMathLibrary_GetAzimuthAndElevation_Params {
		struct FVector InDirection;			//Offset: 0 | ElementSize: 12
		struct FTransform ReferenceFrame;			//Offset: 16 | ElementSize: 48
		float Azimuth;			//Offset: 64 | ElementSize: 4
		float Elevation;			//Offset: 68 | ElementSize: 4
	};
	UKismetMathLibrary_GetAzimuthAndElevation_Params params;
	params.InDirection = InDirection;
	params.ReferenceFrame = ReferenceFrame;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	if (Azimuth != nullptr)
		*Azimuth = params.Azimuth;
	if (Elevation != nullptr)
		*Elevation = params.Elevation;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.GetDate
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: struct FDateTime	Flags: Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FDateTime	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FDateTime UKismetMathLibrary::GetDate(struct FDateTime A) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.GetDate");

	struct UKismetMathLibrary_GetDate_Params {
		struct FDateTime A;			//Offset: 0 | ElementSize: 8
		struct FDateTime ReturnValue;			//Offset: 8 | ElementSize: 8
	};
	UKismetMathLibrary_GetDate_Params params;
	params.A = A;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.GetDay
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: struct FDateTime	Flags: Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: int32_t	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
int32_t UKismetMathLibrary::GetDay(struct FDateTime A) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.GetDay");

	struct UKismetMathLibrary_GetDay_Params {
		struct FDateTime A;			//Offset: 0 | ElementSize: 8
		int32_t ReturnValue;			//Offset: 8 | ElementSize: 4
	};
	UKismetMathLibrary_GetDay_Params params;
	params.A = A;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.GetDayOfYear
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: struct FDateTime	Flags: Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: int32_t	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
int32_t UKismetMathLibrary::GetDayOfYear(struct FDateTime A) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.GetDayOfYear");

	struct UKismetMathLibrary_GetDayOfYear_Params {
		struct FDateTime A;			//Offset: 0 | ElementSize: 8
		int32_t ReturnValue;			//Offset: 8 | ElementSize: 4
	};
	UKismetMathLibrary_GetDayOfYear_Params params;
	params.A = A;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.GetDays
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: struct FTimespan	Flags: Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: int32_t	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
int32_t UKismetMathLibrary::GetDays(struct FTimespan A) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.GetDays");

	struct UKismetMathLibrary_GetDays_Params {
		struct FTimespan A;			//Offset: 0 | ElementSize: 8
		int32_t ReturnValue;			//Offset: 8 | ElementSize: 4
	};
	UKismetMathLibrary_GetDays_Params params;
	params.A = A;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.GetDirectionUnitVector
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: from	Type: struct FVector	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: to	Type: struct FVector	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FVector	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FVector UKismetMathLibrary::GetDirectionUnitVector(struct FVector from, struct FVector to) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.GetDirectionUnitVector");

	struct UKismetMathLibrary_GetDirectionUnitVector_Params {
		struct FVector from;			//Offset: 0 | ElementSize: 12
		struct FVector to;			//Offset: 12 | ElementSize: 12
		struct FVector ReturnValue;			//Offset: 24 | ElementSize: 12
	};
	UKismetMathLibrary_GetDirectionUnitVector_Params params;
	params.from = from;
	params.to = to;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.GetDuration
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: struct FTimespan	Flags: Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FTimespan	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FTimespan UKismetMathLibrary::GetDuration(struct FTimespan A) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.GetDuration");

	struct UKismetMathLibrary_GetDuration_Params {
		struct FTimespan A;			//Offset: 0 | ElementSize: 8
		struct FTimespan ReturnValue;			//Offset: 8 | ElementSize: 8
	};
	UKismetMathLibrary_GetDuration_Params params;
	params.A = A;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.GetForwardVector
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: InRot	Type: struct FRotator	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FVector	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FVector UKismetMathLibrary::GetForwardVector(struct FRotator InRot) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.GetForwardVector");

	struct UKismetMathLibrary_GetForwardVector_Params {
		struct FRotator InRot;			//Offset: 0 | ElementSize: 12
		struct FVector ReturnValue;			//Offset: 12 | ElementSize: 12
	};
	UKismetMathLibrary_GetForwardVector_Params params;
	params.InRot = InRot;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.GetHour
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: struct FDateTime	Flags: Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: int32_t	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
int32_t UKismetMathLibrary::GetHour(struct FDateTime A) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.GetHour");

	struct UKismetMathLibrary_GetHour_Params {
		struct FDateTime A;			//Offset: 0 | ElementSize: 8
		int32_t ReturnValue;			//Offset: 8 | ElementSize: 4
	};
	UKismetMathLibrary_GetHour_Params params;
	params.A = A;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.GetHour12
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: struct FDateTime	Flags: Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: int32_t	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
int32_t UKismetMathLibrary::GetHour12(struct FDateTime A) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.GetHour12");

	struct UKismetMathLibrary_GetHour12_Params {
		struct FDateTime A;			//Offset: 0 | ElementSize: 8
		int32_t ReturnValue;			//Offset: 8 | ElementSize: 4
	};
	UKismetMathLibrary_GetHour12_Params params;
	params.A = A;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.GetHours
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: struct FTimespan	Flags: Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: int32_t	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
int32_t UKismetMathLibrary::GetHours(struct FTimespan A) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.GetHours");

	struct UKismetMathLibrary_GetHours_Params {
		struct FTimespan A;			//Offset: 0 | ElementSize: 8
		int32_t ReturnValue;			//Offset: 8 | ElementSize: 4
	};
	UKismetMathLibrary_GetHours_Params params;
	params.A = A;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.GetMax2D
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: struct FVector2D	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: float	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
float UKismetMathLibrary::GetMax2D(struct FVector2D A) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.GetMax2D");

	struct UKismetMathLibrary_GetMax2D_Params {
		struct FVector2D A;			//Offset: 0 | ElementSize: 8
		float ReturnValue;			//Offset: 8 | ElementSize: 4
	};
	UKismetMathLibrary_GetMax2D_Params params;
	params.A = A;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.GetMaxElement
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: struct FVector	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: float	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
float UKismetMathLibrary::GetMaxElement(struct FVector A) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.GetMaxElement");

	struct UKismetMathLibrary_GetMaxElement_Params {
		struct FVector A;			//Offset: 0 | ElementSize: 12
		float ReturnValue;			//Offset: 12 | ElementSize: 4
	};
	UKismetMathLibrary_GetMaxElement_Params params;
	params.A = A;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.GetMillisecond
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: struct FDateTime	Flags: Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: int32_t	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
int32_t UKismetMathLibrary::GetMillisecond(struct FDateTime A) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.GetMillisecond");

	struct UKismetMathLibrary_GetMillisecond_Params {
		struct FDateTime A;			//Offset: 0 | ElementSize: 8
		int32_t ReturnValue;			//Offset: 8 | ElementSize: 4
	};
	UKismetMathLibrary_GetMillisecond_Params params;
	params.A = A;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.GetMilliseconds
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: struct FTimespan	Flags: Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: int32_t	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
int32_t UKismetMathLibrary::GetMilliseconds(struct FTimespan A) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.GetMilliseconds");

	struct UKismetMathLibrary_GetMilliseconds_Params {
		struct FTimespan A;			//Offset: 0 | ElementSize: 8
		int32_t ReturnValue;			//Offset: 8 | ElementSize: 4
	};
	UKismetMathLibrary_GetMilliseconds_Params params;
	params.A = A;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.GetMin2D
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: struct FVector2D	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: float	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
float UKismetMathLibrary::GetMin2D(struct FVector2D A) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.GetMin2D");

	struct UKismetMathLibrary_GetMin2D_Params {
		struct FVector2D A;			//Offset: 0 | ElementSize: 8
		float ReturnValue;			//Offset: 8 | ElementSize: 4
	};
	UKismetMathLibrary_GetMin2D_Params params;
	params.A = A;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.GetMinElement
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: struct FVector	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: float	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
float UKismetMathLibrary::GetMinElement(struct FVector A) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.GetMinElement");

	struct UKismetMathLibrary_GetMinElement_Params {
		struct FVector A;			//Offset: 0 | ElementSize: 12
		float ReturnValue;			//Offset: 12 | ElementSize: 4
	};
	UKismetMathLibrary_GetMinElement_Params params;
	params.A = A;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.GetMinute
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: struct FDateTime	Flags: Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: int32_t	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
int32_t UKismetMathLibrary::GetMinute(struct FDateTime A) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.GetMinute");

	struct UKismetMathLibrary_GetMinute_Params {
		struct FDateTime A;			//Offset: 0 | ElementSize: 8
		int32_t ReturnValue;			//Offset: 8 | ElementSize: 4
	};
	UKismetMathLibrary_GetMinute_Params params;
	params.A = A;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.GetMinutes
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: struct FTimespan	Flags: Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: int32_t	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
int32_t UKismetMathLibrary::GetMinutes(struct FTimespan A) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.GetMinutes");

	struct UKismetMathLibrary_GetMinutes_Params {
		struct FTimespan A;			//Offset: 0 | ElementSize: 8
		int32_t ReturnValue;			//Offset: 8 | ElementSize: 4
	};
	UKismetMathLibrary_GetMinutes_Params params;
	params.A = A;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.GetMonth
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: struct FDateTime	Flags: Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: int32_t	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
int32_t UKismetMathLibrary::GetMonth(struct FDateTime A) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.GetMonth");

	struct UKismetMathLibrary_GetMonth_Params {
		struct FDateTime A;			//Offset: 0 | ElementSize: 8
		int32_t ReturnValue;			//Offset: 8 | ElementSize: 4
	};
	UKismetMathLibrary_GetMonth_Params params;
	params.A = A;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.GetPI
// Flags: Final, Native, Static, Public, BlueprintCallable, BlueprintPure
// Params:
// Name: ReturnValue	Type: float	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
float UKismetMathLibrary::GetPI() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.GetPI");

	struct UKismetMathLibrary_GetPI_Params {
		float ReturnValue;			//Offset: 0 | ElementSize: 4
	};
	UKismetMathLibrary_GetPI_Params params;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.GetPointDistanceToLine
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: Point	Type: struct FVector	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: LineOrigin	Type: struct FVector	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: LineDirection	Type: struct FVector	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: float	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
float UKismetMathLibrary::GetPointDistanceToLine(struct FVector Point, struct FVector LineOrigin, struct FVector LineDirection) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.GetPointDistanceToLine");

	struct UKismetMathLibrary_GetPointDistanceToLine_Params {
		struct FVector Point;			//Offset: 0 | ElementSize: 12
		struct FVector LineOrigin;			//Offset: 12 | ElementSize: 12
		struct FVector LineDirection;			//Offset: 24 | ElementSize: 12
		float ReturnValue;			//Offset: 36 | ElementSize: 4
	};
	UKismetMathLibrary_GetPointDistanceToLine_Params params;
	params.Point = Point;
	params.LineOrigin = LineOrigin;
	params.LineDirection = LineDirection;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.GetPointDistanceToSegment
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: Point	Type: struct FVector	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: SegmentStart	Type: struct FVector	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: SegmentEnd	Type: struct FVector	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: float	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
float UKismetMathLibrary::GetPointDistanceToSegment(struct FVector Point, struct FVector SegmentStart, struct FVector SegmentEnd) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.GetPointDistanceToSegment");

	struct UKismetMathLibrary_GetPointDistanceToSegment_Params {
		struct FVector Point;			//Offset: 0 | ElementSize: 12
		struct FVector SegmentStart;			//Offset: 12 | ElementSize: 12
		struct FVector SegmentEnd;			//Offset: 24 | ElementSize: 12
		float ReturnValue;			//Offset: 36 | ElementSize: 4
	};
	UKismetMathLibrary_GetPointDistanceToSegment_Params params;
	params.Point = Point;
	params.SegmentStart = SegmentStart;
	params.SegmentEnd = SegmentEnd;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.GetReflectionVector
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: Direction	Type: struct FVector	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: SurfaceNormal	Type: struct FVector	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FVector	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FVector UKismetMathLibrary::GetReflectionVector(struct FVector Direction, struct FVector SurfaceNormal) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.GetReflectionVector");

	struct UKismetMathLibrary_GetReflectionVector_Params {
		struct FVector Direction;			//Offset: 0 | ElementSize: 12
		struct FVector SurfaceNormal;			//Offset: 12 | ElementSize: 12
		struct FVector ReturnValue;			//Offset: 24 | ElementSize: 12
	};
	UKismetMathLibrary_GetReflectionVector_Params params;
	params.Direction = Direction;
	params.SurfaceNormal = SurfaceNormal;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.GetRightVector
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: InRot	Type: struct FRotator	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FVector	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FVector UKismetMathLibrary::GetRightVector(struct FRotator InRot) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.GetRightVector");

	struct UKismetMathLibrary_GetRightVector_Params {
		struct FRotator InRot;			//Offset: 0 | ElementSize: 12
		struct FVector ReturnValue;			//Offset: 12 | ElementSize: 12
	};
	UKismetMathLibrary_GetRightVector_Params params;
	params.InRot = InRot;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.GetRotated2D
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: struct FVector2D	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: AngleDeg	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FVector2D	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FVector2D UKismetMathLibrary::GetRotated2D(struct FVector2D A, float AngleDeg) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.GetRotated2D");

	struct UKismetMathLibrary_GetRotated2D_Params {
		struct FVector2D A;			//Offset: 0 | ElementSize: 8
		float AngleDeg;			//Offset: 8 | ElementSize: 4
		struct FVector2D ReturnValue;			//Offset: 12 | ElementSize: 8
	};
	UKismetMathLibrary_GetRotated2D_Params params;
	params.A = A;
	params.AngleDeg = AngleDeg;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.GetSecond
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: struct FDateTime	Flags: Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: int32_t	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
int32_t UKismetMathLibrary::GetSecond(struct FDateTime A) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.GetSecond");

	struct UKismetMathLibrary_GetSecond_Params {
		struct FDateTime A;			//Offset: 0 | ElementSize: 8
		int32_t ReturnValue;			//Offset: 8 | ElementSize: 4
	};
	UKismetMathLibrary_GetSecond_Params params;
	params.A = A;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.GetSeconds
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: struct FTimespan	Flags: Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: int32_t	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
int32_t UKismetMathLibrary::GetSeconds(struct FTimespan A) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.GetSeconds");

	struct UKismetMathLibrary_GetSeconds_Params {
		struct FTimespan A;			//Offset: 0 | ElementSize: 8
		int32_t ReturnValue;			//Offset: 8 | ElementSize: 4
	};
	UKismetMathLibrary_GetSeconds_Params params;
	params.A = A;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.GetSlopeDegreeAngles
// Flags: Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: MyRightYAxis	Type: struct FVector	Flags: ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: FloorNormal	Type: struct FVector	Flags: ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: upvector	Type: struct FVector	Flags: ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: OutSlopePitchDegreeAngle	Type: float	Flags: Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: OutSlopeRollDegreeAngle	Type: float	Flags: Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
void UKismetMathLibrary::GetSlopeDegreeAngles(const struct FVector& MyRightYAxis, const struct FVector& FloorNormal, const struct FVector& upvector, float* OutSlopePitchDegreeAngle, float* OutSlopeRollDegreeAngle) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.GetSlopeDegreeAngles");

	struct UKismetMathLibrary_GetSlopeDegreeAngles_Params {
		struct FVector MyRightYAxis;			//Offset: 0 | ElementSize: 12
		struct FVector FloorNormal;			//Offset: 12 | ElementSize: 12
		struct FVector upvector;			//Offset: 24 | ElementSize: 12
		float OutSlopePitchDegreeAngle;			//Offset: 36 | ElementSize: 4
		float OutSlopeRollDegreeAngle;			//Offset: 40 | ElementSize: 4
	};
	UKismetMathLibrary_GetSlopeDegreeAngles_Params params;
	params.MyRightYAxis = MyRightYAxis;
	params.FloorNormal = FloorNormal;
	params.upvector = upvector;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	if (OutSlopePitchDegreeAngle != nullptr)
		*OutSlopePitchDegreeAngle = params.OutSlopePitchDegreeAngle;
	if (OutSlopeRollDegreeAngle != nullptr)
		*OutSlopeRollDegreeAngle = params.OutSlopeRollDegreeAngle;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.GetTAU
// Flags: Final, Native, Static, Public, BlueprintCallable, BlueprintPure
// Params:
// Name: ReturnValue	Type: float	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
float UKismetMathLibrary::GetTAU() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.GetTAU");

	struct UKismetMathLibrary_GetTAU_Params {
		float ReturnValue;			//Offset: 0 | ElementSize: 4
	};
	UKismetMathLibrary_GetTAU_Params params;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.GetTimeOfDay
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: struct FDateTime	Flags: Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FTimespan	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FTimespan UKismetMathLibrary::GetTimeOfDay(struct FDateTime A) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.GetTimeOfDay");

	struct UKismetMathLibrary_GetTimeOfDay_Params {
		struct FDateTime A;			//Offset: 0 | ElementSize: 8
		struct FTimespan ReturnValue;			//Offset: 8 | ElementSize: 8
	};
	UKismetMathLibrary_GetTimeOfDay_Params params;
	params.A = A;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.GetTotalDays
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: struct FTimespan	Flags: Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: float	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
float UKismetMathLibrary::GetTotalDays(struct FTimespan A) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.GetTotalDays");

	struct UKismetMathLibrary_GetTotalDays_Params {
		struct FTimespan A;			//Offset: 0 | ElementSize: 8
		float ReturnValue;			//Offset: 8 | ElementSize: 4
	};
	UKismetMathLibrary_GetTotalDays_Params params;
	params.A = A;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.GetTotalHours
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: struct FTimespan	Flags: Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: float	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
float UKismetMathLibrary::GetTotalHours(struct FTimespan A) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.GetTotalHours");

	struct UKismetMathLibrary_GetTotalHours_Params {
		struct FTimespan A;			//Offset: 0 | ElementSize: 8
		float ReturnValue;			//Offset: 8 | ElementSize: 4
	};
	UKismetMathLibrary_GetTotalHours_Params params;
	params.A = A;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.GetTotalMilliseconds
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: struct FTimespan	Flags: Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: float	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
float UKismetMathLibrary::GetTotalMilliseconds(struct FTimespan A) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.GetTotalMilliseconds");

	struct UKismetMathLibrary_GetTotalMilliseconds_Params {
		struct FTimespan A;			//Offset: 0 | ElementSize: 8
		float ReturnValue;			//Offset: 8 | ElementSize: 4
	};
	UKismetMathLibrary_GetTotalMilliseconds_Params params;
	params.A = A;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.GetTotalMinutes
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: struct FTimespan	Flags: Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: float	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
float UKismetMathLibrary::GetTotalMinutes(struct FTimespan A) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.GetTotalMinutes");

	struct UKismetMathLibrary_GetTotalMinutes_Params {
		struct FTimespan A;			//Offset: 0 | ElementSize: 8
		float ReturnValue;			//Offset: 8 | ElementSize: 4
	};
	UKismetMathLibrary_GetTotalMinutes_Params params;
	params.A = A;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.GetTotalSeconds
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: struct FTimespan	Flags: Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: float	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
float UKismetMathLibrary::GetTotalSeconds(struct FTimespan A) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.GetTotalSeconds");

	struct UKismetMathLibrary_GetTotalSeconds_Params {
		struct FTimespan A;			//Offset: 0 | ElementSize: 8
		float ReturnValue;			//Offset: 8 | ElementSize: 4
	};
	UKismetMathLibrary_GetTotalSeconds_Params params;
	params.A = A;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.GetUpVector
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: InRot	Type: struct FRotator	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FVector	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FVector UKismetMathLibrary::GetUpVector(struct FRotator InRot) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.GetUpVector");

	struct UKismetMathLibrary_GetUpVector_Params {
		struct FRotator InRot;			//Offset: 0 | ElementSize: 12
		struct FVector ReturnValue;			//Offset: 12 | ElementSize: 12
	};
	UKismetMathLibrary_GetUpVector_Params params;
	params.InRot = InRot;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.GetVectorArrayAverage
// Flags: Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: Vectors	Type: TArray<struct FVector>	Flags: ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FVector	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FVector UKismetMathLibrary::GetVectorArrayAverage(const TArray<struct FVector>& Vectors) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.GetVectorArrayAverage");

	struct UKismetMathLibrary_GetVectorArrayAverage_Params {
		TArray<struct FVector> Vectors;			//Offset: 0 | ElementSize: 16
		struct FVector ReturnValue;			//Offset: 16 | ElementSize: 12
	};
	UKismetMathLibrary_GetVectorArrayAverage_Params params;
	params.Vectors = Vectors;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.GetYawPitchFromVector
// Flags: Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: InVec	Type: struct FVector	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: Yaw	Type: float	Flags: Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: Pitch	Type: float	Flags: Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
void UKismetMathLibrary::GetYawPitchFromVector(struct FVector InVec, float* Yaw, float* Pitch) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.GetYawPitchFromVector");

	struct UKismetMathLibrary_GetYawPitchFromVector_Params {
		struct FVector InVec;			//Offset: 0 | ElementSize: 12
		float Yaw;			//Offset: 12 | ElementSize: 4
		float Pitch;			//Offset: 16 | ElementSize: 4
	};
	UKismetMathLibrary_GetYawPitchFromVector_Params params;
	params.InVec = InVec;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	if (Yaw != nullptr)
		*Yaw = params.Yaw;
	if (Pitch != nullptr)
		*Pitch = params.Pitch;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.GetYear
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: struct FDateTime	Flags: Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: int32_t	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
int32_t UKismetMathLibrary::GetYear(struct FDateTime A) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.GetYear");

	struct UKismetMathLibrary_GetYear_Params {
		struct FDateTime A;			//Offset: 0 | ElementSize: 8
		int32_t ReturnValue;			//Offset: 8 | ElementSize: 4
	};
	UKismetMathLibrary_GetYear_Params params;
	params.A = A;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Greater_ByteByte
// Flags: Final, Native, Static, Public, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: unsigned char	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: B	Type: unsigned char	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: bool	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
bool UKismetMathLibrary::Greater_ByteByte(unsigned char A, unsigned char B) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Greater_ByteByte");

	struct UKismetMathLibrary_Greater_ByteByte_Params {
		unsigned char A;			//Offset: 0 | ElementSize: 1
		unsigned char B;			//Offset: 1 | ElementSize: 1
		bool ReturnValue;			//Offset: 2 | ElementSize: 1
	};
	UKismetMathLibrary_Greater_ByteByte_Params params;
	params.A = A;
	params.B = B;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Greater_DateTimeDateTime
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: struct FDateTime	Flags: Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: B	Type: struct FDateTime	Flags: Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: bool	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
bool UKismetMathLibrary::Greater_DateTimeDateTime(struct FDateTime A, struct FDateTime B) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Greater_DateTimeDateTime");

	struct UKismetMathLibrary_Greater_DateTimeDateTime_Params {
		struct FDateTime A;			//Offset: 0 | ElementSize: 8
		struct FDateTime B;			//Offset: 8 | ElementSize: 8
		bool ReturnValue;			//Offset: 16 | ElementSize: 1
	};
	UKismetMathLibrary_Greater_DateTimeDateTime_Params params;
	params.A = A;
	params.B = B;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Greater_FloatFloat
// Flags: Final, Native, Static, Public, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: B	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: bool	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
bool UKismetMathLibrary::Greater_FloatFloat(float A, float B) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Greater_FloatFloat");

	struct UKismetMathLibrary_Greater_FloatFloat_Params {
		float A;			//Offset: 0 | ElementSize: 4
		float B;			//Offset: 4 | ElementSize: 4
		bool ReturnValue;			//Offset: 8 | ElementSize: 1
	};
	UKismetMathLibrary_Greater_FloatFloat_Params params;
	params.A = A;
	params.B = B;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Greater_Int64Int64
// Flags: Final, Native, Static, Public, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: int64_t	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: B	Type: int64_t	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: bool	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
bool UKismetMathLibrary::Greater_Int64Int64(int64_t A, int64_t B) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Greater_Int64Int64");

	struct UKismetMathLibrary_Greater_Int64Int64_Params {
		int64_t A;			//Offset: 0 | ElementSize: 8
		int64_t B;			//Offset: 8 | ElementSize: 8
		bool ReturnValue;			//Offset: 16 | ElementSize: 1
	};
	UKismetMathLibrary_Greater_Int64Int64_Params params;
	params.A = A;
	params.B = B;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Greater_IntInt
// Flags: Final, Native, Static, Public, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: int32_t	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: B	Type: int32_t	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: bool	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
bool UKismetMathLibrary::Greater_IntInt(int32_t A, int32_t B) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Greater_IntInt");

	struct UKismetMathLibrary_Greater_IntInt_Params {
		int32_t A;			//Offset: 0 | ElementSize: 4
		int32_t B;			//Offset: 4 | ElementSize: 4
		bool ReturnValue;			//Offset: 8 | ElementSize: 1
	};
	UKismetMathLibrary_Greater_IntInt_Params params;
	params.A = A;
	params.B = B;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Greater_TimespanTimespan
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: struct FTimespan	Flags: Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: B	Type: struct FTimespan	Flags: Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: bool	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
bool UKismetMathLibrary::Greater_TimespanTimespan(struct FTimespan A, struct FTimespan B) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Greater_TimespanTimespan");

	struct UKismetMathLibrary_Greater_TimespanTimespan_Params {
		struct FTimespan A;			//Offset: 0 | ElementSize: 8
		struct FTimespan B;			//Offset: 8 | ElementSize: 8
		bool ReturnValue;			//Offset: 16 | ElementSize: 1
	};
	UKismetMathLibrary_Greater_TimespanTimespan_Params params;
	params.A = A;
	params.B = B;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.GreaterEqual_ByteByte
// Flags: Final, Native, Static, Public, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: unsigned char	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: B	Type: unsigned char	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: bool	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
bool UKismetMathLibrary::GreaterEqual_ByteByte(unsigned char A, unsigned char B) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.GreaterEqual_ByteByte");

	struct UKismetMathLibrary_GreaterEqual_ByteByte_Params {
		unsigned char A;			//Offset: 0 | ElementSize: 1
		unsigned char B;			//Offset: 1 | ElementSize: 1
		bool ReturnValue;			//Offset: 2 | ElementSize: 1
	};
	UKismetMathLibrary_GreaterEqual_ByteByte_Params params;
	params.A = A;
	params.B = B;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.GreaterEqual_DateTimeDateTime
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: struct FDateTime	Flags: Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: B	Type: struct FDateTime	Flags: Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: bool	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
bool UKismetMathLibrary::GreaterEqual_DateTimeDateTime(struct FDateTime A, struct FDateTime B) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.GreaterEqual_DateTimeDateTime");

	struct UKismetMathLibrary_GreaterEqual_DateTimeDateTime_Params {
		struct FDateTime A;			//Offset: 0 | ElementSize: 8
		struct FDateTime B;			//Offset: 8 | ElementSize: 8
		bool ReturnValue;			//Offset: 16 | ElementSize: 1
	};
	UKismetMathLibrary_GreaterEqual_DateTimeDateTime_Params params;
	params.A = A;
	params.B = B;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.GreaterEqual_FloatFloat
// Flags: Final, Native, Static, Public, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: B	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: bool	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
bool UKismetMathLibrary::GreaterEqual_FloatFloat(float A, float B) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.GreaterEqual_FloatFloat");

	struct UKismetMathLibrary_GreaterEqual_FloatFloat_Params {
		float A;			//Offset: 0 | ElementSize: 4
		float B;			//Offset: 4 | ElementSize: 4
		bool ReturnValue;			//Offset: 8 | ElementSize: 1
	};
	UKismetMathLibrary_GreaterEqual_FloatFloat_Params params;
	params.A = A;
	params.B = B;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.GreaterEqual_Int64Int64
// Flags: Final, Native, Static, Public, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: int64_t	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: B	Type: int64_t	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: bool	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
bool UKismetMathLibrary::GreaterEqual_Int64Int64(int64_t A, int64_t B) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.GreaterEqual_Int64Int64");

	struct UKismetMathLibrary_GreaterEqual_Int64Int64_Params {
		int64_t A;			//Offset: 0 | ElementSize: 8
		int64_t B;			//Offset: 8 | ElementSize: 8
		bool ReturnValue;			//Offset: 16 | ElementSize: 1
	};
	UKismetMathLibrary_GreaterEqual_Int64Int64_Params params;
	params.A = A;
	params.B = B;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.GreaterEqual_IntInt
// Flags: Final, Native, Static, Public, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: int32_t	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: B	Type: int32_t	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: bool	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
bool UKismetMathLibrary::GreaterEqual_IntInt(int32_t A, int32_t B) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.GreaterEqual_IntInt");

	struct UKismetMathLibrary_GreaterEqual_IntInt_Params {
		int32_t A;			//Offset: 0 | ElementSize: 4
		int32_t B;			//Offset: 4 | ElementSize: 4
		bool ReturnValue;			//Offset: 8 | ElementSize: 1
	};
	UKismetMathLibrary_GreaterEqual_IntInt_Params params;
	params.A = A;
	params.B = B;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.GreaterEqual_TimespanTimespan
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: struct FTimespan	Flags: Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: B	Type: struct FTimespan	Flags: Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: bool	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
bool UKismetMathLibrary::GreaterEqual_TimespanTimespan(struct FTimespan A, struct FTimespan B) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.GreaterEqual_TimespanTimespan");

	struct UKismetMathLibrary_GreaterEqual_TimespanTimespan_Params {
		struct FTimespan A;			//Offset: 0 | ElementSize: 8
		struct FTimespan B;			//Offset: 8 | ElementSize: 8
		bool ReturnValue;			//Offset: 16 | ElementSize: 1
	};
	UKismetMathLibrary_GreaterEqual_TimespanTimespan_Params params;
	params.A = A;
	params.B = B;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.GreaterGreater_VectorRotator
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: struct FVector	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: B	Type: struct FRotator	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FVector	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FVector UKismetMathLibrary::GreaterGreater_VectorRotator(struct FVector A, struct FRotator B) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.GreaterGreater_VectorRotator");

	struct UKismetMathLibrary_GreaterGreater_VectorRotator_Params {
		struct FVector A;			//Offset: 0 | ElementSize: 12
		struct FRotator B;			//Offset: 12 | ElementSize: 12
		struct FVector ReturnValue;			//Offset: 24 | ElementSize: 12
	};
	UKismetMathLibrary_GreaterGreater_VectorRotator_Params params;
	params.A = A;
	params.B = B;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.GridSnap_Float
// Flags: Final, Native, Static, Public, BlueprintCallable, BlueprintPure
// Params:
// Name: Location	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: GridSize	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: float	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
float UKismetMathLibrary::GridSnap_Float(float Location, float GridSize) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.GridSnap_Float");

	struct UKismetMathLibrary_GridSnap_Float_Params {
		float Location;			//Offset: 0 | ElementSize: 4
		float GridSize;			//Offset: 4 | ElementSize: 4
		float ReturnValue;			//Offset: 8 | ElementSize: 4
	};
	UKismetMathLibrary_GridSnap_Float_Params params;
	params.Location = Location;
	params.GridSize = GridSize;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.HSVToRGB
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: H	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: S	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: V	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: A	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FLinearColor	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FLinearColor UKismetMathLibrary::HSVToRGB(float H, float S, float V, float A) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.HSVToRGB");

	struct UKismetMathLibrary_HSVToRGB_Params {
		float H;			//Offset: 0 | ElementSize: 4
		float S;			//Offset: 4 | ElementSize: 4
		float V;			//Offset: 8 | ElementSize: 4
		float A;			//Offset: 12 | ElementSize: 4
		struct FLinearColor ReturnValue;			//Offset: 16 | ElementSize: 16
	};
	UKismetMathLibrary_HSVToRGB_Params params;
	params.H = H;
	params.S = S;
	params.V = V;
	params.A = A;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.HSVToRGB_Vector
// Flags: Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: HSV	Type: struct FLinearColor	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: RGB	Type: struct FLinearColor	Flags: Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
void UKismetMathLibrary::HSVToRGB_Vector(struct FLinearColor HSV, struct FLinearColor* RGB) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.HSVToRGB_Vector");

	struct UKismetMathLibrary_HSVToRGB_Vector_Params {
		struct FLinearColor HSV;			//Offset: 0 | ElementSize: 16
		struct FLinearColor RGB;			//Offset: 16 | ElementSize: 16
	};
	UKismetMathLibrary_HSVToRGB_Vector_Params params;
	params.HSV = HSV;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	if (RGB != nullptr)
		*RGB = params.RGB;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.HSVToRGBLinear
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: HSV	Type: struct FLinearColor	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FLinearColor	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FLinearColor UKismetMathLibrary::HSVToRGBLinear(struct FLinearColor HSV) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.HSVToRGBLinear");

	struct UKismetMathLibrary_HSVToRGBLinear_Params {
		struct FLinearColor HSV;			//Offset: 0 | ElementSize: 16
		struct FLinearColor ReturnValue;			//Offset: 16 | ElementSize: 16
	};
	UKismetMathLibrary_HSVToRGBLinear_Params params;
	params.HSV = HSV;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Hypotenuse
// Flags: Final, Native, Static, Public, BlueprintCallable, BlueprintPure
// Params:
// Name: Width	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: Height	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: float	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
float UKismetMathLibrary::Hypotenuse(float Width, float Height) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Hypotenuse");

	struct UKismetMathLibrary_Hypotenuse_Params {
		float Width;			//Offset: 0 | ElementSize: 4
		float Height;			//Offset: 4 | ElementSize: 4
		float ReturnValue;			//Offset: 8 | ElementSize: 4
	};
	UKismetMathLibrary_Hypotenuse_Params params;
	params.Width = Width;
	params.Height = Height;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.InRange_FloatFloat
// Flags: Final, Native, Static, Public, BlueprintCallable, BlueprintPure
// Params:
// Name: Value	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: Min	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: Max	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: InclusiveMin	Type: bool	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: InclusiveMax	Type: bool	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: bool	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
bool UKismetMathLibrary::InRange_FloatFloat(float Value, float Min, float Max, bool InclusiveMin, bool InclusiveMax) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.InRange_FloatFloat");

	struct UKismetMathLibrary_InRange_FloatFloat_Params {
		float Value;			//Offset: 0 | ElementSize: 4
		float Min;			//Offset: 4 | ElementSize: 4
		float Max;			//Offset: 8 | ElementSize: 4
		bool InclusiveMin;			//Offset: 12 | ElementSize: 1
		bool InclusiveMax;			//Offset: 13 | ElementSize: 1
		bool ReturnValue;			//Offset: 14 | ElementSize: 1
	};
	UKismetMathLibrary_InRange_FloatFloat_Params params;
	params.Value = Value;
	params.Min = Min;
	params.Max = Max;
	params.InclusiveMin = InclusiveMin;
	params.InclusiveMax = InclusiveMax;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.InRange_Int64Int64
// Flags: Final, Native, Static, Public, BlueprintCallable, BlueprintPure
// Params:
// Name: Value	Type: int64_t	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: Min	Type: int64_t	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: Max	Type: int64_t	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: InclusiveMin	Type: bool	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: InclusiveMax	Type: bool	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: bool	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
bool UKismetMathLibrary::InRange_Int64Int64(int64_t Value, int64_t Min, int64_t Max, bool InclusiveMin, bool InclusiveMax) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.InRange_Int64Int64");

	struct UKismetMathLibrary_InRange_Int64Int64_Params {
		int64_t Value;			//Offset: 0 | ElementSize: 8
		int64_t Min;			//Offset: 8 | ElementSize: 8
		int64_t Max;			//Offset: 16 | ElementSize: 8
		bool InclusiveMin;			//Offset: 24 | ElementSize: 1
		bool InclusiveMax;			//Offset: 25 | ElementSize: 1
		bool ReturnValue;			//Offset: 26 | ElementSize: 1
	};
	UKismetMathLibrary_InRange_Int64Int64_Params params;
	params.Value = Value;
	params.Min = Min;
	params.Max = Max;
	params.InclusiveMin = InclusiveMin;
	params.InclusiveMax = InclusiveMax;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.InRange_IntInt
// Flags: Final, Native, Static, Public, BlueprintCallable, BlueprintPure
// Params:
// Name: Value	Type: int32_t	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: Min	Type: int32_t	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: Max	Type: int32_t	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: InclusiveMin	Type: bool	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: InclusiveMax	Type: bool	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: bool	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
bool UKismetMathLibrary::InRange_IntInt(int32_t Value, int32_t Min, int32_t Max, bool InclusiveMin, bool InclusiveMax) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.InRange_IntInt");

	struct UKismetMathLibrary_InRange_IntInt_Params {
		int32_t Value;			//Offset: 0 | ElementSize: 4
		int32_t Min;			//Offset: 4 | ElementSize: 4
		int32_t Max;			//Offset: 8 | ElementSize: 4
		bool InclusiveMin;			//Offset: 12 | ElementSize: 1
		bool InclusiveMax;			//Offset: 13 | ElementSize: 1
		bool ReturnValue;			//Offset: 14 | ElementSize: 1
	};
	UKismetMathLibrary_InRange_IntInt_Params params;
	params.Value = Value;
	params.Min = Min;
	params.Max = Max;
	params.InclusiveMin = InclusiveMin;
	params.InclusiveMax = InclusiveMax;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.IntPoint_Down
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: ReturnValue	Type: struct FIntPoint	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FIntPoint UKismetMathLibrary::IntPoint_Down() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.IntPoint_Down");

	struct UKismetMathLibrary_IntPoint_Down_Params {
		struct FIntPoint ReturnValue;			//Offset: 0 | ElementSize: 8
	};
	UKismetMathLibrary_IntPoint_Down_Params params;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.IntPoint_Left
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: ReturnValue	Type: struct FIntPoint	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FIntPoint UKismetMathLibrary::IntPoint_Left() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.IntPoint_Left");

	struct UKismetMathLibrary_IntPoint_Left_Params {
		struct FIntPoint ReturnValue;			//Offset: 0 | ElementSize: 8
	};
	UKismetMathLibrary_IntPoint_Left_Params params;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.IntPoint_One
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: ReturnValue	Type: struct FIntPoint	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FIntPoint UKismetMathLibrary::IntPoint_One() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.IntPoint_One");

	struct UKismetMathLibrary_IntPoint_One_Params {
		struct FIntPoint ReturnValue;			//Offset: 0 | ElementSize: 8
	};
	UKismetMathLibrary_IntPoint_One_Params params;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.IntPoint_Right
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: ReturnValue	Type: struct FIntPoint	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FIntPoint UKismetMathLibrary::IntPoint_Right() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.IntPoint_Right");

	struct UKismetMathLibrary_IntPoint_Right_Params {
		struct FIntPoint ReturnValue;			//Offset: 0 | ElementSize: 8
	};
	UKismetMathLibrary_IntPoint_Right_Params params;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.IntPoint_Up
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: ReturnValue	Type: struct FIntPoint	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FIntPoint UKismetMathLibrary::IntPoint_Up() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.IntPoint_Up");

	struct UKismetMathLibrary_IntPoint_Up_Params {
		struct FIntPoint ReturnValue;			//Offset: 0 | ElementSize: 8
	};
	UKismetMathLibrary_IntPoint_Up_Params params;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.IntPoint_Zero
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: ReturnValue	Type: struct FIntPoint	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FIntPoint UKismetMathLibrary::IntPoint_Zero() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.IntPoint_Zero");

	struct UKismetMathLibrary_IntPoint_Zero_Params {
		struct FIntPoint ReturnValue;			//Offset: 0 | ElementSize: 8
	};
	UKismetMathLibrary_IntPoint_Zero_Params params;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.InverseTransformDirection
// Flags: Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: T	Type: struct FTransform	Flags: ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
// Name: Direction	Type: struct FVector	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FVector	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FVector UKismetMathLibrary::InverseTransformDirection(const struct FTransform& T, struct FVector Direction) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.InverseTransformDirection");

	struct UKismetMathLibrary_InverseTransformDirection_Params {
		struct FTransform T;			//Offset: 0 | ElementSize: 48
		struct FVector Direction;			//Offset: 48 | ElementSize: 12
		struct FVector ReturnValue;			//Offset: 60 | ElementSize: 12
	};
	UKismetMathLibrary_InverseTransformDirection_Params params;
	params.T = T;
	params.Direction = Direction;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.InverseTransformLocation
// Flags: Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: T	Type: struct FTransform	Flags: ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
// Name: Location	Type: struct FVector	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FVector	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FVector UKismetMathLibrary::InverseTransformLocation(const struct FTransform& T, struct FVector Location) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.InverseTransformLocation");

	struct UKismetMathLibrary_InverseTransformLocation_Params {
		struct FTransform T;			//Offset: 0 | ElementSize: 48
		struct FVector Location;			//Offset: 48 | ElementSize: 12
		struct FVector ReturnValue;			//Offset: 60 | ElementSize: 12
	};
	UKismetMathLibrary_InverseTransformLocation_Params params;
	params.T = T;
	params.Location = Location;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.InverseTransformRotation
// Flags: Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: T	Type: struct FTransform	Flags: ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
// Name: Rotation	Type: struct FRotator	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FRotator	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FRotator UKismetMathLibrary::InverseTransformRotation(const struct FTransform& T, struct FRotator Rotation) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.InverseTransformRotation");

	struct UKismetMathLibrary_InverseTransformRotation_Params {
		struct FTransform T;			//Offset: 0 | ElementSize: 48
		struct FRotator Rotation;			//Offset: 48 | ElementSize: 12
		struct FRotator ReturnValue;			//Offset: 60 | ElementSize: 12
	};
	UKismetMathLibrary_InverseTransformRotation_Params params;
	params.T = T;
	params.Rotation = Rotation;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.InvertTransform
// Flags: Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: T	Type: struct FTransform	Flags: ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FTransform	Flags: Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FTransform UKismetMathLibrary::InvertTransform(const struct FTransform& T) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.InvertTransform");

	struct UKismetMathLibrary_InvertTransform_Params {
		struct FTransform T;			//Offset: 0 | ElementSize: 48
		struct FTransform ReturnValue;			//Offset: 48 | ElementSize: 48
	};
	UKismetMathLibrary_InvertTransform_Params params;
	params.T = T;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.IsAfternoon
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: struct FDateTime	Flags: Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: bool	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
bool UKismetMathLibrary::IsAfternoon(struct FDateTime A) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.IsAfternoon");

	struct UKismetMathLibrary_IsAfternoon_Params {
		struct FDateTime A;			//Offset: 0 | ElementSize: 8
		bool ReturnValue;			//Offset: 8 | ElementSize: 1
	};
	UKismetMathLibrary_IsAfternoon_Params params;
	params.A = A;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.IsLeapYear
// Flags: Final, Native, Static, Public, BlueprintCallable, BlueprintPure
// Params:
// Name: Year	Type: int32_t	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: bool	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
bool UKismetMathLibrary::IsLeapYear(int32_t Year) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.IsLeapYear");

	struct UKismetMathLibrary_IsLeapYear_Params {
		int32_t Year;			//Offset: 0 | ElementSize: 4
		bool ReturnValue;			//Offset: 4 | ElementSize: 1
	};
	UKismetMathLibrary_IsLeapYear_Params params;
	params.Year = Year;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.IsMorning
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: struct FDateTime	Flags: Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: bool	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
bool UKismetMathLibrary::IsMorning(struct FDateTime A) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.IsMorning");

	struct UKismetMathLibrary_IsMorning_Params {
		struct FDateTime A;			//Offset: 0 | ElementSize: 8
		bool ReturnValue;			//Offset: 8 | ElementSize: 1
	};
	UKismetMathLibrary_IsMorning_Params params;
	params.A = A;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.IsNearlyZero2D
// Flags: Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: struct FVector2D	Flags: ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: Tolerance	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: bool	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
bool UKismetMathLibrary::IsNearlyZero2D(const struct FVector2D& A, float Tolerance) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.IsNearlyZero2D");

	struct UKismetMathLibrary_IsNearlyZero2D_Params {
		struct FVector2D A;			//Offset: 0 | ElementSize: 8
		float Tolerance;			//Offset: 8 | ElementSize: 4
		bool ReturnValue;			//Offset: 12 | ElementSize: 1
	};
	UKismetMathLibrary_IsNearlyZero2D_Params params;
	params.A = A;
	params.Tolerance = Tolerance;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.IsPointInBox
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: Point	Type: struct FVector	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: BoxOrigin	Type: struct FVector	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: BoxExtent	Type: struct FVector	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: bool	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
bool UKismetMathLibrary::IsPointInBox(struct FVector Point, struct FVector BoxOrigin, struct FVector BoxExtent) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.IsPointInBox");

	struct UKismetMathLibrary_IsPointInBox_Params {
		struct FVector Point;			//Offset: 0 | ElementSize: 12
		struct FVector BoxOrigin;			//Offset: 12 | ElementSize: 12
		struct FVector BoxExtent;			//Offset: 24 | ElementSize: 12
		bool ReturnValue;			//Offset: 36 | ElementSize: 1
	};
	UKismetMathLibrary_IsPointInBox_Params params;
	params.Point = Point;
	params.BoxOrigin = BoxOrigin;
	params.BoxExtent = BoxExtent;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.IsPointInBoxWithTransform
// Flags: Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: Point	Type: struct FVector	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: BoxWorldTransform	Type: struct FTransform	Flags: ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
// Name: BoxExtent	Type: struct FVector	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: bool	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
bool UKismetMathLibrary::IsPointInBoxWithTransform(struct FVector Point, const struct FTransform& BoxWorldTransform, struct FVector BoxExtent) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.IsPointInBoxWithTransform");

	struct UKismetMathLibrary_IsPointInBoxWithTransform_Params {
		struct FVector Point;			//Offset: 0 | ElementSize: 12
		struct FTransform BoxWorldTransform;			//Offset: 16 | ElementSize: 48
		struct FVector BoxExtent;			//Offset: 64 | ElementSize: 12
		bool ReturnValue;			//Offset: 76 | ElementSize: 1
	};
	UKismetMathLibrary_IsPointInBoxWithTransform_Params params;
	params.Point = Point;
	params.BoxWorldTransform = BoxWorldTransform;
	params.BoxExtent = BoxExtent;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.IsZero2D
// Flags: Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: struct FVector2D	Flags: ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: bool	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
bool UKismetMathLibrary::IsZero2D(const struct FVector2D& A) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.IsZero2D");

	struct UKismetMathLibrary_IsZero2D_Params {
		struct FVector2D A;			//Offset: 0 | ElementSize: 8
		bool ReturnValue;			//Offset: 8 | ElementSize: 1
	};
	UKismetMathLibrary_IsZero2D_Params params;
	params.A = A;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Lerp
// Flags: Final, Native, Static, Public, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: B	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: Alpha	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: float	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
float UKismetMathLibrary::Lerp(float A, float B, float Alpha) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Lerp");

	struct UKismetMathLibrary_Lerp_Params {
		float A;			//Offset: 0 | ElementSize: 4
		float B;			//Offset: 4 | ElementSize: 4
		float Alpha;			//Offset: 8 | ElementSize: 4
		float ReturnValue;			//Offset: 12 | ElementSize: 4
	};
	UKismetMathLibrary_Lerp_Params params;
	params.A = A;
	params.B = B;
	params.Alpha = Alpha;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Less_ByteByte
// Flags: Final, Native, Static, Public, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: unsigned char	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: B	Type: unsigned char	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: bool	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
bool UKismetMathLibrary::Less_ByteByte(unsigned char A, unsigned char B) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Less_ByteByte");

	struct UKismetMathLibrary_Less_ByteByte_Params {
		unsigned char A;			//Offset: 0 | ElementSize: 1
		unsigned char B;			//Offset: 1 | ElementSize: 1
		bool ReturnValue;			//Offset: 2 | ElementSize: 1
	};
	UKismetMathLibrary_Less_ByteByte_Params params;
	params.A = A;
	params.B = B;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Less_DateTimeDateTime
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: struct FDateTime	Flags: Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: B	Type: struct FDateTime	Flags: Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: bool	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
bool UKismetMathLibrary::Less_DateTimeDateTime(struct FDateTime A, struct FDateTime B) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Less_DateTimeDateTime");

	struct UKismetMathLibrary_Less_DateTimeDateTime_Params {
		struct FDateTime A;			//Offset: 0 | ElementSize: 8
		struct FDateTime B;			//Offset: 8 | ElementSize: 8
		bool ReturnValue;			//Offset: 16 | ElementSize: 1
	};
	UKismetMathLibrary_Less_DateTimeDateTime_Params params;
	params.A = A;
	params.B = B;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Less_FloatFloat
// Flags: Final, Native, Static, Public, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: B	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: bool	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
bool UKismetMathLibrary::Less_FloatFloat(float A, float B) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Less_FloatFloat");

	struct UKismetMathLibrary_Less_FloatFloat_Params {
		float A;			//Offset: 0 | ElementSize: 4
		float B;			//Offset: 4 | ElementSize: 4
		bool ReturnValue;			//Offset: 8 | ElementSize: 1
	};
	UKismetMathLibrary_Less_FloatFloat_Params params;
	params.A = A;
	params.B = B;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Less_Int64Int64
// Flags: Final, Native, Static, Public, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: int64_t	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: B	Type: int64_t	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: bool	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
bool UKismetMathLibrary::Less_Int64Int64(int64_t A, int64_t B) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Less_Int64Int64");

	struct UKismetMathLibrary_Less_Int64Int64_Params {
		int64_t A;			//Offset: 0 | ElementSize: 8
		int64_t B;			//Offset: 8 | ElementSize: 8
		bool ReturnValue;			//Offset: 16 | ElementSize: 1
	};
	UKismetMathLibrary_Less_Int64Int64_Params params;
	params.A = A;
	params.B = B;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Less_IntInt
// Flags: Final, Native, Static, Public, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: int32_t	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: B	Type: int32_t	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: bool	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
bool UKismetMathLibrary::Less_IntInt(int32_t A, int32_t B) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Less_IntInt");

	struct UKismetMathLibrary_Less_IntInt_Params {
		int32_t A;			//Offset: 0 | ElementSize: 4
		int32_t B;			//Offset: 4 | ElementSize: 4
		bool ReturnValue;			//Offset: 8 | ElementSize: 1
	};
	UKismetMathLibrary_Less_IntInt_Params params;
	params.A = A;
	params.B = B;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Less_TimespanTimespan
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: struct FTimespan	Flags: Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: B	Type: struct FTimespan	Flags: Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: bool	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
bool UKismetMathLibrary::Less_TimespanTimespan(struct FTimespan A, struct FTimespan B) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Less_TimespanTimespan");

	struct UKismetMathLibrary_Less_TimespanTimespan_Params {
		struct FTimespan A;			//Offset: 0 | ElementSize: 8
		struct FTimespan B;			//Offset: 8 | ElementSize: 8
		bool ReturnValue;			//Offset: 16 | ElementSize: 1
	};
	UKismetMathLibrary_Less_TimespanTimespan_Params params;
	params.A = A;
	params.B = B;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.LessEqual_ByteByte
// Flags: Final, Native, Static, Public, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: unsigned char	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: B	Type: unsigned char	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: bool	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
bool UKismetMathLibrary::LessEqual_ByteByte(unsigned char A, unsigned char B) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.LessEqual_ByteByte");

	struct UKismetMathLibrary_LessEqual_ByteByte_Params {
		unsigned char A;			//Offset: 0 | ElementSize: 1
		unsigned char B;			//Offset: 1 | ElementSize: 1
		bool ReturnValue;			//Offset: 2 | ElementSize: 1
	};
	UKismetMathLibrary_LessEqual_ByteByte_Params params;
	params.A = A;
	params.B = B;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.LessEqual_DateTimeDateTime
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: struct FDateTime	Flags: Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: B	Type: struct FDateTime	Flags: Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: bool	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
bool UKismetMathLibrary::LessEqual_DateTimeDateTime(struct FDateTime A, struct FDateTime B) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.LessEqual_DateTimeDateTime");

	struct UKismetMathLibrary_LessEqual_DateTimeDateTime_Params {
		struct FDateTime A;			//Offset: 0 | ElementSize: 8
		struct FDateTime B;			//Offset: 8 | ElementSize: 8
		bool ReturnValue;			//Offset: 16 | ElementSize: 1
	};
	UKismetMathLibrary_LessEqual_DateTimeDateTime_Params params;
	params.A = A;
	params.B = B;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.LessEqual_FloatFloat
// Flags: Final, Native, Static, Public, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: B	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: bool	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
bool UKismetMathLibrary::LessEqual_FloatFloat(float A, float B) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.LessEqual_FloatFloat");

	struct UKismetMathLibrary_LessEqual_FloatFloat_Params {
		float A;			//Offset: 0 | ElementSize: 4
		float B;			//Offset: 4 | ElementSize: 4
		bool ReturnValue;			//Offset: 8 | ElementSize: 1
	};
	UKismetMathLibrary_LessEqual_FloatFloat_Params params;
	params.A = A;
	params.B = B;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.LessEqual_Int64Int64
// Flags: Final, Native, Static, Public, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: int64_t	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: B	Type: int64_t	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: bool	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
bool UKismetMathLibrary::LessEqual_Int64Int64(int64_t A, int64_t B) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.LessEqual_Int64Int64");

	struct UKismetMathLibrary_LessEqual_Int64Int64_Params {
		int64_t A;			//Offset: 0 | ElementSize: 8
		int64_t B;			//Offset: 8 | ElementSize: 8
		bool ReturnValue;			//Offset: 16 | ElementSize: 1
	};
	UKismetMathLibrary_LessEqual_Int64Int64_Params params;
	params.A = A;
	params.B = B;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.LessEqual_IntInt
// Flags: Final, Native, Static, Public, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: int32_t	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: B	Type: int32_t	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: bool	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
bool UKismetMathLibrary::LessEqual_IntInt(int32_t A, int32_t B) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.LessEqual_IntInt");

	struct UKismetMathLibrary_LessEqual_IntInt_Params {
		int32_t A;			//Offset: 0 | ElementSize: 4
		int32_t B;			//Offset: 4 | ElementSize: 4
		bool ReturnValue;			//Offset: 8 | ElementSize: 1
	};
	UKismetMathLibrary_LessEqual_IntInt_Params params;
	params.A = A;
	params.B = B;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.LessEqual_TimespanTimespan
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: struct FTimespan	Flags: Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: B	Type: struct FTimespan	Flags: Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: bool	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
bool UKismetMathLibrary::LessEqual_TimespanTimespan(struct FTimespan A, struct FTimespan B) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.LessEqual_TimespanTimespan");

	struct UKismetMathLibrary_LessEqual_TimespanTimespan_Params {
		struct FTimespan A;			//Offset: 0 | ElementSize: 8
		struct FTimespan B;			//Offset: 8 | ElementSize: 8
		bool ReturnValue;			//Offset: 16 | ElementSize: 1
	};
	UKismetMathLibrary_LessEqual_TimespanTimespan_Params params;
	params.A = A;
	params.B = B;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.LessLess_VectorRotator
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: struct FVector	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: B	Type: struct FRotator	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FVector	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FVector UKismetMathLibrary::LessLess_VectorRotator(struct FVector A, struct FRotator B) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.LessLess_VectorRotator");

	struct UKismetMathLibrary_LessLess_VectorRotator_Params {
		struct FVector A;			//Offset: 0 | ElementSize: 12
		struct FRotator B;			//Offset: 12 | ElementSize: 12
		struct FVector ReturnValue;			//Offset: 24 | ElementSize: 12
	};
	UKismetMathLibrary_LessLess_VectorRotator_Params params;
	params.A = A;
	params.B = B;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.LinearColor_Black
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: ReturnValue	Type: struct FLinearColor	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FLinearColor UKismetMathLibrary::LinearColor_Black() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.LinearColor_Black");

	struct UKismetMathLibrary_LinearColor_Black_Params {
		struct FLinearColor ReturnValue;			//Offset: 0 | ElementSize: 16
	};
	UKismetMathLibrary_LinearColor_Black_Params params;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.LinearColor_Blue
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: ReturnValue	Type: struct FLinearColor	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FLinearColor UKismetMathLibrary::LinearColor_Blue() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.LinearColor_Blue");

	struct UKismetMathLibrary_LinearColor_Blue_Params {
		struct FLinearColor ReturnValue;			//Offset: 0 | ElementSize: 16
	};
	UKismetMathLibrary_LinearColor_Blue_Params params;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.LinearColor_Desaturated
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: InColor	Type: struct FLinearColor	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: InDesaturation	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FLinearColor	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FLinearColor UKismetMathLibrary::LinearColor_Desaturated(struct FLinearColor InColor, float InDesaturation) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.LinearColor_Desaturated");

	struct UKismetMathLibrary_LinearColor_Desaturated_Params {
		struct FLinearColor InColor;			//Offset: 0 | ElementSize: 16
		float InDesaturation;			//Offset: 16 | ElementSize: 4
		struct FLinearColor ReturnValue;			//Offset: 20 | ElementSize: 16
	};
	UKismetMathLibrary_LinearColor_Desaturated_Params params;
	params.InColor = InColor;
	params.InDesaturation = InDesaturation;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.LinearColor_Distance
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: C1	Type: struct FLinearColor	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: C2	Type: struct FLinearColor	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: float	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
float UKismetMathLibrary::LinearColor_Distance(struct FLinearColor C1, struct FLinearColor C2) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.LinearColor_Distance");

	struct UKismetMathLibrary_LinearColor_Distance_Params {
		struct FLinearColor C1;			//Offset: 0 | ElementSize: 16
		struct FLinearColor C2;			//Offset: 16 | ElementSize: 16
		float ReturnValue;			//Offset: 32 | ElementSize: 4
	};
	UKismetMathLibrary_LinearColor_Distance_Params params;
	params.C1 = C1;
	params.C2 = C2;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.LinearColor_GetLuminance
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: InColor	Type: struct FLinearColor	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: float	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
float UKismetMathLibrary::LinearColor_GetLuminance(struct FLinearColor InColor) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.LinearColor_GetLuminance");

	struct UKismetMathLibrary_LinearColor_GetLuminance_Params {
		struct FLinearColor InColor;			//Offset: 0 | ElementSize: 16
		float ReturnValue;			//Offset: 16 | ElementSize: 4
	};
	UKismetMathLibrary_LinearColor_GetLuminance_Params params;
	params.InColor = InColor;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.LinearColor_GetMax
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: InColor	Type: struct FLinearColor	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: float	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
float UKismetMathLibrary::LinearColor_GetMax(struct FLinearColor InColor) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.LinearColor_GetMax");

	struct UKismetMathLibrary_LinearColor_GetMax_Params {
		struct FLinearColor InColor;			//Offset: 0 | ElementSize: 16
		float ReturnValue;			//Offset: 16 | ElementSize: 4
	};
	UKismetMathLibrary_LinearColor_GetMax_Params params;
	params.InColor = InColor;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.LinearColor_GetMin
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: InColor	Type: struct FLinearColor	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: float	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
float UKismetMathLibrary::LinearColor_GetMin(struct FLinearColor InColor) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.LinearColor_GetMin");

	struct UKismetMathLibrary_LinearColor_GetMin_Params {
		struct FLinearColor InColor;			//Offset: 0 | ElementSize: 16
		float ReturnValue;			//Offset: 16 | ElementSize: 4
	};
	UKismetMathLibrary_LinearColor_GetMin_Params params;
	params.InColor = InColor;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.LinearColor_Gray
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: ReturnValue	Type: struct FLinearColor	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FLinearColor UKismetMathLibrary::LinearColor_Gray() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.LinearColor_Gray");

	struct UKismetMathLibrary_LinearColor_Gray_Params {
		struct FLinearColor ReturnValue;			//Offset: 0 | ElementSize: 16
	};
	UKismetMathLibrary_LinearColor_Gray_Params params;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.LinearColor_Green
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: ReturnValue	Type: struct FLinearColor	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FLinearColor UKismetMathLibrary::LinearColor_Green() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.LinearColor_Green");

	struct UKismetMathLibrary_LinearColor_Green_Params {
		struct FLinearColor ReturnValue;			//Offset: 0 | ElementSize: 16
	};
	UKismetMathLibrary_LinearColor_Green_Params params;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.LinearColor_IsNearEqual
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: struct FLinearColor	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: B	Type: struct FLinearColor	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: Tolerance	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: bool	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
bool UKismetMathLibrary::LinearColor_IsNearEqual(struct FLinearColor A, struct FLinearColor B, float Tolerance) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.LinearColor_IsNearEqual");

	struct UKismetMathLibrary_LinearColor_IsNearEqual_Params {
		struct FLinearColor A;			//Offset: 0 | ElementSize: 16
		struct FLinearColor B;			//Offset: 16 | ElementSize: 16
		float Tolerance;			//Offset: 32 | ElementSize: 4
		bool ReturnValue;			//Offset: 36 | ElementSize: 1
	};
	UKismetMathLibrary_LinearColor_IsNearEqual_Params params;
	params.A = A;
	params.B = B;
	params.Tolerance = Tolerance;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.LinearColor_Quantize
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: InColor	Type: struct FLinearColor	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FColor	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FColor UKismetMathLibrary::LinearColor_Quantize(struct FLinearColor InColor) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.LinearColor_Quantize");

	struct UKismetMathLibrary_LinearColor_Quantize_Params {
		struct FLinearColor InColor;			//Offset: 0 | ElementSize: 16
		struct FColor ReturnValue;			//Offset: 16 | ElementSize: 4
	};
	UKismetMathLibrary_LinearColor_Quantize_Params params;
	params.InColor = InColor;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.LinearColor_QuantizeRound
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: InColor	Type: struct FLinearColor	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FColor	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FColor UKismetMathLibrary::LinearColor_QuantizeRound(struct FLinearColor InColor) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.LinearColor_QuantizeRound");

	struct UKismetMathLibrary_LinearColor_QuantizeRound_Params {
		struct FLinearColor InColor;			//Offset: 0 | ElementSize: 16
		struct FColor ReturnValue;			//Offset: 16 | ElementSize: 4
	};
	UKismetMathLibrary_LinearColor_QuantizeRound_Params params;
	params.InColor = InColor;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.LinearColor_Red
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: ReturnValue	Type: struct FLinearColor	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FLinearColor UKismetMathLibrary::LinearColor_Red() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.LinearColor_Red");

	struct UKismetMathLibrary_LinearColor_Red_Params {
		struct FLinearColor ReturnValue;			//Offset: 0 | ElementSize: 16
	};
	UKismetMathLibrary_LinearColor_Red_Params params;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.LinearColor_Set
// Flags: Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable
// Params:
// Name: InOutColor	Type: struct FLinearColor	Flags: Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: InColor	Type: struct FLinearColor	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
void UKismetMathLibrary::LinearColor_Set(struct FLinearColor* InOutColor, struct FLinearColor InColor) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.LinearColor_Set");

	struct UKismetMathLibrary_LinearColor_Set_Params {
		struct FLinearColor InOutColor;			//Offset: 0 | ElementSize: 16
		struct FLinearColor InColor;			//Offset: 16 | ElementSize: 16
	};
	UKismetMathLibrary_LinearColor_Set_Params params;
	params.InColor = InColor;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	if (InOutColor != nullptr)
		*InOutColor = params.InOutColor;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.LinearColor_SetFromHSV
// Flags: Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable
// Params:
// Name: InOutColor	Type: struct FLinearColor	Flags: Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: H	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: S	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: V	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: A	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
void UKismetMathLibrary::LinearColor_SetFromHSV(struct FLinearColor* InOutColor, float H, float S, float V, float A) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.LinearColor_SetFromHSV");

	struct UKismetMathLibrary_LinearColor_SetFromHSV_Params {
		struct FLinearColor InOutColor;			//Offset: 0 | ElementSize: 16
		float H;			//Offset: 16 | ElementSize: 4
		float S;			//Offset: 20 | ElementSize: 4
		float V;			//Offset: 24 | ElementSize: 4
		float A;			//Offset: 28 | ElementSize: 4
	};
	UKismetMathLibrary_LinearColor_SetFromHSV_Params params;
	params.H = H;
	params.S = S;
	params.V = V;
	params.A = A;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	if (InOutColor != nullptr)
		*InOutColor = params.InOutColor;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.LinearColor_SetFromPow22
// Flags: Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable
// Params:
// Name: InOutColor	Type: struct FLinearColor	Flags: Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: InColor	Type: struct FColor	Flags: ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
void UKismetMathLibrary::LinearColor_SetFromPow22(struct FLinearColor* InOutColor, const struct FColor& InColor) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.LinearColor_SetFromPow22");

	struct UKismetMathLibrary_LinearColor_SetFromPow22_Params {
		struct FLinearColor InOutColor;			//Offset: 0 | ElementSize: 16
		struct FColor InColor;			//Offset: 16 | ElementSize: 4
	};
	UKismetMathLibrary_LinearColor_SetFromPow22_Params params;
	params.InColor = InColor;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	if (InOutColor != nullptr)
		*InOutColor = params.InOutColor;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.LinearColor_SetFromSRGB
// Flags: Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable
// Params:
// Name: InOutColor	Type: struct FLinearColor	Flags: Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: InSRGB	Type: struct FColor	Flags: ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
void UKismetMathLibrary::LinearColor_SetFromSRGB(struct FLinearColor* InOutColor, const struct FColor& InSRGB) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.LinearColor_SetFromSRGB");

	struct UKismetMathLibrary_LinearColor_SetFromSRGB_Params {
		struct FLinearColor InOutColor;			//Offset: 0 | ElementSize: 16
		struct FColor InSRGB;			//Offset: 16 | ElementSize: 4
	};
	UKismetMathLibrary_LinearColor_SetFromSRGB_Params params;
	params.InSRGB = InSRGB;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	if (InOutColor != nullptr)
		*InOutColor = params.InOutColor;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.LinearColor_SetRandomHue
// Flags: Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable
// Params:
// Name: InOutColor	Type: struct FLinearColor	Flags: Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
void UKismetMathLibrary::LinearColor_SetRandomHue(struct FLinearColor* InOutColor) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.LinearColor_SetRandomHue");

	struct UKismetMathLibrary_LinearColor_SetRandomHue_Params {
		struct FLinearColor InOutColor;			//Offset: 0 | ElementSize: 16
	};
	UKismetMathLibrary_LinearColor_SetRandomHue_Params params;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	if (InOutColor != nullptr)
		*InOutColor = params.InOutColor;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.LinearColor_SetRGBA
// Flags: Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable
// Params:
// Name: InOutColor	Type: struct FLinearColor	Flags: Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: R	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: G	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: B	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: A	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
void UKismetMathLibrary::LinearColor_SetRGBA(struct FLinearColor* InOutColor, float R, float G, float B, float A) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.LinearColor_SetRGBA");

	struct UKismetMathLibrary_LinearColor_SetRGBA_Params {
		struct FLinearColor InOutColor;			//Offset: 0 | ElementSize: 16
		float R;			//Offset: 16 | ElementSize: 4
		float G;			//Offset: 20 | ElementSize: 4
		float B;			//Offset: 24 | ElementSize: 4
		float A;			//Offset: 28 | ElementSize: 4
	};
	UKismetMathLibrary_LinearColor_SetRGBA_Params params;
	params.R = R;
	params.G = G;
	params.B = B;
	params.A = A;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	if (InOutColor != nullptr)
		*InOutColor = params.InOutColor;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.LinearColor_SetTemperature
// Flags: Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable
// Params:
// Name: InOutColor	Type: struct FLinearColor	Flags: Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: InTemperature	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
void UKismetMathLibrary::LinearColor_SetTemperature(struct FLinearColor* InOutColor, float InTemperature) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.LinearColor_SetTemperature");

	struct UKismetMathLibrary_LinearColor_SetTemperature_Params {
		struct FLinearColor InOutColor;			//Offset: 0 | ElementSize: 16
		float InTemperature;			//Offset: 16 | ElementSize: 4
	};
	UKismetMathLibrary_LinearColor_SetTemperature_Params params;
	params.InTemperature = InTemperature;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	if (InOutColor != nullptr)
		*InOutColor = params.InOutColor;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.LinearColor_ToNewOpacity
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: InColor	Type: struct FLinearColor	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: InOpacity	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FLinearColor	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FLinearColor UKismetMathLibrary::LinearColor_ToNewOpacity(struct FLinearColor InColor, float InOpacity) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.LinearColor_ToNewOpacity");

	struct UKismetMathLibrary_LinearColor_ToNewOpacity_Params {
		struct FLinearColor InColor;			//Offset: 0 | ElementSize: 16
		float InOpacity;			//Offset: 16 | ElementSize: 4
		struct FLinearColor ReturnValue;			//Offset: 20 | ElementSize: 16
	};
	UKismetMathLibrary_LinearColor_ToNewOpacity_Params params;
	params.InColor = InColor;
	params.InOpacity = InOpacity;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.LinearColor_ToRGBE
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: InLinearColor	Type: struct FLinearColor	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FColor	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FColor UKismetMathLibrary::LinearColor_ToRGBE(struct FLinearColor InLinearColor) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.LinearColor_ToRGBE");

	struct UKismetMathLibrary_LinearColor_ToRGBE_Params {
		struct FLinearColor InLinearColor;			//Offset: 0 | ElementSize: 16
		struct FColor ReturnValue;			//Offset: 16 | ElementSize: 4
	};
	UKismetMathLibrary_LinearColor_ToRGBE_Params params;
	params.InLinearColor = InLinearColor;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.LinearColor_Transparent
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: ReturnValue	Type: struct FLinearColor	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FLinearColor UKismetMathLibrary::LinearColor_Transparent() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.LinearColor_Transparent");

	struct UKismetMathLibrary_LinearColor_Transparent_Params {
		struct FLinearColor ReturnValue;			//Offset: 0 | ElementSize: 16
	};
	UKismetMathLibrary_LinearColor_Transparent_Params params;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.LinearColor_White
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: ReturnValue	Type: struct FLinearColor	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FLinearColor UKismetMathLibrary::LinearColor_White() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.LinearColor_White");

	struct UKismetMathLibrary_LinearColor_White_Params {
		struct FLinearColor ReturnValue;			//Offset: 0 | ElementSize: 16
	};
	UKismetMathLibrary_LinearColor_White_Params params;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.LinearColor_Yellow
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: ReturnValue	Type: struct FLinearColor	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FLinearColor UKismetMathLibrary::LinearColor_Yellow() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.LinearColor_Yellow");

	struct UKismetMathLibrary_LinearColor_Yellow_Params {
		struct FLinearColor ReturnValue;			//Offset: 0 | ElementSize: 16
	};
	UKismetMathLibrary_LinearColor_Yellow_Params params;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.LinearColorLerp
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: struct FLinearColor	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: B	Type: struct FLinearColor	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: Alpha	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FLinearColor	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FLinearColor UKismetMathLibrary::LinearColorLerp(struct FLinearColor A, struct FLinearColor B, float Alpha) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.LinearColorLerp");

	struct UKismetMathLibrary_LinearColorLerp_Params {
		struct FLinearColor A;			//Offset: 0 | ElementSize: 16
		struct FLinearColor B;			//Offset: 16 | ElementSize: 16
		float Alpha;			//Offset: 32 | ElementSize: 4
		struct FLinearColor ReturnValue;			//Offset: 36 | ElementSize: 16
	};
	UKismetMathLibrary_LinearColorLerp_Params params;
	params.A = A;
	params.B = B;
	params.Alpha = Alpha;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.LinearColorLerpUsingHSV
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: struct FLinearColor	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: B	Type: struct FLinearColor	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: Alpha	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FLinearColor	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FLinearColor UKismetMathLibrary::LinearColorLerpUsingHSV(struct FLinearColor A, struct FLinearColor B, float Alpha) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.LinearColorLerpUsingHSV");

	struct UKismetMathLibrary_LinearColorLerpUsingHSV_Params {
		struct FLinearColor A;			//Offset: 0 | ElementSize: 16
		struct FLinearColor B;			//Offset: 16 | ElementSize: 16
		float Alpha;			//Offset: 32 | ElementSize: 4
		struct FLinearColor ReturnValue;			//Offset: 36 | ElementSize: 16
	};
	UKismetMathLibrary_LinearColorLerpUsingHSV_Params params;
	params.A = A;
	params.B = B;
	params.Alpha = Alpha;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.LinePlaneIntersection
// Flags: Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: LineStart	Type: struct FVector	Flags: ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: LineEnd	Type: struct FVector	Flags: ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: APlane	Type: struct FPlane	Flags: ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: T	Type: float	Flags: Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: Intersection	Type: struct FVector	Flags: Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: bool	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
bool UKismetMathLibrary::LinePlaneIntersection(const struct FVector& LineStart, const struct FVector& LineEnd, const struct FPlane& APlane, float* T, struct FVector* Intersection) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.LinePlaneIntersection");

	struct UKismetMathLibrary_LinePlaneIntersection_Params {
		struct FVector LineStart;			//Offset: 0 | ElementSize: 12
		struct FVector LineEnd;			//Offset: 12 | ElementSize: 12
		struct FPlane APlane;			//Offset: 32 | ElementSize: 16
		float T;			//Offset: 48 | ElementSize: 4
		struct FVector Intersection;			//Offset: 52 | ElementSize: 12
		bool ReturnValue;			//Offset: 64 | ElementSize: 1
	};
	UKismetMathLibrary_LinePlaneIntersection_Params params;
	params.LineStart = LineStart;
	params.LineEnd = LineEnd;
	params.APlane = APlane;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	if (T != nullptr)
		*T = params.T;
	if (Intersection != nullptr)
		*Intersection = params.Intersection;
	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.LinePlaneIntersection_OriginNormal
// Flags: Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: LineStart	Type: struct FVector	Flags: ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: LineEnd	Type: struct FVector	Flags: ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: PlaneOrigin	Type: struct FVector	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: PlaneNormal	Type: struct FVector	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: T	Type: float	Flags: Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: Intersection	Type: struct FVector	Flags: Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: bool	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
bool UKismetMathLibrary::LinePlaneIntersection_OriginNormal(const struct FVector& LineStart, const struct FVector& LineEnd, struct FVector PlaneOrigin, struct FVector PlaneNormal, float* T, struct FVector* Intersection) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.LinePlaneIntersection_OriginNormal");

	struct UKismetMathLibrary_LinePlaneIntersection_OriginNormal_Params {
		struct FVector LineStart;			//Offset: 0 | ElementSize: 12
		struct FVector LineEnd;			//Offset: 12 | ElementSize: 12
		struct FVector PlaneOrigin;			//Offset: 24 | ElementSize: 12
		struct FVector PlaneNormal;			//Offset: 36 | ElementSize: 12
		float T;			//Offset: 48 | ElementSize: 4
		struct FVector Intersection;			//Offset: 52 | ElementSize: 12
		bool ReturnValue;			//Offset: 64 | ElementSize: 1
	};
	UKismetMathLibrary_LinePlaneIntersection_OriginNormal_Params params;
	params.LineStart = LineStart;
	params.LineEnd = LineEnd;
	params.PlaneOrigin = PlaneOrigin;
	params.PlaneNormal = PlaneNormal;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	if (T != nullptr)
		*T = params.T;
	if (Intersection != nullptr)
		*Intersection = params.Intersection;
	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Log
// Flags: Final, Native, Static, Public, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: Base	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: float	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
float UKismetMathLibrary::Log(float A, float Base) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Log");

	struct UKismetMathLibrary_Log_Params {
		float A;			//Offset: 0 | ElementSize: 4
		float Base;			//Offset: 4 | ElementSize: 4
		float ReturnValue;			//Offset: 8 | ElementSize: 4
	};
	UKismetMathLibrary_Log_Params params;
	params.A = A;
	params.Base = Base;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Loge
// Flags: Final, Native, Static, Public, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: float	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
float UKismetMathLibrary::Loge(float A) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Loge");

	struct UKismetMathLibrary_Loge_Params {
		float A;			//Offset: 0 | ElementSize: 4
		float ReturnValue;			//Offset: 4 | ElementSize: 4
	};
	UKismetMathLibrary_Loge_Params params;
	params.A = A;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.MakeBox
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: Min	Type: struct FVector	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: Max	Type: struct FVector	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FBox	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FBox UKismetMathLibrary::MakeBox(struct FVector Min, struct FVector Max) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.MakeBox");

	struct UKismetMathLibrary_MakeBox_Params {
		struct FVector Min;			//Offset: 0 | ElementSize: 12
		struct FVector Max;			//Offset: 12 | ElementSize: 12
		struct FBox ReturnValue;			//Offset: 24 | ElementSize: 28
	};
	UKismetMathLibrary_MakeBox_Params params;
	params.Min = Min;
	params.Max = Max;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.MakeBox2D
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: Min	Type: struct FVector2D	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: Max	Type: struct FVector2D	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FBox2D	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FBox2D UKismetMathLibrary::MakeBox2D(struct FVector2D Min, struct FVector2D Max) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.MakeBox2D");

	struct UKismetMathLibrary_MakeBox2D_Params {
		struct FVector2D Min;			//Offset: 0 | ElementSize: 8
		struct FVector2D Max;			//Offset: 8 | ElementSize: 8
		struct FBox2D ReturnValue;			//Offset: 16 | ElementSize: 20
	};
	UKismetMathLibrary_MakeBox2D_Params params;
	params.Min = Min;
	params.Max = Max;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.MakeColor
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: R	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: G	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: B	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: A	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FLinearColor	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FLinearColor UKismetMathLibrary::MakeColor(float R, float G, float B, float A) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.MakeColor");

	struct UKismetMathLibrary_MakeColor_Params {
		float R;			//Offset: 0 | ElementSize: 4
		float G;			//Offset: 4 | ElementSize: 4
		float B;			//Offset: 8 | ElementSize: 4
		float A;			//Offset: 12 | ElementSize: 4
		struct FLinearColor ReturnValue;			//Offset: 16 | ElementSize: 16
	};
	UKismetMathLibrary_MakeColor_Params params;
	params.R = R;
	params.G = G;
	params.B = B;
	params.A = A;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.MakeDateTime
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: Year	Type: int32_t	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: Month	Type: int32_t	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: Day	Type: int32_t	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: Hour	Type: int32_t	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: Minute	Type: int32_t	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: Second	Type: int32_t	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: Millisecond	Type: int32_t	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FDateTime	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FDateTime UKismetMathLibrary::MakeDateTime(int32_t Year, int32_t Month, int32_t Day, int32_t Hour, int32_t Minute, int32_t Second, int32_t Millisecond) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.MakeDateTime");

	struct UKismetMathLibrary_MakeDateTime_Params {
		int32_t Year;			//Offset: 0 | ElementSize: 4
		int32_t Month;			//Offset: 4 | ElementSize: 4
		int32_t Day;			//Offset: 8 | ElementSize: 4
		int32_t Hour;			//Offset: 12 | ElementSize: 4
		int32_t Minute;			//Offset: 16 | ElementSize: 4
		int32_t Second;			//Offset: 20 | ElementSize: 4
		int32_t Millisecond;			//Offset: 24 | ElementSize: 4
		struct FDateTime ReturnValue;			//Offset: 32 | ElementSize: 8
	};
	UKismetMathLibrary_MakeDateTime_Params params;
	params.Year = Year;
	params.Month = Month;
	params.Day = Day;
	params.Hour = Hour;
	params.Minute = Minute;
	params.Second = Second;
	params.Millisecond = Millisecond;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.MakeFrameRate
// Flags: Final, Native, Static, Public, BlueprintCallable, BlueprintPure
// Params:
// Name: Numerator	Type: int32_t	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: Denominator	Type: int32_t	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FFrameRate	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FFrameRate UKismetMathLibrary::MakeFrameRate(int32_t Numerator, int32_t Denominator) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.MakeFrameRate");

	struct UKismetMathLibrary_MakeFrameRate_Params {
		int32_t Numerator;			//Offset: 0 | ElementSize: 4
		int32_t Denominator;			//Offset: 4 | ElementSize: 4
		struct FFrameRate ReturnValue;			//Offset: 8 | ElementSize: 8
	};
	UKismetMathLibrary_MakeFrameRate_Params params;
	params.Numerator = Numerator;
	params.Denominator = Denominator;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.MakePlaneFromPointAndNormal
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: Point	Type: struct FVector	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: Normal	Type: struct FVector	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FPlane	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FPlane UKismetMathLibrary::MakePlaneFromPointAndNormal(struct FVector Point, struct FVector Normal) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.MakePlaneFromPointAndNormal");

	struct UKismetMathLibrary_MakePlaneFromPointAndNormal_Params {
		struct FVector Point;			//Offset: 0 | ElementSize: 12
		struct FVector Normal;			//Offset: 12 | ElementSize: 12
		struct FPlane ReturnValue;			//Offset: 32 | ElementSize: 16
	};
	UKismetMathLibrary_MakePlaneFromPointAndNormal_Params params;
	params.Point = Point;
	params.Normal = Normal;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.MakePulsatingValue
// Flags: Final, Native, Static, Public, BlueprintCallable, BlueprintPure
// Params:
// Name: InCurrentTime	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: InPulsesPerSecond	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: InPhase	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: float	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
float UKismetMathLibrary::MakePulsatingValue(float InCurrentTime, float InPulsesPerSecond, float InPhase) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.MakePulsatingValue");

	struct UKismetMathLibrary_MakePulsatingValue_Params {
		float InCurrentTime;			//Offset: 0 | ElementSize: 4
		float InPulsesPerSecond;			//Offset: 4 | ElementSize: 4
		float InPhase;			//Offset: 8 | ElementSize: 4
		float ReturnValue;			//Offset: 12 | ElementSize: 4
	};
	UKismetMathLibrary_MakePulsatingValue_Params params;
	params.InCurrentTime = InCurrentTime;
	params.InPulsesPerSecond = InPulsesPerSecond;
	params.InPhase = InPhase;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.MakeQualifiedFrameTime
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: Frame	Type: struct FFrameNumber	Flags: Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: FrameRate	Type: struct FFrameRate	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: SubFrame	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FQualifiedFrameTime	Flags: Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FQualifiedFrameTime UKismetMathLibrary::MakeQualifiedFrameTime(struct FFrameNumber Frame, struct FFrameRate FrameRate, float SubFrame) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.MakeQualifiedFrameTime");

	struct UKismetMathLibrary_MakeQualifiedFrameTime_Params {
		struct FFrameNumber Frame;			//Offset: 0 | ElementSize: 4
		struct FFrameRate FrameRate;			//Offset: 4 | ElementSize: 8
		float SubFrame;			//Offset: 12 | ElementSize: 4
		struct FQualifiedFrameTime ReturnValue;			//Offset: 16 | ElementSize: 16
	};
	UKismetMathLibrary_MakeQualifiedFrameTime_Params params;
	params.Frame = Frame;
	params.FrameRate = FrameRate;
	params.SubFrame = SubFrame;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.MakeRandomStream
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: InitialSeed	Type: int32_t	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FRandomStream	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FRandomStream UKismetMathLibrary::MakeRandomStream(int32_t InitialSeed) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.MakeRandomStream");

	struct UKismetMathLibrary_MakeRandomStream_Params {
		int32_t InitialSeed;			//Offset: 0 | ElementSize: 4
		struct FRandomStream ReturnValue;			//Offset: 4 | ElementSize: 8
	};
	UKismetMathLibrary_MakeRandomStream_Params params;
	params.InitialSeed = InitialSeed;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.MakeRelativeTransform
// Flags: Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: struct FTransform	Flags: ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
// Name: RelativeTo	Type: struct FTransform	Flags: ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FTransform	Flags: Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FTransform UKismetMathLibrary::MakeRelativeTransform(const struct FTransform& A, const struct FTransform& RelativeTo) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.MakeRelativeTransform");

	struct UKismetMathLibrary_MakeRelativeTransform_Params {
		struct FTransform A;			//Offset: 0 | ElementSize: 48
		struct FTransform RelativeTo;			//Offset: 48 | ElementSize: 48
		struct FTransform ReturnValue;			//Offset: 96 | ElementSize: 48
	};
	UKismetMathLibrary_MakeRelativeTransform_Params params;
	params.A = A;
	params.RelativeTo = RelativeTo;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.MakeRotationFromAxes
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: Forward	Type: struct FVector	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: Right	Type: struct FVector	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: Up	Type: struct FVector	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FRotator	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FRotator UKismetMathLibrary::MakeRotationFromAxes(struct FVector Forward, struct FVector Right, struct FVector Up) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.MakeRotationFromAxes");

	struct UKismetMathLibrary_MakeRotationFromAxes_Params {
		struct FVector Forward;			//Offset: 0 | ElementSize: 12
		struct FVector Right;			//Offset: 12 | ElementSize: 12
		struct FVector Up;			//Offset: 24 | ElementSize: 12
		struct FRotator ReturnValue;			//Offset: 36 | ElementSize: 12
	};
	UKismetMathLibrary_MakeRotationFromAxes_Params params;
	params.Forward = Forward;
	params.Right = Right;
	params.Up = Up;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.MakeRotator
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: Roll	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: Pitch	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: Yaw	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FRotator	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FRotator UKismetMathLibrary::MakeRotator(float Roll, float Pitch, float Yaw) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.MakeRotator");

	struct UKismetMathLibrary_MakeRotator_Params {
		float Roll;			//Offset: 0 | ElementSize: 4
		float Pitch;			//Offset: 4 | ElementSize: 4
		float Yaw;			//Offset: 8 | ElementSize: 4
		struct FRotator ReturnValue;			//Offset: 12 | ElementSize: 12
	};
	UKismetMathLibrary_MakeRotator_Params params;
	params.Roll = Roll;
	params.Pitch = Pitch;
	params.Yaw = Yaw;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.MakeRotFromX
// Flags: Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: X	Type: struct FVector	Flags: ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FRotator	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FRotator UKismetMathLibrary::MakeRotFromX(const struct FVector& X) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.MakeRotFromX");

	struct UKismetMathLibrary_MakeRotFromX_Params {
		struct FVector X;			//Offset: 0 | ElementSize: 12
		struct FRotator ReturnValue;			//Offset: 12 | ElementSize: 12
	};
	UKismetMathLibrary_MakeRotFromX_Params params;
	params.X = X;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.MakeRotFromXY
// Flags: Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: X	Type: struct FVector	Flags: ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: Y	Type: struct FVector	Flags: ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FRotator	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FRotator UKismetMathLibrary::MakeRotFromXY(const struct FVector& X, const struct FVector& Y) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.MakeRotFromXY");

	struct UKismetMathLibrary_MakeRotFromXY_Params {
		struct FVector X;			//Offset: 0 | ElementSize: 12
		struct FVector Y;			//Offset: 12 | ElementSize: 12
		struct FRotator ReturnValue;			//Offset: 24 | ElementSize: 12
	};
	UKismetMathLibrary_MakeRotFromXY_Params params;
	params.X = X;
	params.Y = Y;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.MakeRotFromXZ
// Flags: Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: X	Type: struct FVector	Flags: ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: Z	Type: struct FVector	Flags: ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FRotator	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FRotator UKismetMathLibrary::MakeRotFromXZ(const struct FVector& X, const struct FVector& Z) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.MakeRotFromXZ");

	struct UKismetMathLibrary_MakeRotFromXZ_Params {
		struct FVector X;			//Offset: 0 | ElementSize: 12
		struct FVector Z;			//Offset: 12 | ElementSize: 12
		struct FRotator ReturnValue;			//Offset: 24 | ElementSize: 12
	};
	UKismetMathLibrary_MakeRotFromXZ_Params params;
	params.X = X;
	params.Z = Z;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.MakeRotFromY
// Flags: Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: Y	Type: struct FVector	Flags: ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FRotator	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FRotator UKismetMathLibrary::MakeRotFromY(const struct FVector& Y) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.MakeRotFromY");

	struct UKismetMathLibrary_MakeRotFromY_Params {
		struct FVector Y;			//Offset: 0 | ElementSize: 12
		struct FRotator ReturnValue;			//Offset: 12 | ElementSize: 12
	};
	UKismetMathLibrary_MakeRotFromY_Params params;
	params.Y = Y;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.MakeRotFromYX
// Flags: Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: Y	Type: struct FVector	Flags: ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: X	Type: struct FVector	Flags: ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FRotator	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FRotator UKismetMathLibrary::MakeRotFromYX(const struct FVector& Y, const struct FVector& X) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.MakeRotFromYX");

	struct UKismetMathLibrary_MakeRotFromYX_Params {
		struct FVector Y;			//Offset: 0 | ElementSize: 12
		struct FVector X;			//Offset: 12 | ElementSize: 12
		struct FRotator ReturnValue;			//Offset: 24 | ElementSize: 12
	};
	UKismetMathLibrary_MakeRotFromYX_Params params;
	params.Y = Y;
	params.X = X;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.MakeRotFromYZ
// Flags: Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: Y	Type: struct FVector	Flags: ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: Z	Type: struct FVector	Flags: ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FRotator	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FRotator UKismetMathLibrary::MakeRotFromYZ(const struct FVector& Y, const struct FVector& Z) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.MakeRotFromYZ");

	struct UKismetMathLibrary_MakeRotFromYZ_Params {
		struct FVector Y;			//Offset: 0 | ElementSize: 12
		struct FVector Z;			//Offset: 12 | ElementSize: 12
		struct FRotator ReturnValue;			//Offset: 24 | ElementSize: 12
	};
	UKismetMathLibrary_MakeRotFromYZ_Params params;
	params.Y = Y;
	params.Z = Z;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.MakeRotFromZ
// Flags: Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: Z	Type: struct FVector	Flags: ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FRotator	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FRotator UKismetMathLibrary::MakeRotFromZ(const struct FVector& Z) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.MakeRotFromZ");

	struct UKismetMathLibrary_MakeRotFromZ_Params {
		struct FVector Z;			//Offset: 0 | ElementSize: 12
		struct FRotator ReturnValue;			//Offset: 12 | ElementSize: 12
	};
	UKismetMathLibrary_MakeRotFromZ_Params params;
	params.Z = Z;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.MakeRotFromZX
// Flags: Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: Z	Type: struct FVector	Flags: ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: X	Type: struct FVector	Flags: ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FRotator	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FRotator UKismetMathLibrary::MakeRotFromZX(const struct FVector& Z, const struct FVector& X) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.MakeRotFromZX");

	struct UKismetMathLibrary_MakeRotFromZX_Params {
		struct FVector Z;			//Offset: 0 | ElementSize: 12
		struct FVector X;			//Offset: 12 | ElementSize: 12
		struct FRotator ReturnValue;			//Offset: 24 | ElementSize: 12
	};
	UKismetMathLibrary_MakeRotFromZX_Params params;
	params.Z = Z;
	params.X = X;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.MakeRotFromZY
// Flags: Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: Z	Type: struct FVector	Flags: ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: Y	Type: struct FVector	Flags: ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FRotator	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FRotator UKismetMathLibrary::MakeRotFromZY(const struct FVector& Z, const struct FVector& Y) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.MakeRotFromZY");

	struct UKismetMathLibrary_MakeRotFromZY_Params {
		struct FVector Z;			//Offset: 0 | ElementSize: 12
		struct FVector Y;			//Offset: 12 | ElementSize: 12
		struct FRotator ReturnValue;			//Offset: 24 | ElementSize: 12
	};
	UKismetMathLibrary_MakeRotFromZY_Params params;
	params.Z = Z;
	params.Y = Y;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.MakeTimespan
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: Days	Type: int32_t	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: Hours	Type: int32_t	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: Minutes	Type: int32_t	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: Seconds	Type: int32_t	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: Milliseconds	Type: int32_t	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FTimespan	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FTimespan UKismetMathLibrary::MakeTimespan(int32_t Days, int32_t Hours, int32_t Minutes, int32_t Seconds, int32_t Milliseconds) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.MakeTimespan");

	struct UKismetMathLibrary_MakeTimespan_Params {
		int32_t Days;			//Offset: 0 | ElementSize: 4
		int32_t Hours;			//Offset: 4 | ElementSize: 4
		int32_t Minutes;			//Offset: 8 | ElementSize: 4
		int32_t Seconds;			//Offset: 12 | ElementSize: 4
		int32_t Milliseconds;			//Offset: 16 | ElementSize: 4
		struct FTimespan ReturnValue;			//Offset: 24 | ElementSize: 8
	};
	UKismetMathLibrary_MakeTimespan_Params params;
	params.Days = Days;
	params.Hours = Hours;
	params.Minutes = Minutes;
	params.Seconds = Seconds;
	params.Milliseconds = Milliseconds;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.MakeTimespan2
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: Days	Type: int32_t	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: Hours	Type: int32_t	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: Minutes	Type: int32_t	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: Seconds	Type: int32_t	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: FractionNano	Type: int32_t	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FTimespan	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FTimespan UKismetMathLibrary::MakeTimespan2(int32_t Days, int32_t Hours, int32_t Minutes, int32_t Seconds, int32_t FractionNano) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.MakeTimespan2");

	struct UKismetMathLibrary_MakeTimespan2_Params {
		int32_t Days;			//Offset: 0 | ElementSize: 4
		int32_t Hours;			//Offset: 4 | ElementSize: 4
		int32_t Minutes;			//Offset: 8 | ElementSize: 4
		int32_t Seconds;			//Offset: 12 | ElementSize: 4
		int32_t FractionNano;			//Offset: 16 | ElementSize: 4
		struct FTimespan ReturnValue;			//Offset: 24 | ElementSize: 8
	};
	UKismetMathLibrary_MakeTimespan2_Params params;
	params.Days = Days;
	params.Hours = Hours;
	params.Minutes = Minutes;
	params.Seconds = Seconds;
	params.FractionNano = FractionNano;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.MakeTransform
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: Location	Type: struct FVector	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: Rotation	Type: struct FRotator	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
// Name: Scale	Type: struct FVector	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FTransform	Flags: Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FTransform UKismetMathLibrary::MakeTransform(struct FVector Location, struct FRotator Rotation, struct FVector Scale) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.MakeTransform");

	struct UKismetMathLibrary_MakeTransform_Params {
		struct FVector Location;			//Offset: 0 | ElementSize: 12
		struct FRotator Rotation;			//Offset: 12 | ElementSize: 12
		struct FVector Scale;			//Offset: 24 | ElementSize: 12
		struct FTransform ReturnValue;			//Offset: 48 | ElementSize: 48
	};
	UKismetMathLibrary_MakeTransform_Params params;
	params.Location = Location;
	params.Rotation = Rotation;
	params.Scale = Scale;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.MakeVector
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: X	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: Y	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: Z	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FVector	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FVector UKismetMathLibrary::MakeVector(float X, float Y, float Z) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.MakeVector");

	struct UKismetMathLibrary_MakeVector_Params {
		float X;			//Offset: 0 | ElementSize: 4
		float Y;			//Offset: 4 | ElementSize: 4
		float Z;			//Offset: 8 | ElementSize: 4
		struct FVector ReturnValue;			//Offset: 12 | ElementSize: 12
	};
	UKismetMathLibrary_MakeVector_Params params;
	params.X = X;
	params.Y = Y;
	params.Z = Z;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.MakeVector2D
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: X	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: Y	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FVector2D	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FVector2D UKismetMathLibrary::MakeVector2D(float X, float Y) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.MakeVector2D");

	struct UKismetMathLibrary_MakeVector2D_Params {
		float X;			//Offset: 0 | ElementSize: 4
		float Y;			//Offset: 4 | ElementSize: 4
		struct FVector2D ReturnValue;			//Offset: 8 | ElementSize: 8
	};
	UKismetMathLibrary_MakeVector2D_Params params;
	params.X = X;
	params.Y = Y;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.MakeVector4
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: X	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: Y	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: Z	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: W	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FVector4	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FVector4 UKismetMathLibrary::MakeVector4(float X, float Y, float Z, float W) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.MakeVector4");

	struct UKismetMathLibrary_MakeVector4_Params {
		float X;			//Offset: 0 | ElementSize: 4
		float Y;			//Offset: 4 | ElementSize: 4
		float Z;			//Offset: 8 | ElementSize: 4
		float W;			//Offset: 12 | ElementSize: 4
		struct FVector4 ReturnValue;			//Offset: 16 | ElementSize: 16
	};
	UKismetMathLibrary_MakeVector4_Params params;
	params.X = X;
	params.Y = Y;
	params.Z = Z;
	params.W = W;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.MapRangeClamped
// Flags: Final, Native, Static, Public, BlueprintCallable, BlueprintPure
// Params:
// Name: Value	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: InRangeA	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: InRangeB	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: OutRangeA	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: OutRangeB	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: float	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
float UKismetMathLibrary::MapRangeClamped(float Value, float InRangeA, float InRangeB, float OutRangeA, float OutRangeB) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.MapRangeClamped");

	struct UKismetMathLibrary_MapRangeClamped_Params {
		float Value;			//Offset: 0 | ElementSize: 4
		float InRangeA;			//Offset: 4 | ElementSize: 4
		float InRangeB;			//Offset: 8 | ElementSize: 4
		float OutRangeA;			//Offset: 12 | ElementSize: 4
		float OutRangeB;			//Offset: 16 | ElementSize: 4
		float ReturnValue;			//Offset: 20 | ElementSize: 4
	};
	UKismetMathLibrary_MapRangeClamped_Params params;
	params.Value = Value;
	params.InRangeA = InRangeA;
	params.InRangeB = InRangeB;
	params.OutRangeA = OutRangeA;
	params.OutRangeB = OutRangeB;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.MapRangeUnclamped
// Flags: Final, Native, Static, Public, BlueprintCallable, BlueprintPure
// Params:
// Name: Value	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: InRangeA	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: InRangeB	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: OutRangeA	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: OutRangeB	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: float	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
float UKismetMathLibrary::MapRangeUnclamped(float Value, float InRangeA, float InRangeB, float OutRangeA, float OutRangeB) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.MapRangeUnclamped");

	struct UKismetMathLibrary_MapRangeUnclamped_Params {
		float Value;			//Offset: 0 | ElementSize: 4
		float InRangeA;			//Offset: 4 | ElementSize: 4
		float InRangeB;			//Offset: 8 | ElementSize: 4
		float OutRangeA;			//Offset: 12 | ElementSize: 4
		float OutRangeB;			//Offset: 16 | ElementSize: 4
		float ReturnValue;			//Offset: 20 | ElementSize: 4
	};
	UKismetMathLibrary_MapRangeUnclamped_Params params;
	params.Value = Value;
	params.InRangeA = InRangeA;
	params.InRangeB = InRangeB;
	params.OutRangeA = OutRangeA;
	params.OutRangeB = OutRangeB;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Matrix_ApplyScale
// Flags: Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: M	Type: struct FMatrix	Flags: ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
// Name: Scale	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FMatrix	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FMatrix UKismetMathLibrary::Matrix_ApplyScale(const struct FMatrix& M, float Scale) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Matrix_ApplyScale");

	struct UKismetMathLibrary_Matrix_ApplyScale_Params {
		struct FMatrix M;			//Offset: 0 | ElementSize: 64
		float Scale;			//Offset: 64 | ElementSize: 4
		struct FMatrix ReturnValue;			//Offset: 80 | ElementSize: 64
	};
	UKismetMathLibrary_Matrix_ApplyScale_Params params;
	params.M = M;
	params.Scale = Scale;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Matrix_ConcatenateTranslation
// Flags: Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: M	Type: struct FMatrix	Flags: ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
// Name: Translation	Type: struct FVector	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FMatrix	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FMatrix UKismetMathLibrary::Matrix_ConcatenateTranslation(const struct FMatrix& M, struct FVector Translation) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Matrix_ConcatenateTranslation");

	struct UKismetMathLibrary_Matrix_ConcatenateTranslation_Params {
		struct FMatrix M;			//Offset: 0 | ElementSize: 64
		struct FVector Translation;			//Offset: 64 | ElementSize: 12
		struct FMatrix ReturnValue;			//Offset: 80 | ElementSize: 64
	};
	UKismetMathLibrary_Matrix_ConcatenateTranslation_Params params;
	params.M = M;
	params.Translation = Translation;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Matrix_ContainsNaN
// Flags: Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: M	Type: struct FMatrix	Flags: ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: bool	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
bool UKismetMathLibrary::Matrix_ContainsNaN(const struct FMatrix& M) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Matrix_ContainsNaN");

	struct UKismetMathLibrary_Matrix_ContainsNaN_Params {
		struct FMatrix M;			//Offset: 0 | ElementSize: 64
		bool ReturnValue;			//Offset: 64 | ElementSize: 1
	};
	UKismetMathLibrary_Matrix_ContainsNaN_Params params;
	params.M = M;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Matrix_GetColumn
// Flags: Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: M	Type: struct FMatrix	Flags: ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
// Name: Column	Type: TEnumAsByte<EMatrixColumns>	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FVector	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FVector UKismetMathLibrary::Matrix_GetColumn(const struct FMatrix& M, TEnumAsByte<EMatrixColumns> Column) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Matrix_GetColumn");

	struct UKismetMathLibrary_Matrix_GetColumn_Params {
		struct FMatrix M;			//Offset: 0 | ElementSize: 64
		TEnumAsByte<EMatrixColumns> Column;			//Offset: 64 | ElementSize: 1
		struct FVector ReturnValue;			//Offset: 68 | ElementSize: 12
	};
	UKismetMathLibrary_Matrix_GetColumn_Params params;
	params.M = M;
	params.Column = Column;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Matrix_GetDeterminant
// Flags: Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: M	Type: struct FMatrix	Flags: ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: float	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
float UKismetMathLibrary::Matrix_GetDeterminant(const struct FMatrix& M) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Matrix_GetDeterminant");

	struct UKismetMathLibrary_Matrix_GetDeterminant_Params {
		struct FMatrix M;			//Offset: 0 | ElementSize: 64
		float ReturnValue;			//Offset: 64 | ElementSize: 4
	};
	UKismetMathLibrary_Matrix_GetDeterminant_Params params;
	params.M = M;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Matrix_GetFrustumBottomPlane
// Flags: Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: M	Type: struct FMatrix	Flags: ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
// Name: OutPlane	Type: struct FPlane	Flags: Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: bool	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
bool UKismetMathLibrary::Matrix_GetFrustumBottomPlane(const struct FMatrix& M, struct FPlane* OutPlane) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Matrix_GetFrustumBottomPlane");

	struct UKismetMathLibrary_Matrix_GetFrustumBottomPlane_Params {
		struct FMatrix M;			//Offset: 0 | ElementSize: 64
		struct FPlane OutPlane;			//Offset: 64 | ElementSize: 16
		bool ReturnValue;			//Offset: 80 | ElementSize: 1
	};
	UKismetMathLibrary_Matrix_GetFrustumBottomPlane_Params params;
	params.M = M;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	if (OutPlane != nullptr)
		*OutPlane = params.OutPlane;
	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Matrix_GetFrustumFarPlane
// Flags: Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: M	Type: struct FMatrix	Flags: ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
// Name: OutPlane	Type: struct FPlane	Flags: Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: bool	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
bool UKismetMathLibrary::Matrix_GetFrustumFarPlane(const struct FMatrix& M, struct FPlane* OutPlane) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Matrix_GetFrustumFarPlane");

	struct UKismetMathLibrary_Matrix_GetFrustumFarPlane_Params {
		struct FMatrix M;			//Offset: 0 | ElementSize: 64
		struct FPlane OutPlane;			//Offset: 64 | ElementSize: 16
		bool ReturnValue;			//Offset: 80 | ElementSize: 1
	};
	UKismetMathLibrary_Matrix_GetFrustumFarPlane_Params params;
	params.M = M;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	if (OutPlane != nullptr)
		*OutPlane = params.OutPlane;
	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Matrix_GetFrustumLeftPlane
// Flags: Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: M	Type: struct FMatrix	Flags: ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
// Name: OutPlane	Type: struct FPlane	Flags: Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: bool	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
bool UKismetMathLibrary::Matrix_GetFrustumLeftPlane(const struct FMatrix& M, struct FPlane* OutPlane) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Matrix_GetFrustumLeftPlane");

	struct UKismetMathLibrary_Matrix_GetFrustumLeftPlane_Params {
		struct FMatrix M;			//Offset: 0 | ElementSize: 64
		struct FPlane OutPlane;			//Offset: 64 | ElementSize: 16
		bool ReturnValue;			//Offset: 80 | ElementSize: 1
	};
	UKismetMathLibrary_Matrix_GetFrustumLeftPlane_Params params;
	params.M = M;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	if (OutPlane != nullptr)
		*OutPlane = params.OutPlane;
	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Matrix_GetFrustumNearPlane
// Flags: Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: M	Type: struct FMatrix	Flags: ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
// Name: OutPlane	Type: struct FPlane	Flags: Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: bool	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
bool UKismetMathLibrary::Matrix_GetFrustumNearPlane(const struct FMatrix& M, struct FPlane* OutPlane) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Matrix_GetFrustumNearPlane");

	struct UKismetMathLibrary_Matrix_GetFrustumNearPlane_Params {
		struct FMatrix M;			//Offset: 0 | ElementSize: 64
		struct FPlane OutPlane;			//Offset: 64 | ElementSize: 16
		bool ReturnValue;			//Offset: 80 | ElementSize: 1
	};
	UKismetMathLibrary_Matrix_GetFrustumNearPlane_Params params;
	params.M = M;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	if (OutPlane != nullptr)
		*OutPlane = params.OutPlane;
	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Matrix_GetFrustumRightPlane
// Flags: Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: M	Type: struct FMatrix	Flags: ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
// Name: OutPlane	Type: struct FPlane	Flags: Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: bool	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
bool UKismetMathLibrary::Matrix_GetFrustumRightPlane(const struct FMatrix& M, struct FPlane* OutPlane) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Matrix_GetFrustumRightPlane");

	struct UKismetMathLibrary_Matrix_GetFrustumRightPlane_Params {
		struct FMatrix M;			//Offset: 0 | ElementSize: 64
		struct FPlane OutPlane;			//Offset: 64 | ElementSize: 16
		bool ReturnValue;			//Offset: 80 | ElementSize: 1
	};
	UKismetMathLibrary_Matrix_GetFrustumRightPlane_Params params;
	params.M = M;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	if (OutPlane != nullptr)
		*OutPlane = params.OutPlane;
	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Matrix_GetFrustumTopPlane
// Flags: Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: M	Type: struct FMatrix	Flags: ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
// Name: OutPlane	Type: struct FPlane	Flags: Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: bool	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
bool UKismetMathLibrary::Matrix_GetFrustumTopPlane(const struct FMatrix& M, struct FPlane* OutPlane) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Matrix_GetFrustumTopPlane");

	struct UKismetMathLibrary_Matrix_GetFrustumTopPlane_Params {
		struct FMatrix M;			//Offset: 0 | ElementSize: 64
		struct FPlane OutPlane;			//Offset: 64 | ElementSize: 16
		bool ReturnValue;			//Offset: 80 | ElementSize: 1
	};
	UKismetMathLibrary_Matrix_GetFrustumTopPlane_Params params;
	params.M = M;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	if (OutPlane != nullptr)
		*OutPlane = params.OutPlane;
	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Matrix_GetInverse
// Flags: Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: M	Type: struct FMatrix	Flags: ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FMatrix	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FMatrix UKismetMathLibrary::Matrix_GetInverse(const struct FMatrix& M) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Matrix_GetInverse");

	struct UKismetMathLibrary_Matrix_GetInverse_Params {
		struct FMatrix M;			//Offset: 0 | ElementSize: 64
		struct FMatrix ReturnValue;			//Offset: 64 | ElementSize: 64
	};
	UKismetMathLibrary_Matrix_GetInverse_Params params;
	params.M = M;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Matrix_GetMatrixWithoutScale
// Flags: Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: M	Type: struct FMatrix	Flags: ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
// Name: Tolerance	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FMatrix	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FMatrix UKismetMathLibrary::Matrix_GetMatrixWithoutScale(const struct FMatrix& M, float Tolerance) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Matrix_GetMatrixWithoutScale");

	struct UKismetMathLibrary_Matrix_GetMatrixWithoutScale_Params {
		struct FMatrix M;			//Offset: 0 | ElementSize: 64
		float Tolerance;			//Offset: 64 | ElementSize: 4
		struct FMatrix ReturnValue;			//Offset: 80 | ElementSize: 64
	};
	UKismetMathLibrary_Matrix_GetMatrixWithoutScale_Params params;
	params.M = M;
	params.Tolerance = Tolerance;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Matrix_GetMaximumAxisScale
// Flags: Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: M	Type: struct FMatrix	Flags: ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: float	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
float UKismetMathLibrary::Matrix_GetMaximumAxisScale(const struct FMatrix& M) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Matrix_GetMaximumAxisScale");

	struct UKismetMathLibrary_Matrix_GetMaximumAxisScale_Params {
		struct FMatrix M;			//Offset: 0 | ElementSize: 64
		float ReturnValue;			//Offset: 64 | ElementSize: 4
	};
	UKismetMathLibrary_Matrix_GetMaximumAxisScale_Params params;
	params.M = M;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Matrix_GetOrigin
// Flags: Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: InMatrix	Type: struct FMatrix	Flags: ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FVector	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FVector UKismetMathLibrary::Matrix_GetOrigin(const struct FMatrix& InMatrix) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Matrix_GetOrigin");

	struct UKismetMathLibrary_Matrix_GetOrigin_Params {
		struct FMatrix InMatrix;			//Offset: 0 | ElementSize: 64
		struct FVector ReturnValue;			//Offset: 64 | ElementSize: 12
	};
	UKismetMathLibrary_Matrix_GetOrigin_Params params;
	params.InMatrix = InMatrix;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Matrix_GetRotator
// Flags: Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: M	Type: struct FMatrix	Flags: ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FRotator	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FRotator UKismetMathLibrary::Matrix_GetRotator(const struct FMatrix& M) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Matrix_GetRotator");

	struct UKismetMathLibrary_Matrix_GetRotator_Params {
		struct FMatrix M;			//Offset: 0 | ElementSize: 64
		struct FRotator ReturnValue;			//Offset: 64 | ElementSize: 12
	};
	UKismetMathLibrary_Matrix_GetRotator_Params params;
	params.M = M;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Matrix_GetRotDeterminant
// Flags: Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: M	Type: struct FMatrix	Flags: ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: float	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
float UKismetMathLibrary::Matrix_GetRotDeterminant(const struct FMatrix& M) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Matrix_GetRotDeterminant");

	struct UKismetMathLibrary_Matrix_GetRotDeterminant_Params {
		struct FMatrix M;			//Offset: 0 | ElementSize: 64
		float ReturnValue;			//Offset: 64 | ElementSize: 4
	};
	UKismetMathLibrary_Matrix_GetRotDeterminant_Params params;
	params.M = M;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Matrix_GetScaledAxes
// Flags: Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: M	Type: struct FMatrix	Flags: ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
// Name: X	Type: struct FVector	Flags: Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: Y	Type: struct FVector	Flags: Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: Z	Type: struct FVector	Flags: Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
void UKismetMathLibrary::Matrix_GetScaledAxes(const struct FMatrix& M, struct FVector* X, struct FVector* Y, struct FVector* Z) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Matrix_GetScaledAxes");

	struct UKismetMathLibrary_Matrix_GetScaledAxes_Params {
		struct FMatrix M;			//Offset: 0 | ElementSize: 64
		struct FVector X;			//Offset: 64 | ElementSize: 12
		struct FVector Y;			//Offset: 76 | ElementSize: 12
		struct FVector Z;			//Offset: 88 | ElementSize: 12
	};
	UKismetMathLibrary_Matrix_GetScaledAxes_Params params;
	params.M = M;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	if (X != nullptr)
		*X = params.X;
	if (Y != nullptr)
		*Y = params.Y;
	if (Z != nullptr)
		*Z = params.Z;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Matrix_GetScaledAxis
// Flags: Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: M	Type: struct FMatrix	Flags: ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
// Name: Axis	Type: TEnumAsByte<EAxis>	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FVector	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FVector UKismetMathLibrary::Matrix_GetScaledAxis(const struct FMatrix& M, TEnumAsByte<EAxis> Axis) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Matrix_GetScaledAxis");

	struct UKismetMathLibrary_Matrix_GetScaledAxis_Params {
		struct FMatrix M;			//Offset: 0 | ElementSize: 64
		TEnumAsByte<EAxis> Axis;			//Offset: 64 | ElementSize: 1
		struct FVector ReturnValue;			//Offset: 68 | ElementSize: 12
	};
	UKismetMathLibrary_Matrix_GetScaledAxis_Params params;
	params.M = M;
	params.Axis = Axis;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Matrix_GetScaleVector
// Flags: Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: M	Type: struct FMatrix	Flags: ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
// Name: Tolerance	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FVector	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FVector UKismetMathLibrary::Matrix_GetScaleVector(const struct FMatrix& M, float Tolerance) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Matrix_GetScaleVector");

	struct UKismetMathLibrary_Matrix_GetScaleVector_Params {
		struct FMatrix M;			//Offset: 0 | ElementSize: 64
		float Tolerance;			//Offset: 64 | ElementSize: 4
		struct FVector ReturnValue;			//Offset: 68 | ElementSize: 12
	};
	UKismetMathLibrary_Matrix_GetScaleVector_Params params;
	params.M = M;
	params.Tolerance = Tolerance;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Matrix_GetTransposeAdjoint
// Flags: Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: M	Type: struct FMatrix	Flags: ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FMatrix	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FMatrix UKismetMathLibrary::Matrix_GetTransposeAdjoint(const struct FMatrix& M) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Matrix_GetTransposeAdjoint");

	struct UKismetMathLibrary_Matrix_GetTransposeAdjoint_Params {
		struct FMatrix M;			//Offset: 0 | ElementSize: 64
		struct FMatrix ReturnValue;			//Offset: 64 | ElementSize: 64
	};
	UKismetMathLibrary_Matrix_GetTransposeAdjoint_Params params;
	params.M = M;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Matrix_GetTransposed
// Flags: Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: M	Type: struct FMatrix	Flags: ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FMatrix	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FMatrix UKismetMathLibrary::Matrix_GetTransposed(const struct FMatrix& M) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Matrix_GetTransposed");

	struct UKismetMathLibrary_Matrix_GetTransposed_Params {
		struct FMatrix M;			//Offset: 0 | ElementSize: 64
		struct FMatrix ReturnValue;			//Offset: 64 | ElementSize: 64
	};
	UKismetMathLibrary_Matrix_GetTransposed_Params params;
	params.M = M;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Matrix_GetUnitAxes
// Flags: Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: M	Type: struct FMatrix	Flags: ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
// Name: X	Type: struct FVector	Flags: Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: Y	Type: struct FVector	Flags: Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: Z	Type: struct FVector	Flags: Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
void UKismetMathLibrary::Matrix_GetUnitAxes(const struct FMatrix& M, struct FVector* X, struct FVector* Y, struct FVector* Z) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Matrix_GetUnitAxes");

	struct UKismetMathLibrary_Matrix_GetUnitAxes_Params {
		struct FMatrix M;			//Offset: 0 | ElementSize: 64
		struct FVector X;			//Offset: 64 | ElementSize: 12
		struct FVector Y;			//Offset: 76 | ElementSize: 12
		struct FVector Z;			//Offset: 88 | ElementSize: 12
	};
	UKismetMathLibrary_Matrix_GetUnitAxes_Params params;
	params.M = M;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	if (X != nullptr)
		*X = params.X;
	if (Y != nullptr)
		*Y = params.Y;
	if (Z != nullptr)
		*Z = params.Z;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Matrix_GetUnitAxis
// Flags: Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: M	Type: struct FMatrix	Flags: ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
// Name: Axis	Type: TEnumAsByte<EAxis>	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FVector	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FVector UKismetMathLibrary::Matrix_GetUnitAxis(const struct FMatrix& M, TEnumAsByte<EAxis> Axis) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Matrix_GetUnitAxis");

	struct UKismetMathLibrary_Matrix_GetUnitAxis_Params {
		struct FMatrix M;			//Offset: 0 | ElementSize: 64
		TEnumAsByte<EAxis> Axis;			//Offset: 64 | ElementSize: 1
		struct FVector ReturnValue;			//Offset: 68 | ElementSize: 12
	};
	UKismetMathLibrary_Matrix_GetUnitAxis_Params params;
	params.M = M;
	params.Axis = Axis;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Matrix_Identity
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: ReturnValue	Type: struct FMatrix	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FMatrix UKismetMathLibrary::Matrix_Identity() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Matrix_Identity");

	struct UKismetMathLibrary_Matrix_Identity_Params {
		struct FMatrix ReturnValue;			//Offset: 0 | ElementSize: 64
	};
	UKismetMathLibrary_Matrix_Identity_Params params;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Matrix_InverseTransformPosition
// Flags: Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: M	Type: struct FMatrix	Flags: ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
// Name: V	Type: struct FVector	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FVector	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FVector UKismetMathLibrary::Matrix_InverseTransformPosition(const struct FMatrix& M, struct FVector V) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Matrix_InverseTransformPosition");

	struct UKismetMathLibrary_Matrix_InverseTransformPosition_Params {
		struct FMatrix M;			//Offset: 0 | ElementSize: 64
		struct FVector V;			//Offset: 64 | ElementSize: 12
		struct FVector ReturnValue;			//Offset: 76 | ElementSize: 12
	};
	UKismetMathLibrary_Matrix_InverseTransformPosition_Params params;
	params.M = M;
	params.V = V;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Matrix_InverseTransformVector
// Flags: Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: M	Type: struct FMatrix	Flags: ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
// Name: V	Type: struct FVector	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FVector	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FVector UKismetMathLibrary::Matrix_InverseTransformVector(const struct FMatrix& M, struct FVector V) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Matrix_InverseTransformVector");

	struct UKismetMathLibrary_Matrix_InverseTransformVector_Params {
		struct FMatrix M;			//Offset: 0 | ElementSize: 64
		struct FVector V;			//Offset: 64 | ElementSize: 12
		struct FVector ReturnValue;			//Offset: 76 | ElementSize: 12
	};
	UKismetMathLibrary_Matrix_InverseTransformVector_Params params;
	params.M = M;
	params.V = V;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Matrix_Mirror
// Flags: Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: M	Type: struct FMatrix	Flags: ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
// Name: MirrorAxis	Type: TEnumAsByte<EAxis>	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: FlipAxis	Type: TEnumAsByte<EAxis>	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FMatrix	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FMatrix UKismetMathLibrary::Matrix_Mirror(const struct FMatrix& M, TEnumAsByte<EAxis> MirrorAxis, TEnumAsByte<EAxis> FlipAxis) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Matrix_Mirror");

	struct UKismetMathLibrary_Matrix_Mirror_Params {
		struct FMatrix M;			//Offset: 0 | ElementSize: 64
		TEnumAsByte<EAxis> MirrorAxis;			//Offset: 64 | ElementSize: 1
		TEnumAsByte<EAxis> FlipAxis;			//Offset: 65 | ElementSize: 1
		struct FMatrix ReturnValue;			//Offset: 80 | ElementSize: 64
	};
	UKismetMathLibrary_Matrix_Mirror_Params params;
	params.M = M;
	params.MirrorAxis = MirrorAxis;
	params.FlipAxis = FlipAxis;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Matrix_RemoveScaling
// Flags: Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable
// Params:
// Name: M	Type: struct FMatrix	Flags: Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
// Name: Tolerance	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
void UKismetMathLibrary::Matrix_RemoveScaling(struct FMatrix* M, float Tolerance) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Matrix_RemoveScaling");

	struct UKismetMathLibrary_Matrix_RemoveScaling_Params {
		struct FMatrix M;			//Offset: 0 | ElementSize: 64
		float Tolerance;			//Offset: 64 | ElementSize: 4
	};
	UKismetMathLibrary_Matrix_RemoveScaling_Params params;
	params.Tolerance = Tolerance;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	if (M != nullptr)
		*M = params.M;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Matrix_RemoveTranslation
// Flags: Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: M	Type: struct FMatrix	Flags: ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FMatrix	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FMatrix UKismetMathLibrary::Matrix_RemoveTranslation(const struct FMatrix& M) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Matrix_RemoveTranslation");

	struct UKismetMathLibrary_Matrix_RemoveTranslation_Params {
		struct FMatrix M;			//Offset: 0 | ElementSize: 64
		struct FMatrix ReturnValue;			//Offset: 64 | ElementSize: 64
	};
	UKismetMathLibrary_Matrix_RemoveTranslation_Params params;
	params.M = M;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Matrix_ScaleTranslation
// Flags: Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: M	Type: struct FMatrix	Flags: ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
// Name: Scale3D	Type: struct FVector	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FMatrix	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FMatrix UKismetMathLibrary::Matrix_ScaleTranslation(const struct FMatrix& M, struct FVector Scale3D) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Matrix_ScaleTranslation");

	struct UKismetMathLibrary_Matrix_ScaleTranslation_Params {
		struct FMatrix M;			//Offset: 0 | ElementSize: 64
		struct FVector Scale3D;			//Offset: 64 | ElementSize: 12
		struct FMatrix ReturnValue;			//Offset: 80 | ElementSize: 64
	};
	UKismetMathLibrary_Matrix_ScaleTranslation_Params params;
	params.M = M;
	params.Scale3D = Scale3D;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Matrix_SetAxis
// Flags: Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable
// Params:
// Name: M	Type: struct FMatrix	Flags: Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
// Name: Axis	Type: TEnumAsByte<EAxis>	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: AxisVector	Type: struct FVector	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
void UKismetMathLibrary::Matrix_SetAxis(struct FMatrix* M, TEnumAsByte<EAxis> Axis, struct FVector AxisVector) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Matrix_SetAxis");

	struct UKismetMathLibrary_Matrix_SetAxis_Params {
		struct FMatrix M;			//Offset: 0 | ElementSize: 64
		TEnumAsByte<EAxis> Axis;			//Offset: 64 | ElementSize: 1
		struct FVector AxisVector;			//Offset: 68 | ElementSize: 12
	};
	UKismetMathLibrary_Matrix_SetAxis_Params params;
	params.Axis = Axis;
	params.AxisVector = AxisVector;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	if (M != nullptr)
		*M = params.M;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Matrix_SetColumn
// Flags: Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable
// Params:
// Name: M	Type: struct FMatrix	Flags: Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
// Name: Column	Type: TEnumAsByte<EMatrixColumns>	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: Value	Type: struct FVector	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
void UKismetMathLibrary::Matrix_SetColumn(struct FMatrix* M, TEnumAsByte<EMatrixColumns> Column, struct FVector Value) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Matrix_SetColumn");

	struct UKismetMathLibrary_Matrix_SetColumn_Params {
		struct FMatrix M;			//Offset: 0 | ElementSize: 64
		TEnumAsByte<EMatrixColumns> Column;			//Offset: 64 | ElementSize: 1
		struct FVector Value;			//Offset: 68 | ElementSize: 12
	};
	UKismetMathLibrary_Matrix_SetColumn_Params params;
	params.Column = Column;
	params.Value = Value;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	if (M != nullptr)
		*M = params.M;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Matrix_SetOrigin
// Flags: Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable
// Params:
// Name: M	Type: struct FMatrix	Flags: Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
// Name: NewOrigin	Type: struct FVector	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
void UKismetMathLibrary::Matrix_SetOrigin(struct FMatrix* M, struct FVector NewOrigin) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Matrix_SetOrigin");

	struct UKismetMathLibrary_Matrix_SetOrigin_Params {
		struct FMatrix M;			//Offset: 0 | ElementSize: 64
		struct FVector NewOrigin;			//Offset: 64 | ElementSize: 12
	};
	UKismetMathLibrary_Matrix_SetOrigin_Params params;
	params.NewOrigin = NewOrigin;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	if (M != nullptr)
		*M = params.M;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Matrix_ToQuat
// Flags: Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: M	Type: struct FMatrix	Flags: ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FQuat	Flags: Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FQuat UKismetMathLibrary::Matrix_ToQuat(const struct FMatrix& M) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Matrix_ToQuat");

	struct UKismetMathLibrary_Matrix_ToQuat_Params {
		struct FMatrix M;			//Offset: 0 | ElementSize: 64
		struct FQuat ReturnValue;			//Offset: 64 | ElementSize: 16
	};
	UKismetMathLibrary_Matrix_ToQuat_Params params;
	params.M = M;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Matrix_TransformPosition
// Flags: Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: M	Type: struct FMatrix	Flags: ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
// Name: V	Type: struct FVector	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FVector4	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FVector4 UKismetMathLibrary::Matrix_TransformPosition(const struct FMatrix& M, struct FVector V) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Matrix_TransformPosition");

	struct UKismetMathLibrary_Matrix_TransformPosition_Params {
		struct FMatrix M;			//Offset: 0 | ElementSize: 64
		struct FVector V;			//Offset: 64 | ElementSize: 12
		struct FVector4 ReturnValue;			//Offset: 80 | ElementSize: 16
	};
	UKismetMathLibrary_Matrix_TransformPosition_Params params;
	params.M = M;
	params.V = V;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Matrix_TransformVector
// Flags: Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: M	Type: struct FMatrix	Flags: ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
// Name: V	Type: struct FVector	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FVector4	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FVector4 UKismetMathLibrary::Matrix_TransformVector(const struct FMatrix& M, struct FVector V) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Matrix_TransformVector");

	struct UKismetMathLibrary_Matrix_TransformVector_Params {
		struct FMatrix M;			//Offset: 0 | ElementSize: 64
		struct FVector V;			//Offset: 64 | ElementSize: 12
		struct FVector4 ReturnValue;			//Offset: 80 | ElementSize: 16
	};
	UKismetMathLibrary_Matrix_TransformVector_Params params;
	params.M = M;
	params.V = V;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Matrix_TransformVector4
// Flags: Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: M	Type: struct FMatrix	Flags: ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
// Name: V	Type: struct FVector4	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FVector4	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FVector4 UKismetMathLibrary::Matrix_TransformVector4(const struct FMatrix& M, struct FVector4 V) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Matrix_TransformVector4");

	struct UKismetMathLibrary_Matrix_TransformVector4_Params {
		struct FMatrix M;			//Offset: 0 | ElementSize: 64
		struct FVector4 V;			//Offset: 64 | ElementSize: 16
		struct FVector4 ReturnValue;			//Offset: 80 | ElementSize: 16
	};
	UKismetMathLibrary_Matrix_TransformVector4_Params params;
	params.M = M;
	params.V = V;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Max
// Flags: Final, Native, Static, Public, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: int32_t	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: B	Type: int32_t	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: int32_t	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
int32_t UKismetMathLibrary::Max(int32_t A, int32_t B) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Max");

	struct UKismetMathLibrary_Max_Params {
		int32_t A;			//Offset: 0 | ElementSize: 4
		int32_t B;			//Offset: 4 | ElementSize: 4
		int32_t ReturnValue;			//Offset: 8 | ElementSize: 4
	};
	UKismetMathLibrary_Max_Params params;
	params.A = A;
	params.B = B;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.MaxInt64
// Flags: Final, Native, Static, Public, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: int64_t	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: B	Type: int64_t	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: int64_t	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
int64_t UKismetMathLibrary::MaxInt64(int64_t A, int64_t B) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.MaxInt64");

	struct UKismetMathLibrary_MaxInt64_Params {
		int64_t A;			//Offset: 0 | ElementSize: 8
		int64_t B;			//Offset: 8 | ElementSize: 8
		int64_t ReturnValue;			//Offset: 16 | ElementSize: 8
	};
	UKismetMathLibrary_MaxInt64_Params params;
	params.A = A;
	params.B = B;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.MaxOfByteArray
// Flags: Final, Native, Static, Public, HasOutParms, BlueprintCallable, BlueprintPure
// Params:
// Name: ByteArray	Type: TArray<unsigned char>	Flags: ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic
// Name: IndexOfMaxValue	Type: int32_t	Flags: Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: MaxValue	Type: unsigned char	Flags: Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
void UKismetMathLibrary::MaxOfByteArray(const TArray<unsigned char>& ByteArray, int32_t* IndexOfMaxValue, unsigned char* MaxValue) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.MaxOfByteArray");

	struct UKismetMathLibrary_MaxOfByteArray_Params {
		TArray<unsigned char> ByteArray;			//Offset: 0 | ElementSize: 16
		int32_t IndexOfMaxValue;			//Offset: 16 | ElementSize: 4
		unsigned char MaxValue;			//Offset: 20 | ElementSize: 1
	};
	UKismetMathLibrary_MaxOfByteArray_Params params;
	params.ByteArray = ByteArray;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	if (IndexOfMaxValue != nullptr)
		*IndexOfMaxValue = params.IndexOfMaxValue;
	if (MaxValue != nullptr)
		*MaxValue = params.MaxValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.MaxOfFloatArray
// Flags: Final, Native, Static, Public, HasOutParms, BlueprintCallable, BlueprintPure
// Params:
// Name: FloatArray	Type: TArray<float>	Flags: ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic
// Name: IndexOfMaxValue	Type: int32_t	Flags: Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: MaxValue	Type: float	Flags: Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
void UKismetMathLibrary::MaxOfFloatArray(const TArray<float>& FloatArray, int32_t* IndexOfMaxValue, float* MaxValue) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.MaxOfFloatArray");

	struct UKismetMathLibrary_MaxOfFloatArray_Params {
		TArray<float> FloatArray;			//Offset: 0 | ElementSize: 16
		int32_t IndexOfMaxValue;			//Offset: 16 | ElementSize: 4
		float MaxValue;			//Offset: 20 | ElementSize: 4
	};
	UKismetMathLibrary_MaxOfFloatArray_Params params;
	params.FloatArray = FloatArray;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	if (IndexOfMaxValue != nullptr)
		*IndexOfMaxValue = params.IndexOfMaxValue;
	if (MaxValue != nullptr)
		*MaxValue = params.MaxValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.MaxOfIntArray
// Flags: Final, Native, Static, Public, HasOutParms, BlueprintCallable, BlueprintPure
// Params:
// Name: IntArray	Type: TArray<int32_t>	Flags: ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic
// Name: IndexOfMaxValue	Type: int32_t	Flags: Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: MaxValue	Type: int32_t	Flags: Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
void UKismetMathLibrary::MaxOfIntArray(const TArray<int32_t>& IntArray, int32_t* IndexOfMaxValue, int32_t* MaxValue) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.MaxOfIntArray");

	struct UKismetMathLibrary_MaxOfIntArray_Params {
		TArray<int32_t> IntArray;			//Offset: 0 | ElementSize: 16
		int32_t IndexOfMaxValue;			//Offset: 16 | ElementSize: 4
		int32_t MaxValue;			//Offset: 20 | ElementSize: 4
	};
	UKismetMathLibrary_MaxOfIntArray_Params params;
	params.IntArray = IntArray;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	if (IndexOfMaxValue != nullptr)
		*IndexOfMaxValue = params.IndexOfMaxValue;
	if (MaxValue != nullptr)
		*MaxValue = params.MaxValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Min
// Flags: Final, Native, Static, Public, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: int32_t	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: B	Type: int32_t	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: int32_t	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
int32_t UKismetMathLibrary::Min(int32_t A, int32_t B) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Min");

	struct UKismetMathLibrary_Min_Params {
		int32_t A;			//Offset: 0 | ElementSize: 4
		int32_t B;			//Offset: 4 | ElementSize: 4
		int32_t ReturnValue;			//Offset: 8 | ElementSize: 4
	};
	UKismetMathLibrary_Min_Params params;
	params.A = A;
	params.B = B;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.MinimumAreaRectangle
// Flags: Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable
// Params:
// Name: WorldContextObject	Type: class UObject*	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: InVerts	Type: TArray<struct FVector>	Flags: ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic
// Name: SampleSurfaceNormal	Type: struct FVector	Flags: ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: OutRectCenter	Type: struct FVector	Flags: Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: OutRectRotation	Type: struct FRotator	Flags: Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
// Name: OutSideLengthX	Type: float	Flags: Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: OutSideLengthY	Type: float	Flags: Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: bDebugDraw	Type: bool	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
void UKismetMathLibrary::MinimumAreaRectangle(class UObject* WorldContextObject, const TArray<struct FVector>& InVerts, const struct FVector& SampleSurfaceNormal, struct FVector* OutRectCenter, struct FRotator* OutRectRotation, float* OutSideLengthX, float* OutSideLengthY, bool bDebugDraw) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.MinimumAreaRectangle");

	struct UKismetMathLibrary_MinimumAreaRectangle_Params {
		class UObject* WorldContextObject;			//Offset: 0 | ElementSize: 8
		TArray<struct FVector> InVerts;			//Offset: 8 | ElementSize: 16
		struct FVector SampleSurfaceNormal;			//Offset: 24 | ElementSize: 12
		struct FVector OutRectCenter;			//Offset: 36 | ElementSize: 12
		struct FRotator OutRectRotation;			//Offset: 48 | ElementSize: 12
		float OutSideLengthX;			//Offset: 60 | ElementSize: 4
		float OutSideLengthY;			//Offset: 64 | ElementSize: 4
		bool bDebugDraw;			//Offset: 68 | ElementSize: 1
	};
	UKismetMathLibrary_MinimumAreaRectangle_Params params;
	params.WorldContextObject = WorldContextObject;
	params.InVerts = InVerts;
	params.SampleSurfaceNormal = SampleSurfaceNormal;
	params.bDebugDraw = bDebugDraw;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	if (OutRectCenter != nullptr)
		*OutRectCenter = params.OutRectCenter;
	if (OutRectRotation != nullptr)
		*OutRectRotation = params.OutRectRotation;
	if (OutSideLengthX != nullptr)
		*OutSideLengthX = params.OutSideLengthX;
	if (OutSideLengthY != nullptr)
		*OutSideLengthY = params.OutSideLengthY;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.MinInt64
// Flags: Final, Native, Static, Public, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: int64_t	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: B	Type: int64_t	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: int64_t	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
int64_t UKismetMathLibrary::MinInt64(int64_t A, int64_t B) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.MinInt64");

	struct UKismetMathLibrary_MinInt64_Params {
		int64_t A;			//Offset: 0 | ElementSize: 8
		int64_t B;			//Offset: 8 | ElementSize: 8
		int64_t ReturnValue;			//Offset: 16 | ElementSize: 8
	};
	UKismetMathLibrary_MinInt64_Params params;
	params.A = A;
	params.B = B;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.MinOfByteArray
// Flags: Final, Native, Static, Public, HasOutParms, BlueprintCallable, BlueprintPure
// Params:
// Name: ByteArray	Type: TArray<unsigned char>	Flags: ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic
// Name: IndexOfMinValue	Type: int32_t	Flags: Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: MinValue	Type: unsigned char	Flags: Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
void UKismetMathLibrary::MinOfByteArray(const TArray<unsigned char>& ByteArray, int32_t* IndexOfMinValue, unsigned char* MinValue) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.MinOfByteArray");

	struct UKismetMathLibrary_MinOfByteArray_Params {
		TArray<unsigned char> ByteArray;			//Offset: 0 | ElementSize: 16
		int32_t IndexOfMinValue;			//Offset: 16 | ElementSize: 4
		unsigned char MinValue;			//Offset: 20 | ElementSize: 1
	};
	UKismetMathLibrary_MinOfByteArray_Params params;
	params.ByteArray = ByteArray;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	if (IndexOfMinValue != nullptr)
		*IndexOfMinValue = params.IndexOfMinValue;
	if (MinValue != nullptr)
		*MinValue = params.MinValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.MinOfFloatArray
// Flags: Final, Native, Static, Public, HasOutParms, BlueprintCallable, BlueprintPure
// Params:
// Name: FloatArray	Type: TArray<float>	Flags: ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic
// Name: IndexOfMinValue	Type: int32_t	Flags: Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: MinValue	Type: float	Flags: Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
void UKismetMathLibrary::MinOfFloatArray(const TArray<float>& FloatArray, int32_t* IndexOfMinValue, float* MinValue) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.MinOfFloatArray");

	struct UKismetMathLibrary_MinOfFloatArray_Params {
		TArray<float> FloatArray;			//Offset: 0 | ElementSize: 16
		int32_t IndexOfMinValue;			//Offset: 16 | ElementSize: 4
		float MinValue;			//Offset: 20 | ElementSize: 4
	};
	UKismetMathLibrary_MinOfFloatArray_Params params;
	params.FloatArray = FloatArray;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	if (IndexOfMinValue != nullptr)
		*IndexOfMinValue = params.IndexOfMinValue;
	if (MinValue != nullptr)
		*MinValue = params.MinValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.MinOfIntArray
// Flags: Final, Native, Static, Public, HasOutParms, BlueprintCallable, BlueprintPure
// Params:
// Name: IntArray	Type: TArray<int32_t>	Flags: ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic
// Name: IndexOfMinValue	Type: int32_t	Flags: Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: MinValue	Type: int32_t	Flags: Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
void UKismetMathLibrary::MinOfIntArray(const TArray<int32_t>& IntArray, int32_t* IndexOfMinValue, int32_t* MinValue) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.MinOfIntArray");

	struct UKismetMathLibrary_MinOfIntArray_Params {
		TArray<int32_t> IntArray;			//Offset: 0 | ElementSize: 16
		int32_t IndexOfMinValue;			//Offset: 16 | ElementSize: 4
		int32_t MinValue;			//Offset: 20 | ElementSize: 4
	};
	UKismetMathLibrary_MinOfIntArray_Params params;
	params.IntArray = IntArray;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	if (IndexOfMinValue != nullptr)
		*IndexOfMinValue = params.IndexOfMinValue;
	if (MinValue != nullptr)
		*MinValue = params.MinValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.MirrorVectorByNormal
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: InVect	Type: struct FVector	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: InNormal	Type: struct FVector	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FVector	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FVector UKismetMathLibrary::MirrorVectorByNormal(struct FVector InVect, struct FVector InNormal) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.MirrorVectorByNormal");

	struct UKismetMathLibrary_MirrorVectorByNormal_Params {
		struct FVector InVect;			//Offset: 0 | ElementSize: 12
		struct FVector InNormal;			//Offset: 12 | ElementSize: 12
		struct FVector ReturnValue;			//Offset: 24 | ElementSize: 12
	};
	UKismetMathLibrary_MirrorVectorByNormal_Params params;
	params.InVect = InVect;
	params.InNormal = InNormal;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Multiply_ByteByte
// Flags: Final, Native, Static, Public, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: unsigned char	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: B	Type: unsigned char	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: unsigned char	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
unsigned char UKismetMathLibrary::Multiply_ByteByte(unsigned char A, unsigned char B) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Multiply_ByteByte");

	struct UKismetMathLibrary_Multiply_ByteByte_Params {
		unsigned char A;			//Offset: 0 | ElementSize: 1
		unsigned char B;			//Offset: 1 | ElementSize: 1
		unsigned char ReturnValue;			//Offset: 2 | ElementSize: 1
	};
	UKismetMathLibrary_Multiply_ByteByte_Params params;
	params.A = A;
	params.B = B;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Multiply_FloatFloat
// Flags: Final, Native, Static, Public, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: B	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: float	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
float UKismetMathLibrary::Multiply_FloatFloat(float A, float B) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Multiply_FloatFloat");

	struct UKismetMathLibrary_Multiply_FloatFloat_Params {
		float A;			//Offset: 0 | ElementSize: 4
		float B;			//Offset: 4 | ElementSize: 4
		float ReturnValue;			//Offset: 8 | ElementSize: 4
	};
	UKismetMathLibrary_Multiply_FloatFloat_Params params;
	params.A = A;
	params.B = B;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Multiply_Int64Int64
// Flags: Final, Native, Static, Public, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: int64_t	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: B	Type: int64_t	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: int64_t	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
int64_t UKismetMathLibrary::Multiply_Int64Int64(int64_t A, int64_t B) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Multiply_Int64Int64");

	struct UKismetMathLibrary_Multiply_Int64Int64_Params {
		int64_t A;			//Offset: 0 | ElementSize: 8
		int64_t B;			//Offset: 8 | ElementSize: 8
		int64_t ReturnValue;			//Offset: 16 | ElementSize: 8
	};
	UKismetMathLibrary_Multiply_Int64Int64_Params params;
	params.A = A;
	params.B = B;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Multiply_IntFloat
// Flags: Final, Native, Static, Public, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: int32_t	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: B	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: float	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
float UKismetMathLibrary::Multiply_IntFloat(int32_t A, float B) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Multiply_IntFloat");

	struct UKismetMathLibrary_Multiply_IntFloat_Params {
		int32_t A;			//Offset: 0 | ElementSize: 4
		float B;			//Offset: 4 | ElementSize: 4
		float ReturnValue;			//Offset: 8 | ElementSize: 4
	};
	UKismetMathLibrary_Multiply_IntFloat_Params params;
	params.A = A;
	params.B = B;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Multiply_IntInt
// Flags: Final, Native, Static, Public, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: int32_t	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: B	Type: int32_t	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: int32_t	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
int32_t UKismetMathLibrary::Multiply_IntInt(int32_t A, int32_t B) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Multiply_IntInt");

	struct UKismetMathLibrary_Multiply_IntInt_Params {
		int32_t A;			//Offset: 0 | ElementSize: 4
		int32_t B;			//Offset: 4 | ElementSize: 4
		int32_t ReturnValue;			//Offset: 8 | ElementSize: 4
	};
	UKismetMathLibrary_Multiply_IntInt_Params params;
	params.A = A;
	params.B = B;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Multiply_IntPointInt
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: struct FIntPoint	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: B	Type: int32_t	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FIntPoint	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FIntPoint UKismetMathLibrary::Multiply_IntPointInt(struct FIntPoint A, int32_t B) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Multiply_IntPointInt");

	struct UKismetMathLibrary_Multiply_IntPointInt_Params {
		struct FIntPoint A;			//Offset: 0 | ElementSize: 8
		int32_t B;			//Offset: 8 | ElementSize: 4
		struct FIntPoint ReturnValue;			//Offset: 12 | ElementSize: 8
	};
	UKismetMathLibrary_Multiply_IntPointInt_Params params;
	params.A = A;
	params.B = B;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Multiply_IntPointIntPoint
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: struct FIntPoint	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: B	Type: struct FIntPoint	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FIntPoint	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FIntPoint UKismetMathLibrary::Multiply_IntPointIntPoint(struct FIntPoint A, struct FIntPoint B) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Multiply_IntPointIntPoint");

	struct UKismetMathLibrary_Multiply_IntPointIntPoint_Params {
		struct FIntPoint A;			//Offset: 0 | ElementSize: 8
		struct FIntPoint B;			//Offset: 8 | ElementSize: 8
		struct FIntPoint ReturnValue;			//Offset: 16 | ElementSize: 8
	};
	UKismetMathLibrary_Multiply_IntPointIntPoint_Params params;
	params.A = A;
	params.B = B;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Multiply_LinearColorFloat
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: struct FLinearColor	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: B	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FLinearColor	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FLinearColor UKismetMathLibrary::Multiply_LinearColorFloat(struct FLinearColor A, float B) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Multiply_LinearColorFloat");

	struct UKismetMathLibrary_Multiply_LinearColorFloat_Params {
		struct FLinearColor A;			//Offset: 0 | ElementSize: 16
		float B;			//Offset: 16 | ElementSize: 4
		struct FLinearColor ReturnValue;			//Offset: 20 | ElementSize: 16
	};
	UKismetMathLibrary_Multiply_LinearColorFloat_Params params;
	params.A = A;
	params.B = B;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Multiply_LinearColorLinearColor
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: struct FLinearColor	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: B	Type: struct FLinearColor	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FLinearColor	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FLinearColor UKismetMathLibrary::Multiply_LinearColorLinearColor(struct FLinearColor A, struct FLinearColor B) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Multiply_LinearColorLinearColor");

	struct UKismetMathLibrary_Multiply_LinearColorLinearColor_Params {
		struct FLinearColor A;			//Offset: 0 | ElementSize: 16
		struct FLinearColor B;			//Offset: 16 | ElementSize: 16
		struct FLinearColor ReturnValue;			//Offset: 32 | ElementSize: 16
	};
	UKismetMathLibrary_Multiply_LinearColorLinearColor_Params params;
	params.A = A;
	params.B = B;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Multiply_MatrixFloat
// Flags: Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: struct FMatrix	Flags: ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
// Name: B	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FMatrix	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FMatrix UKismetMathLibrary::Multiply_MatrixFloat(const struct FMatrix& A, float B) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Multiply_MatrixFloat");

	struct UKismetMathLibrary_Multiply_MatrixFloat_Params {
		struct FMatrix A;			//Offset: 0 | ElementSize: 64
		float B;			//Offset: 64 | ElementSize: 4
		struct FMatrix ReturnValue;			//Offset: 80 | ElementSize: 64
	};
	UKismetMathLibrary_Multiply_MatrixFloat_Params params;
	params.A = A;
	params.B = B;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Multiply_MatrixMatrix
// Flags: Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: struct FMatrix	Flags: ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
// Name: B	Type: struct FMatrix	Flags: ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FMatrix	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FMatrix UKismetMathLibrary::Multiply_MatrixMatrix(const struct FMatrix& A, const struct FMatrix& B) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Multiply_MatrixMatrix");

	struct UKismetMathLibrary_Multiply_MatrixMatrix_Params {
		struct FMatrix A;			//Offset: 0 | ElementSize: 64
		struct FMatrix B;			//Offset: 64 | ElementSize: 64
		struct FMatrix ReturnValue;			//Offset: 128 | ElementSize: 64
	};
	UKismetMathLibrary_Multiply_MatrixMatrix_Params params;
	params.A = A;
	params.B = B;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Multiply_QuatQuat
// Flags: Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: struct FQuat	Flags: ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
// Name: B	Type: struct FQuat	Flags: ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FQuat	Flags: Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FQuat UKismetMathLibrary::Multiply_QuatQuat(const struct FQuat& A, const struct FQuat& B) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Multiply_QuatQuat");

	struct UKismetMathLibrary_Multiply_QuatQuat_Params {
		struct FQuat A;			//Offset: 0 | ElementSize: 16
		struct FQuat B;			//Offset: 16 | ElementSize: 16
		struct FQuat ReturnValue;			//Offset: 32 | ElementSize: 16
	};
	UKismetMathLibrary_Multiply_QuatQuat_Params params;
	params.A = A;
	params.B = B;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Multiply_RotatorFloat
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: struct FRotator	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
// Name: B	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FRotator	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FRotator UKismetMathLibrary::Multiply_RotatorFloat(struct FRotator A, float B) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Multiply_RotatorFloat");

	struct UKismetMathLibrary_Multiply_RotatorFloat_Params {
		struct FRotator A;			//Offset: 0 | ElementSize: 12
		float B;			//Offset: 12 | ElementSize: 4
		struct FRotator ReturnValue;			//Offset: 16 | ElementSize: 12
	};
	UKismetMathLibrary_Multiply_RotatorFloat_Params params;
	params.A = A;
	params.B = B;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Multiply_RotatorInt
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: struct FRotator	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
// Name: B	Type: int32_t	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FRotator	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FRotator UKismetMathLibrary::Multiply_RotatorInt(struct FRotator A, int32_t B) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Multiply_RotatorInt");

	struct UKismetMathLibrary_Multiply_RotatorInt_Params {
		struct FRotator A;			//Offset: 0 | ElementSize: 12
		int32_t B;			//Offset: 12 | ElementSize: 4
		struct FRotator ReturnValue;			//Offset: 16 | ElementSize: 12
	};
	UKismetMathLibrary_Multiply_RotatorInt_Params params;
	params.A = A;
	params.B = B;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Multiply_TimespanFloat
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: struct FTimespan	Flags: Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: Scalar	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FTimespan	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FTimespan UKismetMathLibrary::Multiply_TimespanFloat(struct FTimespan A, float Scalar) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Multiply_TimespanFloat");

	struct UKismetMathLibrary_Multiply_TimespanFloat_Params {
		struct FTimespan A;			//Offset: 0 | ElementSize: 8
		float Scalar;			//Offset: 8 | ElementSize: 4
		struct FTimespan ReturnValue;			//Offset: 16 | ElementSize: 8
	};
	UKismetMathLibrary_Multiply_TimespanFloat_Params params;
	params.A = A;
	params.Scalar = Scalar;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Multiply_Vector2DFloat
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: struct FVector2D	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: B	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FVector2D	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FVector2D UKismetMathLibrary::Multiply_Vector2DFloat(struct FVector2D A, float B) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Multiply_Vector2DFloat");

	struct UKismetMathLibrary_Multiply_Vector2DFloat_Params {
		struct FVector2D A;			//Offset: 0 | ElementSize: 8
		float B;			//Offset: 8 | ElementSize: 4
		struct FVector2D ReturnValue;			//Offset: 12 | ElementSize: 8
	};
	UKismetMathLibrary_Multiply_Vector2DFloat_Params params;
	params.A = A;
	params.B = B;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Multiply_Vector2DVector2D
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: struct FVector2D	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: B	Type: struct FVector2D	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FVector2D	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FVector2D UKismetMathLibrary::Multiply_Vector2DVector2D(struct FVector2D A, struct FVector2D B) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Multiply_Vector2DVector2D");

	struct UKismetMathLibrary_Multiply_Vector2DVector2D_Params {
		struct FVector2D A;			//Offset: 0 | ElementSize: 8
		struct FVector2D B;			//Offset: 8 | ElementSize: 8
		struct FVector2D ReturnValue;			//Offset: 16 | ElementSize: 8
	};
	UKismetMathLibrary_Multiply_Vector2DVector2D_Params params;
	params.A = A;
	params.B = B;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Multiply_Vector4Vector4
// Flags: Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: struct FVector4	Flags: ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: B	Type: struct FVector4	Flags: ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FVector4	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FVector4 UKismetMathLibrary::Multiply_Vector4Vector4(const struct FVector4& A, const struct FVector4& B) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Multiply_Vector4Vector4");

	struct UKismetMathLibrary_Multiply_Vector4Vector4_Params {
		struct FVector4 A;			//Offset: 0 | ElementSize: 16
		struct FVector4 B;			//Offset: 16 | ElementSize: 16
		struct FVector4 ReturnValue;			//Offset: 32 | ElementSize: 16
	};
	UKismetMathLibrary_Multiply_Vector4Vector4_Params params;
	params.A = A;
	params.B = B;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Multiply_VectorFloat
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: struct FVector	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: B	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FVector	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FVector UKismetMathLibrary::Multiply_VectorFloat(struct FVector A, float B) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Multiply_VectorFloat");

	struct UKismetMathLibrary_Multiply_VectorFloat_Params {
		struct FVector A;			//Offset: 0 | ElementSize: 12
		float B;			//Offset: 12 | ElementSize: 4
		struct FVector ReturnValue;			//Offset: 16 | ElementSize: 12
	};
	UKismetMathLibrary_Multiply_VectorFloat_Params params;
	params.A = A;
	params.B = B;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Multiply_VectorInt
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: struct FVector	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: B	Type: int32_t	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FVector	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FVector UKismetMathLibrary::Multiply_VectorInt(struct FVector A, int32_t B) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Multiply_VectorInt");

	struct UKismetMathLibrary_Multiply_VectorInt_Params {
		struct FVector A;			//Offset: 0 | ElementSize: 12
		int32_t B;			//Offset: 12 | ElementSize: 4
		struct FVector ReturnValue;			//Offset: 16 | ElementSize: 12
	};
	UKismetMathLibrary_Multiply_VectorInt_Params params;
	params.A = A;
	params.B = B;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Multiply_VectorVector
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: struct FVector	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: B	Type: struct FVector	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FVector	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FVector UKismetMathLibrary::Multiply_VectorVector(struct FVector A, struct FVector B) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Multiply_VectorVector");

	struct UKismetMathLibrary_Multiply_VectorVector_Params {
		struct FVector A;			//Offset: 0 | ElementSize: 12
		struct FVector B;			//Offset: 12 | ElementSize: 12
		struct FVector ReturnValue;			//Offset: 24 | ElementSize: 12
	};
	UKismetMathLibrary_Multiply_VectorVector_Params params;
	params.A = A;
	params.B = B;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.MultiplyByPi
// Flags: Final, Native, Static, Public, BlueprintCallable, BlueprintPure
// Params:
// Name: Value	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: float	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
float UKismetMathLibrary::MultiplyByPi(float Value) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.MultiplyByPi");

	struct UKismetMathLibrary_MultiplyByPi_Params {
		float Value;			//Offset: 0 | ElementSize: 4
		float ReturnValue;			//Offset: 4 | ElementSize: 4
	};
	UKismetMathLibrary_MultiplyByPi_Params params;
	params.Value = Value;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.MultiplyMultiply_FloatFloat
// Flags: Final, Native, Static, Public, BlueprintCallable, BlueprintPure
// Params:
// Name: Base	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: Exp	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: float	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
float UKismetMathLibrary::MultiplyMultiply_FloatFloat(float Base, float Exp) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.MultiplyMultiply_FloatFloat");

	struct UKismetMathLibrary_MultiplyMultiply_FloatFloat_Params {
		float Base;			//Offset: 0 | ElementSize: 4
		float Exp;			//Offset: 4 | ElementSize: 4
		float ReturnValue;			//Offset: 8 | ElementSize: 4
	};
	UKismetMathLibrary_MultiplyMultiply_FloatFloat_Params params;
	params.Base = Base;
	params.Exp = Exp;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.NearlyEqual_FloatFloat
// Flags: Final, Native, Static, Public, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: B	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ErrorTolerance	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: bool	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
bool UKismetMathLibrary::NearlyEqual_FloatFloat(float A, float B, float ErrorTolerance) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.NearlyEqual_FloatFloat");

	struct UKismetMathLibrary_NearlyEqual_FloatFloat_Params {
		float A;			//Offset: 0 | ElementSize: 4
		float B;			//Offset: 4 | ElementSize: 4
		float ErrorTolerance;			//Offset: 8 | ElementSize: 4
		bool ReturnValue;			//Offset: 12 | ElementSize: 1
	};
	UKismetMathLibrary_NearlyEqual_FloatFloat_Params params;
	params.A = A;
	params.B = B;
	params.ErrorTolerance = ErrorTolerance;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.NearlyEqual_TransformTransform
// Flags: Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: struct FTransform	Flags: ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
// Name: B	Type: struct FTransform	Flags: ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
// Name: LocationTolerance	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: RotationTolerance	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: Scale3DTolerance	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: bool	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
bool UKismetMathLibrary::NearlyEqual_TransformTransform(const struct FTransform& A, const struct FTransform& B, float LocationTolerance, float RotationTolerance, float Scale3DTolerance) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.NearlyEqual_TransformTransform");

	struct UKismetMathLibrary_NearlyEqual_TransformTransform_Params {
		struct FTransform A;			//Offset: 0 | ElementSize: 48
		struct FTransform B;			//Offset: 48 | ElementSize: 48
		float LocationTolerance;			//Offset: 96 | ElementSize: 4
		float RotationTolerance;			//Offset: 100 | ElementSize: 4
		float Scale3DTolerance;			//Offset: 104 | ElementSize: 4
		bool ReturnValue;			//Offset: 108 | ElementSize: 1
	};
	UKismetMathLibrary_NearlyEqual_TransformTransform_Params params;
	params.A = A;
	params.B = B;
	params.LocationTolerance = LocationTolerance;
	params.RotationTolerance = RotationTolerance;
	params.Scale3DTolerance = Scale3DTolerance;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Negated2D
// Flags: Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: struct FVector2D	Flags: ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FVector2D	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FVector2D UKismetMathLibrary::Negated2D(const struct FVector2D& A) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Negated2D");

	struct UKismetMathLibrary_Negated2D_Params {
		struct FVector2D A;			//Offset: 0 | ElementSize: 8
		struct FVector2D ReturnValue;			//Offset: 8 | ElementSize: 8
	};
	UKismetMathLibrary_Negated2D_Params params;
	params.A = A;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.NegateRotator
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: struct FRotator	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FRotator	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FRotator UKismetMathLibrary::NegateRotator(struct FRotator A) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.NegateRotator");

	struct UKismetMathLibrary_NegateRotator_Params {
		struct FRotator A;			//Offset: 0 | ElementSize: 12
		struct FRotator ReturnValue;			//Offset: 12 | ElementSize: 12
	};
	UKismetMathLibrary_NegateRotator_Params params;
	params.A = A;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.NegateVector
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: struct FVector	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FVector	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FVector UKismetMathLibrary::NegateVector(struct FVector A) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.NegateVector");

	struct UKismetMathLibrary_NegateVector_Params {
		struct FVector A;			//Offset: 0 | ElementSize: 12
		struct FVector ReturnValue;			//Offset: 12 | ElementSize: 12
	};
	UKismetMathLibrary_NegateVector_Params params;
	params.A = A;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Normal
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: struct FVector	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: Tolerance	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FVector	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FVector UKismetMathLibrary::Normal(struct FVector A, float Tolerance) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Normal");

	struct UKismetMathLibrary_Normal_Params {
		struct FVector A;			//Offset: 0 | ElementSize: 12
		float Tolerance;			//Offset: 12 | ElementSize: 4
		struct FVector ReturnValue;			//Offset: 16 | ElementSize: 12
	};
	UKismetMathLibrary_Normal_Params params;
	params.A = A;
	params.Tolerance = Tolerance;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Normal2D
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: struct FVector2D	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FVector2D	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FVector2D UKismetMathLibrary::Normal2D(struct FVector2D A) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Normal2D");

	struct UKismetMathLibrary_Normal2D_Params {
		struct FVector2D A;			//Offset: 0 | ElementSize: 8
		struct FVector2D ReturnValue;			//Offset: 8 | ElementSize: 8
	};
	UKismetMathLibrary_Normal2D_Params params;
	params.A = A;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Normalize2D
// Flags: Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable
// Params:
// Name: A	Type: struct FVector2D	Flags: Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: Tolerance	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
void UKismetMathLibrary::Normalize2D(struct FVector2D* A, float Tolerance) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Normalize2D");

	struct UKismetMathLibrary_Normalize2D_Params {
		struct FVector2D A;			//Offset: 0 | ElementSize: 8
		float Tolerance;			//Offset: 8 | ElementSize: 4
	};
	UKismetMathLibrary_Normalize2D_Params params;
	params.Tolerance = Tolerance;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	if (A != nullptr)
		*A = params.A;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.NormalizeAxis
// Flags: Final, Native, Static, Public, BlueprintCallable, BlueprintPure
// Params:
// Name: Angle	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: float	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
float UKismetMathLibrary::NormalizeAxis(float Angle) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.NormalizeAxis");

	struct UKismetMathLibrary_NormalizeAxis_Params {
		float Angle;			//Offset: 0 | ElementSize: 4
		float ReturnValue;			//Offset: 4 | ElementSize: 4
	};
	UKismetMathLibrary_NormalizeAxis_Params params;
	params.Angle = Angle;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.NormalizedDeltaRotator
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: struct FRotator	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
// Name: B	Type: struct FRotator	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FRotator	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FRotator UKismetMathLibrary::NormalizedDeltaRotator(struct FRotator A, struct FRotator B) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.NormalizedDeltaRotator");

	struct UKismetMathLibrary_NormalizedDeltaRotator_Params {
		struct FRotator A;			//Offset: 0 | ElementSize: 12
		struct FRotator B;			//Offset: 12 | ElementSize: 12
		struct FRotator ReturnValue;			//Offset: 24 | ElementSize: 12
	};
	UKismetMathLibrary_NormalizedDeltaRotator_Params params;
	params.A = A;
	params.B = B;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.NormalizeToRange
// Flags: Final, Native, Static, Public, BlueprintCallable, BlueprintPure
// Params:
// Name: Value	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: RangeMin	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: RangeMax	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: float	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
float UKismetMathLibrary::NormalizeToRange(float Value, float RangeMin, float RangeMax) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.NormalizeToRange");

	struct UKismetMathLibrary_NormalizeToRange_Params {
		float Value;			//Offset: 0 | ElementSize: 4
		float RangeMin;			//Offset: 4 | ElementSize: 4
		float RangeMax;			//Offset: 8 | ElementSize: 4
		float ReturnValue;			//Offset: 12 | ElementSize: 4
	};
	UKismetMathLibrary_NormalizeToRange_Params params;
	params.Value = Value;
	params.RangeMin = RangeMin;
	params.RangeMax = RangeMax;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.NormalSafe2D
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: struct FVector2D	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: Tolerance	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FVector2D	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FVector2D UKismetMathLibrary::NormalSafe2D(struct FVector2D A, float Tolerance) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.NormalSafe2D");

	struct UKismetMathLibrary_NormalSafe2D_Params {
		struct FVector2D A;			//Offset: 0 | ElementSize: 8
		float Tolerance;			//Offset: 8 | ElementSize: 4
		struct FVector2D ReturnValue;			//Offset: 12 | ElementSize: 8
	};
	UKismetMathLibrary_NormalSafe2D_Params params;
	params.A = A;
	params.Tolerance = Tolerance;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Not_Int
// Flags: Final, Native, Static, Public, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: int32_t	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: int32_t	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
int32_t UKismetMathLibrary::Not_Int(int32_t A) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Not_Int");

	struct UKismetMathLibrary_Not_Int_Params {
		int32_t A;			//Offset: 0 | ElementSize: 4
		int32_t ReturnValue;			//Offset: 4 | ElementSize: 4
	};
	UKismetMathLibrary_Not_Int_Params params;
	params.A = A;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Not_Int64
// Flags: Final, Native, Static, Public, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: int64_t	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: int64_t	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
int64_t UKismetMathLibrary::Not_Int64(int64_t A) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Not_Int64");

	struct UKismetMathLibrary_Not_Int64_Params {
		int64_t A;			//Offset: 0 | ElementSize: 8
		int64_t ReturnValue;			//Offset: 8 | ElementSize: 8
	};
	UKismetMathLibrary_Not_Int64_Params params;
	params.A = A;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Not_PreBool
// Flags: Final, Native, Static, Public, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: bool	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: bool	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
bool UKismetMathLibrary::Not_PreBool(bool A) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Not_PreBool");

	struct UKismetMathLibrary_Not_PreBool_Params {
		bool A;			//Offset: 0 | ElementSize: 1
		bool ReturnValue;			//Offset: 1 | ElementSize: 1
	};
	UKismetMathLibrary_Not_PreBool_Params params;
	params.A = A;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.NotEqual_BoolBool
// Flags: Final, Native, Static, Public, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: bool	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: B	Type: bool	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: bool	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
bool UKismetMathLibrary::NotEqual_BoolBool(bool A, bool B) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.NotEqual_BoolBool");

	struct UKismetMathLibrary_NotEqual_BoolBool_Params {
		bool A;			//Offset: 0 | ElementSize: 1
		bool B;			//Offset: 1 | ElementSize: 1
		bool ReturnValue;			//Offset: 2 | ElementSize: 1
	};
	UKismetMathLibrary_NotEqual_BoolBool_Params params;
	params.A = A;
	params.B = B;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.NotEqual_ByteByte
// Flags: Final, Native, Static, Public, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: unsigned char	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: B	Type: unsigned char	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: bool	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
bool UKismetMathLibrary::NotEqual_ByteByte(unsigned char A, unsigned char B) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.NotEqual_ByteByte");

	struct UKismetMathLibrary_NotEqual_ByteByte_Params {
		unsigned char A;			//Offset: 0 | ElementSize: 1
		unsigned char B;			//Offset: 1 | ElementSize: 1
		bool ReturnValue;			//Offset: 2 | ElementSize: 1
	};
	UKismetMathLibrary_NotEqual_ByteByte_Params params;
	params.A = A;
	params.B = B;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.NotEqual_ClassClass
// Flags: Final, Native, Static, Public, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: class UObject*	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: B	Type: class UObject*	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: bool	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
bool UKismetMathLibrary::NotEqual_ClassClass(class UObject* A, class UObject* B) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.NotEqual_ClassClass");

	struct UKismetMathLibrary_NotEqual_ClassClass_Params {
		class UObject* A;			//Offset: 0 | ElementSize: 8
		class UObject* B;			//Offset: 8 | ElementSize: 8
		bool ReturnValue;			//Offset: 16 | ElementSize: 1
	};
	UKismetMathLibrary_NotEqual_ClassClass_Params params;
	params.A = A;
	params.B = B;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.NotEqual_DateTimeDateTime
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: struct FDateTime	Flags: Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: B	Type: struct FDateTime	Flags: Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: bool	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
bool UKismetMathLibrary::NotEqual_DateTimeDateTime(struct FDateTime A, struct FDateTime B) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.NotEqual_DateTimeDateTime");

	struct UKismetMathLibrary_NotEqual_DateTimeDateTime_Params {
		struct FDateTime A;			//Offset: 0 | ElementSize: 8
		struct FDateTime B;			//Offset: 8 | ElementSize: 8
		bool ReturnValue;			//Offset: 16 | ElementSize: 1
	};
	UKismetMathLibrary_NotEqual_DateTimeDateTime_Params params;
	params.A = A;
	params.B = B;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.NotEqual_FloatFloat
// Flags: Final, Native, Static, Public, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: B	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: bool	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
bool UKismetMathLibrary::NotEqual_FloatFloat(float A, float B) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.NotEqual_FloatFloat");

	struct UKismetMathLibrary_NotEqual_FloatFloat_Params {
		float A;			//Offset: 0 | ElementSize: 4
		float B;			//Offset: 4 | ElementSize: 4
		bool ReturnValue;			//Offset: 8 | ElementSize: 1
	};
	UKismetMathLibrary_NotEqual_FloatFloat_Params params;
	params.A = A;
	params.B = B;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.NotEqual_Int64Int64
// Flags: Final, Native, Static, Public, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: int64_t	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: B	Type: int64_t	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: bool	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
bool UKismetMathLibrary::NotEqual_Int64Int64(int64_t A, int64_t B) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.NotEqual_Int64Int64");

	struct UKismetMathLibrary_NotEqual_Int64Int64_Params {
		int64_t A;			//Offset: 0 | ElementSize: 8
		int64_t B;			//Offset: 8 | ElementSize: 8
		bool ReturnValue;			//Offset: 16 | ElementSize: 1
	};
	UKismetMathLibrary_NotEqual_Int64Int64_Params params;
	params.A = A;
	params.B = B;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.NotEqual_IntInt
// Flags: Final, Native, Static, Public, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: int32_t	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: B	Type: int32_t	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: bool	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
bool UKismetMathLibrary::NotEqual_IntInt(int32_t A, int32_t B) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.NotEqual_IntInt");

	struct UKismetMathLibrary_NotEqual_IntInt_Params {
		int32_t A;			//Offset: 0 | ElementSize: 4
		int32_t B;			//Offset: 4 | ElementSize: 4
		bool ReturnValue;			//Offset: 8 | ElementSize: 1
	};
	UKismetMathLibrary_NotEqual_IntInt_Params params;
	params.A = A;
	params.B = B;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.NotEqual_IntPointIntPoint
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: struct FIntPoint	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: B	Type: struct FIntPoint	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: bool	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
bool UKismetMathLibrary::NotEqual_IntPointIntPoint(struct FIntPoint A, struct FIntPoint B) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.NotEqual_IntPointIntPoint");

	struct UKismetMathLibrary_NotEqual_IntPointIntPoint_Params {
		struct FIntPoint A;			//Offset: 0 | ElementSize: 8
		struct FIntPoint B;			//Offset: 8 | ElementSize: 8
		bool ReturnValue;			//Offset: 16 | ElementSize: 1
	};
	UKismetMathLibrary_NotEqual_IntPointIntPoint_Params params;
	params.A = A;
	params.B = B;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.NotEqual_LinearColorLinearColor
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: struct FLinearColor	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: B	Type: struct FLinearColor	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: bool	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
bool UKismetMathLibrary::NotEqual_LinearColorLinearColor(struct FLinearColor A, struct FLinearColor B) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.NotEqual_LinearColorLinearColor");

	struct UKismetMathLibrary_NotEqual_LinearColorLinearColor_Params {
		struct FLinearColor A;			//Offset: 0 | ElementSize: 16
		struct FLinearColor B;			//Offset: 16 | ElementSize: 16
		bool ReturnValue;			//Offset: 32 | ElementSize: 1
	};
	UKismetMathLibrary_NotEqual_LinearColorLinearColor_Params params;
	params.A = A;
	params.B = B;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.NotEqual_MatrixMatrix
// Flags: Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: struct FMatrix	Flags: ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
// Name: B	Type: struct FMatrix	Flags: ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
// Name: Tolerance	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: bool	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
bool UKismetMathLibrary::NotEqual_MatrixMatrix(const struct FMatrix& A, const struct FMatrix& B, float Tolerance) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.NotEqual_MatrixMatrix");

	struct UKismetMathLibrary_NotEqual_MatrixMatrix_Params {
		struct FMatrix A;			//Offset: 0 | ElementSize: 64
		struct FMatrix B;			//Offset: 64 | ElementSize: 64
		float Tolerance;			//Offset: 128 | ElementSize: 4
		bool ReturnValue;			//Offset: 132 | ElementSize: 1
	};
	UKismetMathLibrary_NotEqual_MatrixMatrix_Params params;
	params.A = A;
	params.B = B;
	params.Tolerance = Tolerance;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.NotEqual_NameName
// Flags: Final, Native, Static, Public, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: struct FName	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: B	Type: struct FName	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: bool	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
bool UKismetMathLibrary::NotEqual_NameName(struct FName A, struct FName B) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.NotEqual_NameName");

	struct UKismetMathLibrary_NotEqual_NameName_Params {
		struct FName A;			//Offset: 0 | ElementSize: 8
		struct FName B;			//Offset: 8 | ElementSize: 8
		bool ReturnValue;			//Offset: 16 | ElementSize: 1
	};
	UKismetMathLibrary_NotEqual_NameName_Params params;
	params.A = A;
	params.B = B;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.NotEqual_ObjectObject
// Flags: Final, Native, Static, Public, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: class UObject*	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: B	Type: class UObject*	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: bool	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
bool UKismetMathLibrary::NotEqual_ObjectObject(class UObject* A, class UObject* B) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.NotEqual_ObjectObject");

	struct UKismetMathLibrary_NotEqual_ObjectObject_Params {
		class UObject* A;			//Offset: 0 | ElementSize: 8
		class UObject* B;			//Offset: 8 | ElementSize: 8
		bool ReturnValue;			//Offset: 16 | ElementSize: 1
	};
	UKismetMathLibrary_NotEqual_ObjectObject_Params params;
	params.A = A;
	params.B = B;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.NotEqual_QuatQuat
// Flags: Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: struct FQuat	Flags: ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
// Name: B	Type: struct FQuat	Flags: ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
// Name: ErrorTolerance	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: bool	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
bool UKismetMathLibrary::NotEqual_QuatQuat(const struct FQuat& A, const struct FQuat& B, float ErrorTolerance) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.NotEqual_QuatQuat");

	struct UKismetMathLibrary_NotEqual_QuatQuat_Params {
		struct FQuat A;			//Offset: 0 | ElementSize: 16
		struct FQuat B;			//Offset: 16 | ElementSize: 16
		float ErrorTolerance;			//Offset: 32 | ElementSize: 4
		bool ReturnValue;			//Offset: 36 | ElementSize: 1
	};
	UKismetMathLibrary_NotEqual_QuatQuat_Params params;
	params.A = A;
	params.B = B;
	params.ErrorTolerance = ErrorTolerance;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.NotEqual_RotatorRotator
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: struct FRotator	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
// Name: B	Type: struct FRotator	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
// Name: ErrorTolerance	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: bool	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
bool UKismetMathLibrary::NotEqual_RotatorRotator(struct FRotator A, struct FRotator B, float ErrorTolerance) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.NotEqual_RotatorRotator");

	struct UKismetMathLibrary_NotEqual_RotatorRotator_Params {
		struct FRotator A;			//Offset: 0 | ElementSize: 12
		struct FRotator B;			//Offset: 12 | ElementSize: 12
		float ErrorTolerance;			//Offset: 24 | ElementSize: 4
		bool ReturnValue;			//Offset: 28 | ElementSize: 1
	};
	UKismetMathLibrary_NotEqual_RotatorRotator_Params params;
	params.A = A;
	params.B = B;
	params.ErrorTolerance = ErrorTolerance;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.NotEqual_TimespanTimespan
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: struct FTimespan	Flags: Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: B	Type: struct FTimespan	Flags: Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: bool	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
bool UKismetMathLibrary::NotEqual_TimespanTimespan(struct FTimespan A, struct FTimespan B) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.NotEqual_TimespanTimespan");

	struct UKismetMathLibrary_NotEqual_TimespanTimespan_Params {
		struct FTimespan A;			//Offset: 0 | ElementSize: 8
		struct FTimespan B;			//Offset: 8 | ElementSize: 8
		bool ReturnValue;			//Offset: 16 | ElementSize: 1
	};
	UKismetMathLibrary_NotEqual_TimespanTimespan_Params params;
	params.A = A;
	params.B = B;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.NotEqual_Vector2DVector2D
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: struct FVector2D	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: B	Type: struct FVector2D	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ErrorTolerance	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: bool	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
bool UKismetMathLibrary::NotEqual_Vector2DVector2D(struct FVector2D A, struct FVector2D B, float ErrorTolerance) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.NotEqual_Vector2DVector2D");

	struct UKismetMathLibrary_NotEqual_Vector2DVector2D_Params {
		struct FVector2D A;			//Offset: 0 | ElementSize: 8
		struct FVector2D B;			//Offset: 8 | ElementSize: 8
		float ErrorTolerance;			//Offset: 16 | ElementSize: 4
		bool ReturnValue;			//Offset: 20 | ElementSize: 1
	};
	UKismetMathLibrary_NotEqual_Vector2DVector2D_Params params;
	params.A = A;
	params.B = B;
	params.ErrorTolerance = ErrorTolerance;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.NotEqual_Vector4Vector4
// Flags: Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: struct FVector4	Flags: ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: B	Type: struct FVector4	Flags: ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ErrorTolerance	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: bool	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
bool UKismetMathLibrary::NotEqual_Vector4Vector4(const struct FVector4& A, const struct FVector4& B, float ErrorTolerance) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.NotEqual_Vector4Vector4");

	struct UKismetMathLibrary_NotEqual_Vector4Vector4_Params {
		struct FVector4 A;			//Offset: 0 | ElementSize: 16
		struct FVector4 B;			//Offset: 16 | ElementSize: 16
		float ErrorTolerance;			//Offset: 32 | ElementSize: 4
		bool ReturnValue;			//Offset: 36 | ElementSize: 1
	};
	UKismetMathLibrary_NotEqual_Vector4Vector4_Params params;
	params.A = A;
	params.B = B;
	params.ErrorTolerance = ErrorTolerance;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.NotEqual_VectorVector
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: struct FVector	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: B	Type: struct FVector	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ErrorTolerance	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: bool	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
bool UKismetMathLibrary::NotEqual_VectorVector(struct FVector A, struct FVector B, float ErrorTolerance) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.NotEqual_VectorVector");

	struct UKismetMathLibrary_NotEqual_VectorVector_Params {
		struct FVector A;			//Offset: 0 | ElementSize: 12
		struct FVector B;			//Offset: 12 | ElementSize: 12
		float ErrorTolerance;			//Offset: 24 | ElementSize: 4
		bool ReturnValue;			//Offset: 28 | ElementSize: 1
	};
	UKismetMathLibrary_NotEqual_VectorVector_Params params;
	params.A = A;
	params.B = B;
	params.ErrorTolerance = ErrorTolerance;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.NotEqualExactly_Vector2DVector2D
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: struct FVector2D	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: B	Type: struct FVector2D	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: bool	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
bool UKismetMathLibrary::NotEqualExactly_Vector2DVector2D(struct FVector2D A, struct FVector2D B) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.NotEqualExactly_Vector2DVector2D");

	struct UKismetMathLibrary_NotEqualExactly_Vector2DVector2D_Params {
		struct FVector2D A;			//Offset: 0 | ElementSize: 8
		struct FVector2D B;			//Offset: 8 | ElementSize: 8
		bool ReturnValue;			//Offset: 16 | ElementSize: 1
	};
	UKismetMathLibrary_NotEqualExactly_Vector2DVector2D_Params params;
	params.A = A;
	params.B = B;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.NotEqualExactly_Vector4Vector4
// Flags: Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: struct FVector4	Flags: ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: B	Type: struct FVector4	Flags: ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: bool	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
bool UKismetMathLibrary::NotEqualExactly_Vector4Vector4(const struct FVector4& A, const struct FVector4& B) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.NotEqualExactly_Vector4Vector4");

	struct UKismetMathLibrary_NotEqualExactly_Vector4Vector4_Params {
		struct FVector4 A;			//Offset: 0 | ElementSize: 16
		struct FVector4 B;			//Offset: 16 | ElementSize: 16
		bool ReturnValue;			//Offset: 32 | ElementSize: 1
	};
	UKismetMathLibrary_NotEqualExactly_Vector4Vector4_Params params;
	params.A = A;
	params.B = B;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.NotEqualExactly_VectorVector
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: struct FVector	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: B	Type: struct FVector	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: bool	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
bool UKismetMathLibrary::NotEqualExactly_VectorVector(struct FVector A, struct FVector B) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.NotEqualExactly_VectorVector");

	struct UKismetMathLibrary_NotEqualExactly_VectorVector_Params {
		struct FVector A;			//Offset: 0 | ElementSize: 12
		struct FVector B;			//Offset: 12 | ElementSize: 12
		bool ReturnValue;			//Offset: 24 | ElementSize: 1
	};
	UKismetMathLibrary_NotEqualExactly_VectorVector_Params params;
	params.A = A;
	params.B = B;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Now
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: ReturnValue	Type: struct FDateTime	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FDateTime UKismetMathLibrary::Now() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Now");

	struct UKismetMathLibrary_Now_Params {
		struct FDateTime ReturnValue;			//Offset: 0 | ElementSize: 8
	};
	UKismetMathLibrary_Now_Params params;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Or_Int64Int64
// Flags: Final, Native, Static, Public, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: int64_t	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: B	Type: int64_t	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: int64_t	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
int64_t UKismetMathLibrary::Or_Int64Int64(int64_t A, int64_t B) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Or_Int64Int64");

	struct UKismetMathLibrary_Or_Int64Int64_Params {
		int64_t A;			//Offset: 0 | ElementSize: 8
		int64_t B;			//Offset: 8 | ElementSize: 8
		int64_t ReturnValue;			//Offset: 16 | ElementSize: 8
	};
	UKismetMathLibrary_Or_Int64Int64_Params params;
	params.A = A;
	params.B = B;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Or_IntInt
// Flags: Final, Native, Static, Public, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: int32_t	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: B	Type: int32_t	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: int32_t	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
int32_t UKismetMathLibrary::Or_IntInt(int32_t A, int32_t B) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Or_IntInt");

	struct UKismetMathLibrary_Or_IntInt_Params {
		int32_t A;			//Offset: 0 | ElementSize: 4
		int32_t B;			//Offset: 4 | ElementSize: 4
		int32_t ReturnValue;			//Offset: 8 | ElementSize: 4
	};
	UKismetMathLibrary_Or_IntInt_Params params;
	params.A = A;
	params.B = B;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Percent_ByteByte
// Flags: Final, Native, Static, Public, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: unsigned char	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: B	Type: unsigned char	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: unsigned char	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
unsigned char UKismetMathLibrary::Percent_ByteByte(unsigned char A, unsigned char B) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Percent_ByteByte");

	struct UKismetMathLibrary_Percent_ByteByte_Params {
		unsigned char A;			//Offset: 0 | ElementSize: 1
		unsigned char B;			//Offset: 1 | ElementSize: 1
		unsigned char ReturnValue;			//Offset: 2 | ElementSize: 1
	};
	UKismetMathLibrary_Percent_ByteByte_Params params;
	params.A = A;
	params.B = B;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Percent_FloatFloat
// Flags: Final, Native, Static, Public, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: B	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: float	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
float UKismetMathLibrary::Percent_FloatFloat(float A, float B) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Percent_FloatFloat");

	struct UKismetMathLibrary_Percent_FloatFloat_Params {
		float A;			//Offset: 0 | ElementSize: 4
		float B;			//Offset: 4 | ElementSize: 4
		float ReturnValue;			//Offset: 8 | ElementSize: 4
	};
	UKismetMathLibrary_Percent_FloatFloat_Params params;
	params.A = A;
	params.B = B;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Percent_IntInt
// Flags: Final, Native, Static, Public, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: int32_t	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: B	Type: int32_t	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: int32_t	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
int32_t UKismetMathLibrary::Percent_IntInt(int32_t A, int32_t B) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Percent_IntInt");

	struct UKismetMathLibrary_Percent_IntInt_Params {
		int32_t A;			//Offset: 0 | ElementSize: 4
		int32_t B;			//Offset: 4 | ElementSize: 4
		int32_t ReturnValue;			//Offset: 8 | ElementSize: 4
	};
	UKismetMathLibrary_Percent_IntInt_Params params;
	params.A = A;
	params.B = B;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.PerlinNoise1D
// Flags: Final, Native, Static, Public, BlueprintCallable, BlueprintPure
// Params:
// Name: Value	Type: float	Flags: ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: float	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
float UKismetMathLibrary::PerlinNoise1D(float Value) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.PerlinNoise1D");

	struct UKismetMathLibrary_PerlinNoise1D_Params {
		float Value;			//Offset: 0 | ElementSize: 4
		float ReturnValue;			//Offset: 4 | ElementSize: 4
	};
	UKismetMathLibrary_PerlinNoise1D_Params params;
	params.Value = Value;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.PointsAreCoplanar
// Flags: Final, Native, Static, Public, HasOutParms, BlueprintCallable, BlueprintPure
// Params:
// Name: Points	Type: TArray<struct FVector>	Flags: ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic
// Name: Tolerance	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: bool	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
bool UKismetMathLibrary::PointsAreCoplanar(const TArray<struct FVector>& Points, float Tolerance) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.PointsAreCoplanar");

	struct UKismetMathLibrary_PointsAreCoplanar_Params {
		TArray<struct FVector> Points;			//Offset: 0 | ElementSize: 16
		float Tolerance;			//Offset: 16 | ElementSize: 4
		bool ReturnValue;			//Offset: 20 | ElementSize: 1
	};
	UKismetMathLibrary_PointsAreCoplanar_Params params;
	params.Points = Points;
	params.Tolerance = Tolerance;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.ProjectPointOnToPlane
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: Point	Type: struct FVector	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: PlaneBase	Type: struct FVector	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: PlaneNormal	Type: struct FVector	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FVector	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FVector UKismetMathLibrary::ProjectPointOnToPlane(struct FVector Point, struct FVector PlaneBase, struct FVector PlaneNormal) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.ProjectPointOnToPlane");

	struct UKismetMathLibrary_ProjectPointOnToPlane_Params {
		struct FVector Point;			//Offset: 0 | ElementSize: 12
		struct FVector PlaneBase;			//Offset: 12 | ElementSize: 12
		struct FVector PlaneNormal;			//Offset: 24 | ElementSize: 12
		struct FVector ReturnValue;			//Offset: 36 | ElementSize: 12
	};
	UKismetMathLibrary_ProjectPointOnToPlane_Params params;
	params.Point = Point;
	params.PlaneBase = PlaneBase;
	params.PlaneNormal = PlaneNormal;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.ProjectVectorOnToPlane
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: V	Type: struct FVector	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: PlaneNormal	Type: struct FVector	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FVector	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FVector UKismetMathLibrary::ProjectVectorOnToPlane(struct FVector V, struct FVector PlaneNormal) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.ProjectVectorOnToPlane");

	struct UKismetMathLibrary_ProjectVectorOnToPlane_Params {
		struct FVector V;			//Offset: 0 | ElementSize: 12
		struct FVector PlaneNormal;			//Offset: 12 | ElementSize: 12
		struct FVector ReturnValue;			//Offset: 24 | ElementSize: 12
	};
	UKismetMathLibrary_ProjectVectorOnToPlane_Params params;
	params.V = V;
	params.PlaneNormal = PlaneNormal;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.ProjectVectorOnToVector
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: V	Type: struct FVector	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: Target	Type: struct FVector	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FVector	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FVector UKismetMathLibrary::ProjectVectorOnToVector(struct FVector V, struct FVector Target) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.ProjectVectorOnToVector");

	struct UKismetMathLibrary_ProjectVectorOnToVector_Params {
		struct FVector V;			//Offset: 0 | ElementSize: 12
		struct FVector Target;			//Offset: 12 | ElementSize: 12
		struct FVector ReturnValue;			//Offset: 24 | ElementSize: 12
	};
	UKismetMathLibrary_ProjectVectorOnToVector_Params params;
	params.V = V;
	params.Target = Target;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Quat_AngularDistance
// Flags: Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: struct FQuat	Flags: ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
// Name: B	Type: struct FQuat	Flags: ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: float	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
float UKismetMathLibrary::Quat_AngularDistance(const struct FQuat& A, const struct FQuat& B) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Quat_AngularDistance");

	struct UKismetMathLibrary_Quat_AngularDistance_Params {
		struct FQuat A;			//Offset: 0 | ElementSize: 16
		struct FQuat B;			//Offset: 16 | ElementSize: 16
		float ReturnValue;			//Offset: 32 | ElementSize: 4
	};
	UKismetMathLibrary_Quat_AngularDistance_Params params;
	params.A = A;
	params.B = B;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Quat_EnforceShortestArcWith
// Flags: Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable
// Params:
// Name: A	Type: struct FQuat	Flags: Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
// Name: B	Type: struct FQuat	Flags: ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
/////////////////////////////////////////////
void UKismetMathLibrary::Quat_EnforceShortestArcWith(struct FQuat* A, const struct FQuat& B) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Quat_EnforceShortestArcWith");

	struct UKismetMathLibrary_Quat_EnforceShortestArcWith_Params {
		struct FQuat A;			//Offset: 0 | ElementSize: 16
		struct FQuat B;			//Offset: 16 | ElementSize: 16
	};
	UKismetMathLibrary_Quat_EnforceShortestArcWith_Params params;
	params.B = B;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	if (A != nullptr)
		*A = params.A;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Quat_Euler
// Flags: Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: Q	Type: struct FQuat	Flags: ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FVector	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FVector UKismetMathLibrary::Quat_Euler(const struct FQuat& Q) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Quat_Euler");

	struct UKismetMathLibrary_Quat_Euler_Params {
		struct FQuat Q;			//Offset: 0 | ElementSize: 16
		struct FVector ReturnValue;			//Offset: 16 | ElementSize: 12
	};
	UKismetMathLibrary_Quat_Euler_Params params;
	params.Q = Q;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Quat_Exp
// Flags: Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: Q	Type: struct FQuat	Flags: ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FQuat	Flags: Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FQuat UKismetMathLibrary::Quat_Exp(const struct FQuat& Q) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Quat_Exp");

	struct UKismetMathLibrary_Quat_Exp_Params {
		struct FQuat Q;			//Offset: 0 | ElementSize: 16
		struct FQuat ReturnValue;			//Offset: 16 | ElementSize: 16
	};
	UKismetMathLibrary_Quat_Exp_Params params;
	params.Q = Q;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Quat_GetAngle
// Flags: Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: Q	Type: struct FQuat	Flags: ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: float	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
float UKismetMathLibrary::Quat_GetAngle(const struct FQuat& Q) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Quat_GetAngle");

	struct UKismetMathLibrary_Quat_GetAngle_Params {
		struct FQuat Q;			//Offset: 0 | ElementSize: 16
		float ReturnValue;			//Offset: 16 | ElementSize: 4
	};
	UKismetMathLibrary_Quat_GetAngle_Params params;
	params.Q = Q;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Quat_GetAxisX
// Flags: Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: Q	Type: struct FQuat	Flags: ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FVector	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FVector UKismetMathLibrary::Quat_GetAxisX(const struct FQuat& Q) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Quat_GetAxisX");

	struct UKismetMathLibrary_Quat_GetAxisX_Params {
		struct FQuat Q;			//Offset: 0 | ElementSize: 16
		struct FVector ReturnValue;			//Offset: 16 | ElementSize: 12
	};
	UKismetMathLibrary_Quat_GetAxisX_Params params;
	params.Q = Q;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Quat_GetAxisY
// Flags: Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: Q	Type: struct FQuat	Flags: ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FVector	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FVector UKismetMathLibrary::Quat_GetAxisY(const struct FQuat& Q) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Quat_GetAxisY");

	struct UKismetMathLibrary_Quat_GetAxisY_Params {
		struct FQuat Q;			//Offset: 0 | ElementSize: 16
		struct FVector ReturnValue;			//Offset: 16 | ElementSize: 12
	};
	UKismetMathLibrary_Quat_GetAxisY_Params params;
	params.Q = Q;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Quat_GetAxisZ
// Flags: Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: Q	Type: struct FQuat	Flags: ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FVector	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FVector UKismetMathLibrary::Quat_GetAxisZ(const struct FQuat& Q) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Quat_GetAxisZ");

	struct UKismetMathLibrary_Quat_GetAxisZ_Params {
		struct FQuat Q;			//Offset: 0 | ElementSize: 16
		struct FVector ReturnValue;			//Offset: 16 | ElementSize: 12
	};
	UKismetMathLibrary_Quat_GetAxisZ_Params params;
	params.Q = Q;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Quat_GetRotationAxis
// Flags: Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: Q	Type: struct FQuat	Flags: ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FVector	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FVector UKismetMathLibrary::Quat_GetRotationAxis(const struct FQuat& Q) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Quat_GetRotationAxis");

	struct UKismetMathLibrary_Quat_GetRotationAxis_Params {
		struct FQuat Q;			//Offset: 0 | ElementSize: 16
		struct FVector ReturnValue;			//Offset: 16 | ElementSize: 12
	};
	UKismetMathLibrary_Quat_GetRotationAxis_Params params;
	params.Q = Q;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Quat_Identity
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: ReturnValue	Type: struct FQuat	Flags: Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FQuat UKismetMathLibrary::Quat_Identity() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Quat_Identity");

	struct UKismetMathLibrary_Quat_Identity_Params {
		struct FQuat ReturnValue;			//Offset: 0 | ElementSize: 16
	};
	UKismetMathLibrary_Quat_Identity_Params params;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Quat_Inversed
// Flags: Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: Q	Type: struct FQuat	Flags: ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FQuat	Flags: Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FQuat UKismetMathLibrary::Quat_Inversed(const struct FQuat& Q) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Quat_Inversed");

	struct UKismetMathLibrary_Quat_Inversed_Params {
		struct FQuat Q;			//Offset: 0 | ElementSize: 16
		struct FQuat ReturnValue;			//Offset: 16 | ElementSize: 16
	};
	UKismetMathLibrary_Quat_Inversed_Params params;
	params.Q = Q;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Quat_IsFinite
// Flags: Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: Q	Type: struct FQuat	Flags: ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: bool	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
bool UKismetMathLibrary::Quat_IsFinite(const struct FQuat& Q) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Quat_IsFinite");

	struct UKismetMathLibrary_Quat_IsFinite_Params {
		struct FQuat Q;			//Offset: 0 | ElementSize: 16
		bool ReturnValue;			//Offset: 16 | ElementSize: 1
	};
	UKismetMathLibrary_Quat_IsFinite_Params params;
	params.Q = Q;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Quat_IsIdentity
// Flags: Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: Q	Type: struct FQuat	Flags: ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
// Name: Tolerance	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: bool	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
bool UKismetMathLibrary::Quat_IsIdentity(const struct FQuat& Q, float Tolerance) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Quat_IsIdentity");

	struct UKismetMathLibrary_Quat_IsIdentity_Params {
		struct FQuat Q;			//Offset: 0 | ElementSize: 16
		float Tolerance;			//Offset: 16 | ElementSize: 4
		bool ReturnValue;			//Offset: 20 | ElementSize: 1
	};
	UKismetMathLibrary_Quat_IsIdentity_Params params;
	params.Q = Q;
	params.Tolerance = Tolerance;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Quat_IsNonFinite
// Flags: Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: Q	Type: struct FQuat	Flags: ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: bool	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
bool UKismetMathLibrary::Quat_IsNonFinite(const struct FQuat& Q) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Quat_IsNonFinite");

	struct UKismetMathLibrary_Quat_IsNonFinite_Params {
		struct FQuat Q;			//Offset: 0 | ElementSize: 16
		bool ReturnValue;			//Offset: 16 | ElementSize: 1
	};
	UKismetMathLibrary_Quat_IsNonFinite_Params params;
	params.Q = Q;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Quat_IsNormalized
// Flags: Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: Q	Type: struct FQuat	Flags: ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: bool	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
bool UKismetMathLibrary::Quat_IsNormalized(const struct FQuat& Q) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Quat_IsNormalized");

	struct UKismetMathLibrary_Quat_IsNormalized_Params {
		struct FQuat Q;			//Offset: 0 | ElementSize: 16
		bool ReturnValue;			//Offset: 16 | ElementSize: 1
	};
	UKismetMathLibrary_Quat_IsNormalized_Params params;
	params.Q = Q;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Quat_Log
// Flags: Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: Q	Type: struct FQuat	Flags: ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FQuat	Flags: Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FQuat UKismetMathLibrary::Quat_Log(const struct FQuat& Q) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Quat_Log");

	struct UKismetMathLibrary_Quat_Log_Params {
		struct FQuat Q;			//Offset: 0 | ElementSize: 16
		struct FQuat ReturnValue;			//Offset: 16 | ElementSize: 16
	};
	UKismetMathLibrary_Quat_Log_Params params;
	params.Q = Q;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Quat_MakeFromEuler
// Flags: Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: Euler	Type: struct FVector	Flags: ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FQuat	Flags: Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FQuat UKismetMathLibrary::Quat_MakeFromEuler(const struct FVector& Euler) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Quat_MakeFromEuler");

	struct UKismetMathLibrary_Quat_MakeFromEuler_Params {
		struct FVector Euler;			//Offset: 0 | ElementSize: 12
		struct FQuat ReturnValue;			//Offset: 16 | ElementSize: 16
	};
	UKismetMathLibrary_Quat_MakeFromEuler_Params params;
	params.Euler = Euler;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Quat_Normalize
// Flags: Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable
// Params:
// Name: Q	Type: struct FQuat	Flags: Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
// Name: Tolerance	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
void UKismetMathLibrary::Quat_Normalize(struct FQuat* Q, float Tolerance) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Quat_Normalize");

	struct UKismetMathLibrary_Quat_Normalize_Params {
		struct FQuat Q;			//Offset: 0 | ElementSize: 16
		float Tolerance;			//Offset: 16 | ElementSize: 4
	};
	UKismetMathLibrary_Quat_Normalize_Params params;
	params.Tolerance = Tolerance;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	if (Q != nullptr)
		*Q = params.Q;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Quat_Normalized
// Flags: Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: Q	Type: struct FQuat	Flags: ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
// Name: Tolerance	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FQuat	Flags: Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FQuat UKismetMathLibrary::Quat_Normalized(const struct FQuat& Q, float Tolerance) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Quat_Normalized");

	struct UKismetMathLibrary_Quat_Normalized_Params {
		struct FQuat Q;			//Offset: 0 | ElementSize: 16
		float Tolerance;			//Offset: 16 | ElementSize: 4
		struct FQuat ReturnValue;			//Offset: 32 | ElementSize: 16
	};
	UKismetMathLibrary_Quat_Normalized_Params params;
	params.Q = Q;
	params.Tolerance = Tolerance;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Quat_RotateVector
// Flags: Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: Q	Type: struct FQuat	Flags: ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
// Name: V	Type: struct FVector	Flags: ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FVector	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FVector UKismetMathLibrary::Quat_RotateVector(const struct FQuat& Q, const struct FVector& V) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Quat_RotateVector");

	struct UKismetMathLibrary_Quat_RotateVector_Params {
		struct FQuat Q;			//Offset: 0 | ElementSize: 16
		struct FVector V;			//Offset: 16 | ElementSize: 12
		struct FVector ReturnValue;			//Offset: 28 | ElementSize: 12
	};
	UKismetMathLibrary_Quat_RotateVector_Params params;
	params.Q = Q;
	params.V = V;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Quat_Rotator
// Flags: Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: Q	Type: struct FQuat	Flags: ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FRotator	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FRotator UKismetMathLibrary::Quat_Rotator(const struct FQuat& Q) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Quat_Rotator");

	struct UKismetMathLibrary_Quat_Rotator_Params {
		struct FQuat Q;			//Offset: 0 | ElementSize: 16
		struct FRotator ReturnValue;			//Offset: 16 | ElementSize: 12
	};
	UKismetMathLibrary_Quat_Rotator_Params params;
	params.Q = Q;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Quat_SetComponents
// Flags: Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable
// Params:
// Name: Q	Type: struct FQuat	Flags: Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
// Name: X	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: Y	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: Z	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: W	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
void UKismetMathLibrary::Quat_SetComponents(struct FQuat* Q, float X, float Y, float Z, float W) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Quat_SetComponents");

	struct UKismetMathLibrary_Quat_SetComponents_Params {
		struct FQuat Q;			//Offset: 0 | ElementSize: 16
		float X;			//Offset: 16 | ElementSize: 4
		float Y;			//Offset: 20 | ElementSize: 4
		float Z;			//Offset: 24 | ElementSize: 4
		float W;			//Offset: 28 | ElementSize: 4
	};
	UKismetMathLibrary_Quat_SetComponents_Params params;
	params.X = X;
	params.Y = Y;
	params.Z = Z;
	params.W = W;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	if (Q != nullptr)
		*Q = params.Q;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Quat_SetFromEuler
// Flags: Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable
// Params:
// Name: Q	Type: struct FQuat	Flags: Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
// Name: Euler	Type: struct FVector	Flags: ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
void UKismetMathLibrary::Quat_SetFromEuler(struct FQuat* Q, const struct FVector& Euler) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Quat_SetFromEuler");

	struct UKismetMathLibrary_Quat_SetFromEuler_Params {
		struct FQuat Q;			//Offset: 0 | ElementSize: 16
		struct FVector Euler;			//Offset: 16 | ElementSize: 12
	};
	UKismetMathLibrary_Quat_SetFromEuler_Params params;
	params.Euler = Euler;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	if (Q != nullptr)
		*Q = params.Q;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Quat_Size
// Flags: Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: Q	Type: struct FQuat	Flags: ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: float	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
float UKismetMathLibrary::Quat_Size(const struct FQuat& Q) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Quat_Size");

	struct UKismetMathLibrary_Quat_Size_Params {
		struct FQuat Q;			//Offset: 0 | ElementSize: 16
		float ReturnValue;			//Offset: 16 | ElementSize: 4
	};
	UKismetMathLibrary_Quat_Size_Params params;
	params.Q = Q;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Quat_SizeSquared
// Flags: Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: Q	Type: struct FQuat	Flags: ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: float	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
float UKismetMathLibrary::Quat_SizeSquared(const struct FQuat& Q) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Quat_SizeSquared");

	struct UKismetMathLibrary_Quat_SizeSquared_Params {
		struct FQuat Q;			//Offset: 0 | ElementSize: 16
		float ReturnValue;			//Offset: 16 | ElementSize: 4
	};
	UKismetMathLibrary_Quat_SizeSquared_Params params;
	params.Q = Q;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Quat_UnrotateVector
// Flags: Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: Q	Type: struct FQuat	Flags: ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
// Name: V	Type: struct FVector	Flags: ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FVector	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FVector UKismetMathLibrary::Quat_UnrotateVector(const struct FQuat& Q, const struct FVector& V) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Quat_UnrotateVector");

	struct UKismetMathLibrary_Quat_UnrotateVector_Params {
		struct FQuat Q;			//Offset: 0 | ElementSize: 16
		struct FVector V;			//Offset: 16 | ElementSize: 12
		struct FVector ReturnValue;			//Offset: 28 | ElementSize: 12
	};
	UKismetMathLibrary_Quat_UnrotateVector_Params params;
	params.Q = Q;
	params.V = V;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Quat_VectorForward
// Flags: Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: Q	Type: struct FQuat	Flags: ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FVector	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FVector UKismetMathLibrary::Quat_VectorForward(const struct FQuat& Q) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Quat_VectorForward");

	struct UKismetMathLibrary_Quat_VectorForward_Params {
		struct FQuat Q;			//Offset: 0 | ElementSize: 16
		struct FVector ReturnValue;			//Offset: 16 | ElementSize: 12
	};
	UKismetMathLibrary_Quat_VectorForward_Params params;
	params.Q = Q;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Quat_VectorRight
// Flags: Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: Q	Type: struct FQuat	Flags: ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FVector	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FVector UKismetMathLibrary::Quat_VectorRight(const struct FQuat& Q) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Quat_VectorRight");

	struct UKismetMathLibrary_Quat_VectorRight_Params {
		struct FQuat Q;			//Offset: 0 | ElementSize: 16
		struct FVector ReturnValue;			//Offset: 16 | ElementSize: 12
	};
	UKismetMathLibrary_Quat_VectorRight_Params params;
	params.Q = Q;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Quat_VectorUp
// Flags: Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: Q	Type: struct FQuat	Flags: ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FVector	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FVector UKismetMathLibrary::Quat_VectorUp(const struct FQuat& Q) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Quat_VectorUp");

	struct UKismetMathLibrary_Quat_VectorUp_Params {
		struct FQuat Q;			//Offset: 0 | ElementSize: 16
		struct FVector ReturnValue;			//Offset: 16 | ElementSize: 12
	};
	UKismetMathLibrary_Quat_VectorUp_Params params;
	params.Q = Q;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.RadiansToDegrees
// Flags: Final, Native, Static, Public, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: float	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
float UKismetMathLibrary::RadiansToDegrees(float A) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.RadiansToDegrees");

	struct UKismetMathLibrary_RadiansToDegrees_Params {
		float A;			//Offset: 0 | ElementSize: 4
		float ReturnValue;			//Offset: 4 | ElementSize: 4
	};
	UKismetMathLibrary_RadiansToDegrees_Params params;
	params.A = A;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.RandomBool
// Flags: Final, Native, Static, Public, BlueprintCallable, BlueprintPure
// Params:
// Name: ReturnValue	Type: bool	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
bool UKismetMathLibrary::RandomBool() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.RandomBool");

	struct UKismetMathLibrary_RandomBool_Params {
		bool ReturnValue;			//Offset: 0 | ElementSize: 1
	};
	UKismetMathLibrary_RandomBool_Params params;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.RandomBoolFromStream
// Flags: Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: Stream	Type: struct FRandomStream	Flags: ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: bool	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
bool UKismetMathLibrary::RandomBoolFromStream(const struct FRandomStream& Stream) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.RandomBoolFromStream");

	struct UKismetMathLibrary_RandomBoolFromStream_Params {
		struct FRandomStream Stream;			//Offset: 0 | ElementSize: 8
		bool ReturnValue;			//Offset: 8 | ElementSize: 1
	};
	UKismetMathLibrary_RandomBoolFromStream_Params params;
	params.Stream = Stream;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.RandomBoolWithWeight
// Flags: Final, Native, Static, Public, BlueprintCallable, BlueprintPure
// Params:
// Name: Weight	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: bool	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
bool UKismetMathLibrary::RandomBoolWithWeight(float Weight) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.RandomBoolWithWeight");

	struct UKismetMathLibrary_RandomBoolWithWeight_Params {
		float Weight;			//Offset: 0 | ElementSize: 4
		bool ReturnValue;			//Offset: 4 | ElementSize: 1
	};
	UKismetMathLibrary_RandomBoolWithWeight_Params params;
	params.Weight = Weight;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.RandomBoolWithWeightFromStream
// Flags: Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: Weight	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: RandomStream	Type: struct FRandomStream	Flags: ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: bool	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
bool UKismetMathLibrary::RandomBoolWithWeightFromStream(float Weight, const struct FRandomStream& RandomStream) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.RandomBoolWithWeightFromStream");

	struct UKismetMathLibrary_RandomBoolWithWeightFromStream_Params {
		float Weight;			//Offset: 0 | ElementSize: 4
		struct FRandomStream RandomStream;			//Offset: 4 | ElementSize: 8
		bool ReturnValue;			//Offset: 12 | ElementSize: 1
	};
	UKismetMathLibrary_RandomBoolWithWeightFromStream_Params params;
	params.Weight = Weight;
	params.RandomStream = RandomStream;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.RandomFloat
// Flags: Final, Native, Static, Public, BlueprintCallable, BlueprintPure
// Params:
// Name: ReturnValue	Type: float	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
float UKismetMathLibrary::RandomFloat() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.RandomFloat");

	struct UKismetMathLibrary_RandomFloat_Params {
		float ReturnValue;			//Offset: 0 | ElementSize: 4
	};
	UKismetMathLibrary_RandomFloat_Params params;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.RandomFloatFromStream
// Flags: Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: Stream	Type: struct FRandomStream	Flags: ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: float	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
float UKismetMathLibrary::RandomFloatFromStream(const struct FRandomStream& Stream) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.RandomFloatFromStream");

	struct UKismetMathLibrary_RandomFloatFromStream_Params {
		struct FRandomStream Stream;			//Offset: 0 | ElementSize: 8
		float ReturnValue;			//Offset: 8 | ElementSize: 4
	};
	UKismetMathLibrary_RandomFloatFromStream_Params params;
	params.Stream = Stream;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.RandomFloatInRange
// Flags: Final, Native, Static, Public, BlueprintCallable, BlueprintPure
// Params:
// Name: Min	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: Max	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: float	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
float UKismetMathLibrary::RandomFloatInRange(float Min, float Max) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.RandomFloatInRange");

	struct UKismetMathLibrary_RandomFloatInRange_Params {
		float Min;			//Offset: 0 | ElementSize: 4
		float Max;			//Offset: 4 | ElementSize: 4
		float ReturnValue;			//Offset: 8 | ElementSize: 4
	};
	UKismetMathLibrary_RandomFloatInRange_Params params;
	params.Min = Min;
	params.Max = Max;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.RandomFloatInRangeFromStream
// Flags: Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: Min	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: Max	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: Stream	Type: struct FRandomStream	Flags: ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: float	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
float UKismetMathLibrary::RandomFloatInRangeFromStream(float Min, float Max, const struct FRandomStream& Stream) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.RandomFloatInRangeFromStream");

	struct UKismetMathLibrary_RandomFloatInRangeFromStream_Params {
		float Min;			//Offset: 0 | ElementSize: 4
		float Max;			//Offset: 4 | ElementSize: 4
		struct FRandomStream Stream;			//Offset: 8 | ElementSize: 8
		float ReturnValue;			//Offset: 16 | ElementSize: 4
	};
	UKismetMathLibrary_RandomFloatInRangeFromStream_Params params;
	params.Min = Min;
	params.Max = Max;
	params.Stream = Stream;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.RandomInteger
// Flags: Final, Native, Static, Public, BlueprintCallable, BlueprintPure
// Params:
// Name: Max	Type: int32_t	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: int32_t	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
int32_t UKismetMathLibrary::RandomInteger(int32_t Max) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.RandomInteger");

	struct UKismetMathLibrary_RandomInteger_Params {
		int32_t Max;			//Offset: 0 | ElementSize: 4
		int32_t ReturnValue;			//Offset: 4 | ElementSize: 4
	};
	UKismetMathLibrary_RandomInteger_Params params;
	params.Max = Max;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.RandomInteger64
// Flags: Final, Native, Static, Public, BlueprintCallable, BlueprintPure
// Params:
// Name: Max	Type: int64_t	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: int64_t	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
int64_t UKismetMathLibrary::RandomInteger64(int64_t Max) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.RandomInteger64");

	struct UKismetMathLibrary_RandomInteger64_Params {
		int64_t Max;			//Offset: 0 | ElementSize: 8
		int64_t ReturnValue;			//Offset: 8 | ElementSize: 8
	};
	UKismetMathLibrary_RandomInteger64_Params params;
	params.Max = Max;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.RandomInteger64InRange
// Flags: Final, Native, Static, Public, BlueprintCallable, BlueprintPure
// Params:
// Name: Min	Type: int64_t	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: Max	Type: int64_t	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: int64_t	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
int64_t UKismetMathLibrary::RandomInteger64InRange(int64_t Min, int64_t Max) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.RandomInteger64InRange");

	struct UKismetMathLibrary_RandomInteger64InRange_Params {
		int64_t Min;			//Offset: 0 | ElementSize: 8
		int64_t Max;			//Offset: 8 | ElementSize: 8
		int64_t ReturnValue;			//Offset: 16 | ElementSize: 8
	};
	UKismetMathLibrary_RandomInteger64InRange_Params params;
	params.Min = Min;
	params.Max = Max;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.RandomIntegerFromStream
// Flags: Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: Max	Type: int32_t	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: Stream	Type: struct FRandomStream	Flags: ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: int32_t	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
int32_t UKismetMathLibrary::RandomIntegerFromStream(int32_t Max, const struct FRandomStream& Stream) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.RandomIntegerFromStream");

	struct UKismetMathLibrary_RandomIntegerFromStream_Params {
		int32_t Max;			//Offset: 0 | ElementSize: 4
		struct FRandomStream Stream;			//Offset: 4 | ElementSize: 8
		int32_t ReturnValue;			//Offset: 12 | ElementSize: 4
	};
	UKismetMathLibrary_RandomIntegerFromStream_Params params;
	params.Max = Max;
	params.Stream = Stream;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.RandomIntegerInRange
// Flags: Final, Native, Static, Public, BlueprintCallable, BlueprintPure
// Params:
// Name: Min	Type: int32_t	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: Max	Type: int32_t	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: int32_t	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
int32_t UKismetMathLibrary::RandomIntegerInRange(int32_t Min, int32_t Max) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.RandomIntegerInRange");

	struct UKismetMathLibrary_RandomIntegerInRange_Params {
		int32_t Min;			//Offset: 0 | ElementSize: 4
		int32_t Max;			//Offset: 4 | ElementSize: 4
		int32_t ReturnValue;			//Offset: 8 | ElementSize: 4
	};
	UKismetMathLibrary_RandomIntegerInRange_Params params;
	params.Min = Min;
	params.Max = Max;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.RandomIntegerInRangeFromStream
// Flags: Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: Min	Type: int32_t	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: Max	Type: int32_t	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: Stream	Type: struct FRandomStream	Flags: ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: int32_t	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
int32_t UKismetMathLibrary::RandomIntegerInRangeFromStream(int32_t Min, int32_t Max, const struct FRandomStream& Stream) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.RandomIntegerInRangeFromStream");

	struct UKismetMathLibrary_RandomIntegerInRangeFromStream_Params {
		int32_t Min;			//Offset: 0 | ElementSize: 4
		int32_t Max;			//Offset: 4 | ElementSize: 4
		struct FRandomStream Stream;			//Offset: 8 | ElementSize: 8
		int32_t ReturnValue;			//Offset: 16 | ElementSize: 4
	};
	UKismetMathLibrary_RandomIntegerInRangeFromStream_Params params;
	params.Min = Min;
	params.Max = Max;
	params.Stream = Stream;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.RandomPointInBoundingBox
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: Origin	Type: struct FVector	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: BoxExtent	Type: struct FVector	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FVector	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FVector UKismetMathLibrary::RandomPointInBoundingBox(struct FVector Origin, struct FVector BoxExtent) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.RandomPointInBoundingBox");

	struct UKismetMathLibrary_RandomPointInBoundingBox_Params {
		struct FVector Origin;			//Offset: 0 | ElementSize: 12
		struct FVector BoxExtent;			//Offset: 12 | ElementSize: 12
		struct FVector ReturnValue;			//Offset: 24 | ElementSize: 12
	};
	UKismetMathLibrary_RandomPointInBoundingBox_Params params;
	params.Origin = Origin;
	params.BoxExtent = BoxExtent;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.RandomRotator
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: bRoll	Type: bool	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FRotator	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FRotator UKismetMathLibrary::RandomRotator(bool bRoll) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.RandomRotator");

	struct UKismetMathLibrary_RandomRotator_Params {
		bool bRoll;			//Offset: 0 | ElementSize: 1
		struct FRotator ReturnValue;			//Offset: 4 | ElementSize: 12
	};
	UKismetMathLibrary_RandomRotator_Params params;
	params.bRoll = bRoll;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.RandomRotatorFromStream
// Flags: Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: bRoll	Type: bool	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: Stream	Type: struct FRandomStream	Flags: ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FRotator	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FRotator UKismetMathLibrary::RandomRotatorFromStream(bool bRoll, const struct FRandomStream& Stream) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.RandomRotatorFromStream");

	struct UKismetMathLibrary_RandomRotatorFromStream_Params {
		bool bRoll;			//Offset: 0 | ElementSize: 1
		struct FRandomStream Stream;			//Offset: 4 | ElementSize: 8
		struct FRotator ReturnValue;			//Offset: 12 | ElementSize: 12
	};
	UKismetMathLibrary_RandomRotatorFromStream_Params params;
	params.bRoll = bRoll;
	params.Stream = Stream;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.RandomUnitVector
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: ReturnValue	Type: struct FVector	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FVector UKismetMathLibrary::RandomUnitVector() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.RandomUnitVector");

	struct UKismetMathLibrary_RandomUnitVector_Params {
		struct FVector ReturnValue;			//Offset: 0 | ElementSize: 12
	};
	UKismetMathLibrary_RandomUnitVector_Params params;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.RandomUnitVectorFromStream
// Flags: Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: Stream	Type: struct FRandomStream	Flags: ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FVector	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FVector UKismetMathLibrary::RandomUnitVectorFromStream(const struct FRandomStream& Stream) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.RandomUnitVectorFromStream");

	struct UKismetMathLibrary_RandomUnitVectorFromStream_Params {
		struct FRandomStream Stream;			//Offset: 0 | ElementSize: 8
		struct FVector ReturnValue;			//Offset: 8 | ElementSize: 12
	};
	UKismetMathLibrary_RandomUnitVectorFromStream_Params params;
	params.Stream = Stream;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.RandomUnitVectorInConeInDegrees
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: ConeDir	Type: struct FVector	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ConeHalfAngleInDegrees	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FVector	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FVector UKismetMathLibrary::RandomUnitVectorInConeInDegrees(struct FVector ConeDir, float ConeHalfAngleInDegrees) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.RandomUnitVectorInConeInDegrees");

	struct UKismetMathLibrary_RandomUnitVectorInConeInDegrees_Params {
		struct FVector ConeDir;			//Offset: 0 | ElementSize: 12
		float ConeHalfAngleInDegrees;			//Offset: 12 | ElementSize: 4
		struct FVector ReturnValue;			//Offset: 16 | ElementSize: 12
	};
	UKismetMathLibrary_RandomUnitVectorInConeInDegrees_Params params;
	params.ConeDir = ConeDir;
	params.ConeHalfAngleInDegrees = ConeHalfAngleInDegrees;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.RandomUnitVectorInConeInDegreesFromStream
// Flags: Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: ConeDir	Type: struct FVector	Flags: ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ConeHalfAngleInDegrees	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: Stream	Type: struct FRandomStream	Flags: ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FVector	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FVector UKismetMathLibrary::RandomUnitVectorInConeInDegreesFromStream(const struct FVector& ConeDir, float ConeHalfAngleInDegrees, const struct FRandomStream& Stream) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.RandomUnitVectorInConeInDegreesFromStream");

	struct UKismetMathLibrary_RandomUnitVectorInConeInDegreesFromStream_Params {
		struct FVector ConeDir;			//Offset: 0 | ElementSize: 12
		float ConeHalfAngleInDegrees;			//Offset: 12 | ElementSize: 4
		struct FRandomStream Stream;			//Offset: 16 | ElementSize: 8
		struct FVector ReturnValue;			//Offset: 24 | ElementSize: 12
	};
	UKismetMathLibrary_RandomUnitVectorInConeInDegreesFromStream_Params params;
	params.ConeDir = ConeDir;
	params.ConeHalfAngleInDegrees = ConeHalfAngleInDegrees;
	params.Stream = Stream;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.RandomUnitVectorInConeInRadians
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: ConeDir	Type: struct FVector	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ConeHalfAngleInRadians	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FVector	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FVector UKismetMathLibrary::RandomUnitVectorInConeInRadians(struct FVector ConeDir, float ConeHalfAngleInRadians) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.RandomUnitVectorInConeInRadians");

	struct UKismetMathLibrary_RandomUnitVectorInConeInRadians_Params {
		struct FVector ConeDir;			//Offset: 0 | ElementSize: 12
		float ConeHalfAngleInRadians;			//Offset: 12 | ElementSize: 4
		struct FVector ReturnValue;			//Offset: 16 | ElementSize: 12
	};
	UKismetMathLibrary_RandomUnitVectorInConeInRadians_Params params;
	params.ConeDir = ConeDir;
	params.ConeHalfAngleInRadians = ConeHalfAngleInRadians;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.RandomUnitVectorInConeInRadiansFromStream
// Flags: Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: ConeDir	Type: struct FVector	Flags: ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ConeHalfAngleInRadians	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: Stream	Type: struct FRandomStream	Flags: ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FVector	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FVector UKismetMathLibrary::RandomUnitVectorInConeInRadiansFromStream(const struct FVector& ConeDir, float ConeHalfAngleInRadians, const struct FRandomStream& Stream) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.RandomUnitVectorInConeInRadiansFromStream");

	struct UKismetMathLibrary_RandomUnitVectorInConeInRadiansFromStream_Params {
		struct FVector ConeDir;			//Offset: 0 | ElementSize: 12
		float ConeHalfAngleInRadians;			//Offset: 12 | ElementSize: 4
		struct FRandomStream Stream;			//Offset: 16 | ElementSize: 8
		struct FVector ReturnValue;			//Offset: 24 | ElementSize: 12
	};
	UKismetMathLibrary_RandomUnitVectorInConeInRadiansFromStream_Params params;
	params.ConeDir = ConeDir;
	params.ConeHalfAngleInRadians = ConeHalfAngleInRadians;
	params.Stream = Stream;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.RandomUnitVectorInEllipticalConeInDegrees
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: ConeDir	Type: struct FVector	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: MaxYawInDegrees	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: MaxPitchInDegrees	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FVector	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FVector UKismetMathLibrary::RandomUnitVectorInEllipticalConeInDegrees(struct FVector ConeDir, float MaxYawInDegrees, float MaxPitchInDegrees) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.RandomUnitVectorInEllipticalConeInDegrees");

	struct UKismetMathLibrary_RandomUnitVectorInEllipticalConeInDegrees_Params {
		struct FVector ConeDir;			//Offset: 0 | ElementSize: 12
		float MaxYawInDegrees;			//Offset: 12 | ElementSize: 4
		float MaxPitchInDegrees;			//Offset: 16 | ElementSize: 4
		struct FVector ReturnValue;			//Offset: 20 | ElementSize: 12
	};
	UKismetMathLibrary_RandomUnitVectorInEllipticalConeInDegrees_Params params;
	params.ConeDir = ConeDir;
	params.MaxYawInDegrees = MaxYawInDegrees;
	params.MaxPitchInDegrees = MaxPitchInDegrees;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.RandomUnitVectorInEllipticalConeInDegreesFromStream
// Flags: Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: ConeDir	Type: struct FVector	Flags: ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: MaxYawInDegrees	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: MaxPitchInDegrees	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: Stream	Type: struct FRandomStream	Flags: ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FVector	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FVector UKismetMathLibrary::RandomUnitVectorInEllipticalConeInDegreesFromStream(const struct FVector& ConeDir, float MaxYawInDegrees, float MaxPitchInDegrees, const struct FRandomStream& Stream) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.RandomUnitVectorInEllipticalConeInDegreesFromStream");

	struct UKismetMathLibrary_RandomUnitVectorInEllipticalConeInDegreesFromStream_Params {
		struct FVector ConeDir;			//Offset: 0 | ElementSize: 12
		float MaxYawInDegrees;			//Offset: 12 | ElementSize: 4
		float MaxPitchInDegrees;			//Offset: 16 | ElementSize: 4
		struct FRandomStream Stream;			//Offset: 20 | ElementSize: 8
		struct FVector ReturnValue;			//Offset: 28 | ElementSize: 12
	};
	UKismetMathLibrary_RandomUnitVectorInEllipticalConeInDegreesFromStream_Params params;
	params.ConeDir = ConeDir;
	params.MaxYawInDegrees = MaxYawInDegrees;
	params.MaxPitchInDegrees = MaxPitchInDegrees;
	params.Stream = Stream;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.RandomUnitVectorInEllipticalConeInRadians
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: ConeDir	Type: struct FVector	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: MaxYawInRadians	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: MaxPitchInRadians	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FVector	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FVector UKismetMathLibrary::RandomUnitVectorInEllipticalConeInRadians(struct FVector ConeDir, float MaxYawInRadians, float MaxPitchInRadians) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.RandomUnitVectorInEllipticalConeInRadians");

	struct UKismetMathLibrary_RandomUnitVectorInEllipticalConeInRadians_Params {
		struct FVector ConeDir;			//Offset: 0 | ElementSize: 12
		float MaxYawInRadians;			//Offset: 12 | ElementSize: 4
		float MaxPitchInRadians;			//Offset: 16 | ElementSize: 4
		struct FVector ReturnValue;			//Offset: 20 | ElementSize: 12
	};
	UKismetMathLibrary_RandomUnitVectorInEllipticalConeInRadians_Params params;
	params.ConeDir = ConeDir;
	params.MaxYawInRadians = MaxYawInRadians;
	params.MaxPitchInRadians = MaxPitchInRadians;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.RandomUnitVectorInEllipticalConeInRadiansFromStream
// Flags: Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: ConeDir	Type: struct FVector	Flags: ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: MaxYawInRadians	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: MaxPitchInRadians	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: Stream	Type: struct FRandomStream	Flags: ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FVector	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FVector UKismetMathLibrary::RandomUnitVectorInEllipticalConeInRadiansFromStream(const struct FVector& ConeDir, float MaxYawInRadians, float MaxPitchInRadians, const struct FRandomStream& Stream) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.RandomUnitVectorInEllipticalConeInRadiansFromStream");

	struct UKismetMathLibrary_RandomUnitVectorInEllipticalConeInRadiansFromStream_Params {
		struct FVector ConeDir;			//Offset: 0 | ElementSize: 12
		float MaxYawInRadians;			//Offset: 12 | ElementSize: 4
		float MaxPitchInRadians;			//Offset: 16 | ElementSize: 4
		struct FRandomStream Stream;			//Offset: 20 | ElementSize: 8
		struct FVector ReturnValue;			//Offset: 28 | ElementSize: 12
	};
	UKismetMathLibrary_RandomUnitVectorInEllipticalConeInRadiansFromStream_Params params;
	params.ConeDir = ConeDir;
	params.MaxYawInRadians = MaxYawInRadians;
	params.MaxPitchInRadians = MaxPitchInRadians;
	params.Stream = Stream;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.REase
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: struct FRotator	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
// Name: B	Type: struct FRotator	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
// Name: Alpha	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: bShortestPath	Type: bool	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: EasingFunc	Type: TEnumAsByte<EEasingFunc>	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: BlendExp	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: Steps	Type: int32_t	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FRotator	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FRotator UKismetMathLibrary::REase(struct FRotator A, struct FRotator B, float Alpha, bool bShortestPath, TEnumAsByte<EEasingFunc> EasingFunc, float BlendExp, int32_t Steps) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.REase");

	struct UKismetMathLibrary_REase_Params {
		struct FRotator A;			//Offset: 0 | ElementSize: 12
		struct FRotator B;			//Offset: 12 | ElementSize: 12
		float Alpha;			//Offset: 24 | ElementSize: 4
		bool bShortestPath;			//Offset: 28 | ElementSize: 1
		TEnumAsByte<EEasingFunc> EasingFunc;			//Offset: 29 | ElementSize: 1
		float BlendExp;			//Offset: 32 | ElementSize: 4
		int32_t Steps;			//Offset: 36 | ElementSize: 4
		struct FRotator ReturnValue;			//Offset: 40 | ElementSize: 12
	};
	UKismetMathLibrary_REase_Params params;
	params.A = A;
	params.B = B;
	params.Alpha = Alpha;
	params.bShortestPath = bShortestPath;
	params.EasingFunc = EasingFunc;
	params.BlendExp = BlendExp;
	params.Steps = Steps;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.ResetFloatSpringState
// Flags: Final, Native, Static, Public, HasOutParms, BlueprintCallable
// Params:
// Name: SpringState	Type: struct FFloatSpringState	Flags: Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic
/////////////////////////////////////////////
void UKismetMathLibrary::ResetFloatSpringState(struct FFloatSpringState* SpringState) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.ResetFloatSpringState");

	struct UKismetMathLibrary_ResetFloatSpringState_Params {
		struct FFloatSpringState SpringState;			//Offset: 0 | ElementSize: 8
	};
	UKismetMathLibrary_ResetFloatSpringState_Params params;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	if (SpringState != nullptr)
		*SpringState = params.SpringState;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.ResetRandomStream
// Flags: Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable
// Params:
// Name: Stream	Type: struct FRandomStream	Flags: ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic
/////////////////////////////////////////////
void UKismetMathLibrary::ResetRandomStream(const struct FRandomStream& Stream) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.ResetRandomStream");

	struct UKismetMathLibrary_ResetRandomStream_Params {
		struct FRandomStream Stream;			//Offset: 0 | ElementSize: 8
	};
	UKismetMathLibrary_ResetRandomStream_Params params;
	params.Stream = Stream;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.ResetVectorSpringState
// Flags: Final, Native, Static, Public, HasOutParms, BlueprintCallable
// Params:
// Name: SpringState	Type: struct FVectorSpringState	Flags: Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic
/////////////////////////////////////////////
void UKismetMathLibrary::ResetVectorSpringState(struct FVectorSpringState* SpringState) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.ResetVectorSpringState");

	struct UKismetMathLibrary_ResetVectorSpringState_Params {
		struct FVectorSpringState SpringState;			//Offset: 0 | ElementSize: 24
	};
	UKismetMathLibrary_ResetVectorSpringState_Params params;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	if (SpringState != nullptr)
		*SpringState = params.SpringState;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.RGBLinearToHSV
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: RGB	Type: struct FLinearColor	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FLinearColor	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FLinearColor UKismetMathLibrary::RGBLinearToHSV(struct FLinearColor RGB) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.RGBLinearToHSV");

	struct UKismetMathLibrary_RGBLinearToHSV_Params {
		struct FLinearColor RGB;			//Offset: 0 | ElementSize: 16
		struct FLinearColor ReturnValue;			//Offset: 16 | ElementSize: 16
	};
	UKismetMathLibrary_RGBLinearToHSV_Params params;
	params.RGB = RGB;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.RGBToHSV
// Flags: Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: InColor	Type: struct FLinearColor	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: H	Type: float	Flags: Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: S	Type: float	Flags: Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: V	Type: float	Flags: Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: A	Type: float	Flags: Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
void UKismetMathLibrary::RGBToHSV(struct FLinearColor InColor, float* H, float* S, float* V, float* A) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.RGBToHSV");

	struct UKismetMathLibrary_RGBToHSV_Params {
		struct FLinearColor InColor;			//Offset: 0 | ElementSize: 16
		float H;			//Offset: 16 | ElementSize: 4
		float S;			//Offset: 20 | ElementSize: 4
		float V;			//Offset: 24 | ElementSize: 4
		float A;			//Offset: 28 | ElementSize: 4
	};
	UKismetMathLibrary_RGBToHSV_Params params;
	params.InColor = InColor;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	if (H != nullptr)
		*H = params.H;
	if (S != nullptr)
		*S = params.S;
	if (V != nullptr)
		*V = params.V;
	if (A != nullptr)
		*A = params.A;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.RGBToHSV_Vector
// Flags: Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: RGB	Type: struct FLinearColor	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: HSV	Type: struct FLinearColor	Flags: Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
void UKismetMathLibrary::RGBToHSV_Vector(struct FLinearColor RGB, struct FLinearColor* HSV) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.RGBToHSV_Vector");

	struct UKismetMathLibrary_RGBToHSV_Vector_Params {
		struct FLinearColor RGB;			//Offset: 0 | ElementSize: 16
		struct FLinearColor HSV;			//Offset: 16 | ElementSize: 16
	};
	UKismetMathLibrary_RGBToHSV_Vector_Params params;
	params.RGB = RGB;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	if (HSV != nullptr)
		*HSV = params.HSV;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.RInterpTo
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: Current	Type: struct FRotator	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
// Name: Target	Type: struct FRotator	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
// Name: DeltaTime	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: interpSpeed	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FRotator	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FRotator UKismetMathLibrary::RInterpTo(struct FRotator Current, struct FRotator Target, float DeltaTime, float interpSpeed) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.RInterpTo");

	struct UKismetMathLibrary_RInterpTo_Params {
		struct FRotator Current;			//Offset: 0 | ElementSize: 12
		struct FRotator Target;			//Offset: 12 | ElementSize: 12
		float DeltaTime;			//Offset: 24 | ElementSize: 4
		float interpSpeed;			//Offset: 28 | ElementSize: 4
		struct FRotator ReturnValue;			//Offset: 32 | ElementSize: 12
	};
	UKismetMathLibrary_RInterpTo_Params params;
	params.Current = Current;
	params.Target = Target;
	params.DeltaTime = DeltaTime;
	params.interpSpeed = interpSpeed;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.RInterpTo_Constant
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: Current	Type: struct FRotator	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
// Name: Target	Type: struct FRotator	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
// Name: DeltaTime	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: interpSpeed	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FRotator	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FRotator UKismetMathLibrary::RInterpTo_Constant(struct FRotator Current, struct FRotator Target, float DeltaTime, float interpSpeed) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.RInterpTo_Constant");

	struct UKismetMathLibrary_RInterpTo_Constant_Params {
		struct FRotator Current;			//Offset: 0 | ElementSize: 12
		struct FRotator Target;			//Offset: 12 | ElementSize: 12
		float DeltaTime;			//Offset: 24 | ElementSize: 4
		float interpSpeed;			//Offset: 28 | ElementSize: 4
		struct FRotator ReturnValue;			//Offset: 32 | ElementSize: 12
	};
	UKismetMathLibrary_RInterpTo_Constant_Params params;
	params.Current = Current;
	params.Target = Target;
	params.DeltaTime = DeltaTime;
	params.interpSpeed = interpSpeed;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.RLerp
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: struct FRotator	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
// Name: B	Type: struct FRotator	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
// Name: Alpha	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: bShortestPath	Type: bool	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FRotator	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FRotator UKismetMathLibrary::RLerp(struct FRotator A, struct FRotator B, float Alpha, bool bShortestPath) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.RLerp");

	struct UKismetMathLibrary_RLerp_Params {
		struct FRotator A;			//Offset: 0 | ElementSize: 12
		struct FRotator B;			//Offset: 12 | ElementSize: 12
		float Alpha;			//Offset: 24 | ElementSize: 4
		bool bShortestPath;			//Offset: 28 | ElementSize: 1
		struct FRotator ReturnValue;			//Offset: 32 | ElementSize: 12
	};
	UKismetMathLibrary_RLerp_Params params;
	params.A = A;
	params.B = B;
	params.Alpha = Alpha;
	params.bShortestPath = bShortestPath;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.RotateAngleAxis
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: InVect	Type: struct FVector	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: AngleDeg	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: Axis	Type: struct FVector	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FVector	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FVector UKismetMathLibrary::RotateAngleAxis(struct FVector InVect, float AngleDeg, struct FVector Axis) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.RotateAngleAxis");

	struct UKismetMathLibrary_RotateAngleAxis_Params {
		struct FVector InVect;			//Offset: 0 | ElementSize: 12
		float AngleDeg;			//Offset: 12 | ElementSize: 4
		struct FVector Axis;			//Offset: 16 | ElementSize: 12
		struct FVector ReturnValue;			//Offset: 28 | ElementSize: 12
	};
	UKismetMathLibrary_RotateAngleAxis_Params params;
	params.InVect = InVect;
	params.AngleDeg = AngleDeg;
	params.Axis = Axis;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.RotatorFromAxisAndAngle
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: Axis	Type: struct FVector	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: Angle	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FRotator	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FRotator UKismetMathLibrary::RotatorFromAxisAndAngle(struct FVector Axis, float Angle) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.RotatorFromAxisAndAngle");

	struct UKismetMathLibrary_RotatorFromAxisAndAngle_Params {
		struct FVector Axis;			//Offset: 0 | ElementSize: 12
		float Angle;			//Offset: 12 | ElementSize: 4
		struct FRotator ReturnValue;			//Offset: 16 | ElementSize: 12
	};
	UKismetMathLibrary_RotatorFromAxisAndAngle_Params params;
	params.Axis = Axis;
	params.Angle = Angle;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Round
// Flags: Final, Native, Static, Public, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: int32_t	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
int32_t UKismetMathLibrary::Round(float A) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Round");

	struct UKismetMathLibrary_Round_Params {
		float A;			//Offset: 0 | ElementSize: 4
		int32_t ReturnValue;			//Offset: 4 | ElementSize: 4
	};
	UKismetMathLibrary_Round_Params params;
	params.A = A;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Round64
// Flags: Final, Native, Static, Public, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: int64_t	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
int64_t UKismetMathLibrary::Round64(float A) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Round64");

	struct UKismetMathLibrary_Round64_Params {
		float A;			//Offset: 0 | ElementSize: 4
		int64_t ReturnValue;			//Offset: 8 | ElementSize: 8
	};
	UKismetMathLibrary_Round64_Params params;
	params.A = A;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.SafeDivide
// Flags: Final, Native, Static, Public, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: B	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: float	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
float UKismetMathLibrary::SafeDivide(float A, float B) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.SafeDivide");

	struct UKismetMathLibrary_SafeDivide_Params {
		float A;			//Offset: 0 | ElementSize: 4
		float B;			//Offset: 4 | ElementSize: 4
		float ReturnValue;			//Offset: 8 | ElementSize: 4
	};
	UKismetMathLibrary_SafeDivide_Params params;
	params.A = A;
	params.B = B;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.SeedRandomStream
// Flags: Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable
// Params:
// Name: Stream	Type: struct FRandomStream	Flags: Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic
/////////////////////////////////////////////
void UKismetMathLibrary::SeedRandomStream(struct FRandomStream* Stream) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.SeedRandomStream");

	struct UKismetMathLibrary_SeedRandomStream_Params {
		struct FRandomStream Stream;			//Offset: 0 | ElementSize: 8
	};
	UKismetMathLibrary_SeedRandomStream_Params params;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	if (Stream != nullptr)
		*Stream = params.Stream;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.SelectClass
// Flags: Final, Native, Static, Public, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: class UObject*	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: B	Type: class UObject*	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: bSelectA	Type: bool	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: class UObject*	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
class UObject* UKismetMathLibrary::SelectClass(class UObject* A, class UObject* B, bool bSelectA) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.SelectClass");

	struct UKismetMathLibrary_SelectClass_Params {
		class UObject* A;			//Offset: 0 | ElementSize: 8
		class UObject* B;			//Offset: 8 | ElementSize: 8
		bool bSelectA;			//Offset: 16 | ElementSize: 1
		class UObject* ReturnValue;			//Offset: 24 | ElementSize: 8
	};
	UKismetMathLibrary_SelectClass_Params params;
	params.A = A;
	params.B = B;
	params.bSelectA = bSelectA;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.SelectColor
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: struct FLinearColor	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: B	Type: struct FLinearColor	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: bPickA	Type: bool	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FLinearColor	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FLinearColor UKismetMathLibrary::SelectColor(struct FLinearColor A, struct FLinearColor B, bool bPickA) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.SelectColor");

	struct UKismetMathLibrary_SelectColor_Params {
		struct FLinearColor A;			//Offset: 0 | ElementSize: 16
		struct FLinearColor B;			//Offset: 16 | ElementSize: 16
		bool bPickA;			//Offset: 32 | ElementSize: 1
		struct FLinearColor ReturnValue;			//Offset: 36 | ElementSize: 16
	};
	UKismetMathLibrary_SelectColor_Params params;
	params.A = A;
	params.B = B;
	params.bPickA = bPickA;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.SelectFloat
// Flags: Final, Native, Static, Public, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: B	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: bPickA	Type: bool	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: float	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
float UKismetMathLibrary::SelectFloat(float A, float B, bool bPickA) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.SelectFloat");

	struct UKismetMathLibrary_SelectFloat_Params {
		float A;			//Offset: 0 | ElementSize: 4
		float B;			//Offset: 4 | ElementSize: 4
		bool bPickA;			//Offset: 8 | ElementSize: 1
		float ReturnValue;			//Offset: 12 | ElementSize: 4
	};
	UKismetMathLibrary_SelectFloat_Params params;
	params.A = A;
	params.B = B;
	params.bPickA = bPickA;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.SelectInt
// Flags: Final, Native, Static, Public, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: int32_t	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: B	Type: int32_t	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: bPickA	Type: bool	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: int32_t	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
int32_t UKismetMathLibrary::SelectInt(int32_t A, int32_t B, bool bPickA) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.SelectInt");

	struct UKismetMathLibrary_SelectInt_Params {
		int32_t A;			//Offset: 0 | ElementSize: 4
		int32_t B;			//Offset: 4 | ElementSize: 4
		bool bPickA;			//Offset: 8 | ElementSize: 1
		int32_t ReturnValue;			//Offset: 12 | ElementSize: 4
	};
	UKismetMathLibrary_SelectInt_Params params;
	params.A = A;
	params.B = B;
	params.bPickA = bPickA;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.SelectObject
// Flags: Final, Native, Static, Public, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: class UObject*	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: B	Type: class UObject*	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: bSelectA	Type: bool	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: class UObject*	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
class UObject* UKismetMathLibrary::SelectObject(class UObject* A, class UObject* B, bool bSelectA) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.SelectObject");

	struct UKismetMathLibrary_SelectObject_Params {
		class UObject* A;			//Offset: 0 | ElementSize: 8
		class UObject* B;			//Offset: 8 | ElementSize: 8
		bool bSelectA;			//Offset: 16 | ElementSize: 1
		class UObject* ReturnValue;			//Offset: 24 | ElementSize: 8
	};
	UKismetMathLibrary_SelectObject_Params params;
	params.A = A;
	params.B = B;
	params.bSelectA = bSelectA;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.SelectRotator
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: struct FRotator	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
// Name: B	Type: struct FRotator	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
// Name: bPickA	Type: bool	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FRotator	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FRotator UKismetMathLibrary::SelectRotator(struct FRotator A, struct FRotator B, bool bPickA) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.SelectRotator");

	struct UKismetMathLibrary_SelectRotator_Params {
		struct FRotator A;			//Offset: 0 | ElementSize: 12
		struct FRotator B;			//Offset: 12 | ElementSize: 12
		bool bPickA;			//Offset: 24 | ElementSize: 1
		struct FRotator ReturnValue;			//Offset: 28 | ElementSize: 12
	};
	UKismetMathLibrary_SelectRotator_Params params;
	params.A = A;
	params.B = B;
	params.bPickA = bPickA;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.SelectString
// Flags: Final, Native, Static, Public, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: struct FString	Flags: Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: B	Type: struct FString	Flags: Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: bPickA	Type: bool	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FString	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FString UKismetMathLibrary::SelectString(struct FString A, struct FString B, bool bPickA) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.SelectString");

	struct UKismetMathLibrary_SelectString_Params {
		struct FString A;			//Offset: 0 | ElementSize: 16
		struct FString B;			//Offset: 16 | ElementSize: 16
		bool bPickA;			//Offset: 32 | ElementSize: 1
		struct FString ReturnValue;			//Offset: 40 | ElementSize: 16
	};
	UKismetMathLibrary_SelectString_Params params;
	params.A = A;
	params.B = B;
	params.bPickA = bPickA;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.SelectTransform
// Flags: Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: struct FTransform	Flags: ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
// Name: B	Type: struct FTransform	Flags: ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
// Name: bPickA	Type: bool	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FTransform	Flags: Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FTransform UKismetMathLibrary::SelectTransform(const struct FTransform& A, const struct FTransform& B, bool bPickA) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.SelectTransform");

	struct UKismetMathLibrary_SelectTransform_Params {
		struct FTransform A;			//Offset: 0 | ElementSize: 48
		struct FTransform B;			//Offset: 48 | ElementSize: 48
		bool bPickA;			//Offset: 96 | ElementSize: 1
		struct FTransform ReturnValue;			//Offset: 112 | ElementSize: 48
	};
	UKismetMathLibrary_SelectTransform_Params params;
	params.A = A;
	params.B = B;
	params.bPickA = bPickA;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.SelectVector
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: struct FVector	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: B	Type: struct FVector	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: bPickA	Type: bool	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FVector	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FVector UKismetMathLibrary::SelectVector(struct FVector A, struct FVector B, bool bPickA) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.SelectVector");

	struct UKismetMathLibrary_SelectVector_Params {
		struct FVector A;			//Offset: 0 | ElementSize: 12
		struct FVector B;			//Offset: 12 | ElementSize: 12
		bool bPickA;			//Offset: 24 | ElementSize: 1
		struct FVector ReturnValue;			//Offset: 28 | ElementSize: 12
	};
	UKismetMathLibrary_SelectVector_Params params;
	params.A = A;
	params.B = B;
	params.bPickA = bPickA;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Set2D
// Flags: Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable
// Params:
// Name: A	Type: struct FVector2D	Flags: Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: X	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: Y	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
void UKismetMathLibrary::Set2D(struct FVector2D* A, float X, float Y) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Set2D");

	struct UKismetMathLibrary_Set2D_Params {
		struct FVector2D A;			//Offset: 0 | ElementSize: 8
		float X;			//Offset: 8 | ElementSize: 4
		float Y;			//Offset: 12 | ElementSize: 4
	};
	UKismetMathLibrary_Set2D_Params params;
	params.X = X;
	params.Y = Y;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	if (A != nullptr)
		*A = params.A;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.SetRandomStreamSeed
// Flags: Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable
// Params:
// Name: Stream	Type: struct FRandomStream	Flags: Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic
// Name: NewSeed	Type: int32_t	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
void UKismetMathLibrary::SetRandomStreamSeed(struct FRandomStream* Stream, int32_t NewSeed) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.SetRandomStreamSeed");

	struct UKismetMathLibrary_SetRandomStreamSeed_Params {
		struct FRandomStream Stream;			//Offset: 0 | ElementSize: 8
		int32_t NewSeed;			//Offset: 8 | ElementSize: 4
	};
	UKismetMathLibrary_SetRandomStreamSeed_Params params;
	params.NewSeed = NewSeed;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	if (Stream != nullptr)
		*Stream = params.Stream;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.SignOfFloat
// Flags: Final, Native, Static, Public, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: float	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
float UKismetMathLibrary::SignOfFloat(float A) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.SignOfFloat");

	struct UKismetMathLibrary_SignOfFloat_Params {
		float A;			//Offset: 0 | ElementSize: 4
		float ReturnValue;			//Offset: 4 | ElementSize: 4
	};
	UKismetMathLibrary_SignOfFloat_Params params;
	params.A = A;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.SignOfInteger
// Flags: Final, Native, Static, Public, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: int32_t	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: int32_t	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
int32_t UKismetMathLibrary::SignOfInteger(int32_t A) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.SignOfInteger");

	struct UKismetMathLibrary_SignOfInteger_Params {
		int32_t A;			//Offset: 0 | ElementSize: 4
		int32_t ReturnValue;			//Offset: 4 | ElementSize: 4
	};
	UKismetMathLibrary_SignOfInteger_Params params;
	params.A = A;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.SignOfInteger64
// Flags: Final, Native, Static, Public, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: int64_t	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: int64_t	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
int64_t UKismetMathLibrary::SignOfInteger64(int64_t A) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.SignOfInteger64");

	struct UKismetMathLibrary_SignOfInteger64_Params {
		int64_t A;			//Offset: 0 | ElementSize: 8
		int64_t ReturnValue;			//Offset: 8 | ElementSize: 8
	};
	UKismetMathLibrary_SignOfInteger64_Params params;
	params.A = A;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Sin
// Flags: Final, Native, Static, Public, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: float	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
float UKismetMathLibrary::Sin(float A) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Sin");

	struct UKismetMathLibrary_Sin_Params {
		float A;			//Offset: 0 | ElementSize: 4
		float ReturnValue;			//Offset: 4 | ElementSize: 4
	};
	UKismetMathLibrary_Sin_Params params;
	params.A = A;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Spherical2DToUnitCartesian
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: struct FVector2D	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FVector	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FVector UKismetMathLibrary::Spherical2DToUnitCartesian(struct FVector2D A) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Spherical2DToUnitCartesian");

	struct UKismetMathLibrary_Spherical2DToUnitCartesian_Params {
		struct FVector2D A;			//Offset: 0 | ElementSize: 8
		struct FVector ReturnValue;			//Offset: 8 | ElementSize: 12
	};
	UKismetMathLibrary_Spherical2DToUnitCartesian_Params params;
	params.A = A;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Sqrt
// Flags: Final, Native, Static, Public, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: float	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
float UKismetMathLibrary::Sqrt(float A) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Sqrt");

	struct UKismetMathLibrary_Sqrt_Params {
		float A;			//Offset: 0 | ElementSize: 4
		float ReturnValue;			//Offset: 4 | ElementSize: 4
	};
	UKismetMathLibrary_Sqrt_Params params;
	params.A = A;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Square
// Flags: Final, Native, Static, Public, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: float	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
float UKismetMathLibrary::Square(float A) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Square");

	struct UKismetMathLibrary_Square_Params {
		float A;			//Offset: 0 | ElementSize: 4
		float ReturnValue;			//Offset: 4 | ElementSize: 4
	};
	UKismetMathLibrary_Square_Params params;
	params.A = A;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Subtract_ByteByte
// Flags: Final, Native, Static, Public, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: unsigned char	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: B	Type: unsigned char	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: unsigned char	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
unsigned char UKismetMathLibrary::Subtract_ByteByte(unsigned char A, unsigned char B) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Subtract_ByteByte");

	struct UKismetMathLibrary_Subtract_ByteByte_Params {
		unsigned char A;			//Offset: 0 | ElementSize: 1
		unsigned char B;			//Offset: 1 | ElementSize: 1
		unsigned char ReturnValue;			//Offset: 2 | ElementSize: 1
	};
	UKismetMathLibrary_Subtract_ByteByte_Params params;
	params.A = A;
	params.B = B;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Subtract_DateTimeDateTime
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: struct FDateTime	Flags: Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: B	Type: struct FDateTime	Flags: Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FTimespan	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FTimespan UKismetMathLibrary::Subtract_DateTimeDateTime(struct FDateTime A, struct FDateTime B) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Subtract_DateTimeDateTime");

	struct UKismetMathLibrary_Subtract_DateTimeDateTime_Params {
		struct FDateTime A;			//Offset: 0 | ElementSize: 8
		struct FDateTime B;			//Offset: 8 | ElementSize: 8
		struct FTimespan ReturnValue;			//Offset: 16 | ElementSize: 8
	};
	UKismetMathLibrary_Subtract_DateTimeDateTime_Params params;
	params.A = A;
	params.B = B;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Subtract_DateTimeTimespan
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: struct FDateTime	Flags: Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: B	Type: struct FTimespan	Flags: Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FDateTime	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FDateTime UKismetMathLibrary::Subtract_DateTimeTimespan(struct FDateTime A, struct FTimespan B) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Subtract_DateTimeTimespan");

	struct UKismetMathLibrary_Subtract_DateTimeTimespan_Params {
		struct FDateTime A;			//Offset: 0 | ElementSize: 8
		struct FTimespan B;			//Offset: 8 | ElementSize: 8
		struct FDateTime ReturnValue;			//Offset: 16 | ElementSize: 8
	};
	UKismetMathLibrary_Subtract_DateTimeTimespan_Params params;
	params.A = A;
	params.B = B;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Subtract_FloatFloat
// Flags: Final, Native, Static, Public, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: B	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: float	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
float UKismetMathLibrary::Subtract_FloatFloat(float A, float B) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Subtract_FloatFloat");

	struct UKismetMathLibrary_Subtract_FloatFloat_Params {
		float A;			//Offset: 0 | ElementSize: 4
		float B;			//Offset: 4 | ElementSize: 4
		float ReturnValue;			//Offset: 8 | ElementSize: 4
	};
	UKismetMathLibrary_Subtract_FloatFloat_Params params;
	params.A = A;
	params.B = B;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Subtract_Int64Int64
// Flags: Final, Native, Static, Public, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: int64_t	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: B	Type: int64_t	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: int64_t	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
int64_t UKismetMathLibrary::Subtract_Int64Int64(int64_t A, int64_t B) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Subtract_Int64Int64");

	struct UKismetMathLibrary_Subtract_Int64Int64_Params {
		int64_t A;			//Offset: 0 | ElementSize: 8
		int64_t B;			//Offset: 8 | ElementSize: 8
		int64_t ReturnValue;			//Offset: 16 | ElementSize: 8
	};
	UKismetMathLibrary_Subtract_Int64Int64_Params params;
	params.A = A;
	params.B = B;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Subtract_IntInt
// Flags: Final, Native, Static, Public, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: int32_t	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: B	Type: int32_t	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: int32_t	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
int32_t UKismetMathLibrary::Subtract_IntInt(int32_t A, int32_t B) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Subtract_IntInt");

	struct UKismetMathLibrary_Subtract_IntInt_Params {
		int32_t A;			//Offset: 0 | ElementSize: 4
		int32_t B;			//Offset: 4 | ElementSize: 4
		int32_t ReturnValue;			//Offset: 8 | ElementSize: 4
	};
	UKismetMathLibrary_Subtract_IntInt_Params params;
	params.A = A;
	params.B = B;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Subtract_IntPointInt
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: struct FIntPoint	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: B	Type: int32_t	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FIntPoint	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FIntPoint UKismetMathLibrary::Subtract_IntPointInt(struct FIntPoint A, int32_t B) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Subtract_IntPointInt");

	struct UKismetMathLibrary_Subtract_IntPointInt_Params {
		struct FIntPoint A;			//Offset: 0 | ElementSize: 8
		int32_t B;			//Offset: 8 | ElementSize: 4
		struct FIntPoint ReturnValue;			//Offset: 12 | ElementSize: 8
	};
	UKismetMathLibrary_Subtract_IntPointInt_Params params;
	params.A = A;
	params.B = B;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Subtract_IntPointIntPoint
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: struct FIntPoint	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: B	Type: struct FIntPoint	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FIntPoint	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FIntPoint UKismetMathLibrary::Subtract_IntPointIntPoint(struct FIntPoint A, struct FIntPoint B) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Subtract_IntPointIntPoint");

	struct UKismetMathLibrary_Subtract_IntPointIntPoint_Params {
		struct FIntPoint A;			//Offset: 0 | ElementSize: 8
		struct FIntPoint B;			//Offset: 8 | ElementSize: 8
		struct FIntPoint ReturnValue;			//Offset: 16 | ElementSize: 8
	};
	UKismetMathLibrary_Subtract_IntPointIntPoint_Params params;
	params.A = A;
	params.B = B;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Subtract_LinearColorLinearColor
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: struct FLinearColor	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: B	Type: struct FLinearColor	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FLinearColor	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FLinearColor UKismetMathLibrary::Subtract_LinearColorLinearColor(struct FLinearColor A, struct FLinearColor B) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Subtract_LinearColorLinearColor");

	struct UKismetMathLibrary_Subtract_LinearColorLinearColor_Params {
		struct FLinearColor A;			//Offset: 0 | ElementSize: 16
		struct FLinearColor B;			//Offset: 16 | ElementSize: 16
		struct FLinearColor ReturnValue;			//Offset: 32 | ElementSize: 16
	};
	UKismetMathLibrary_Subtract_LinearColorLinearColor_Params params;
	params.A = A;
	params.B = B;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Subtract_QuatQuat
// Flags: Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: struct FQuat	Flags: ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
// Name: B	Type: struct FQuat	Flags: ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FQuat	Flags: Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FQuat UKismetMathLibrary::Subtract_QuatQuat(const struct FQuat& A, const struct FQuat& B) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Subtract_QuatQuat");

	struct UKismetMathLibrary_Subtract_QuatQuat_Params {
		struct FQuat A;			//Offset: 0 | ElementSize: 16
		struct FQuat B;			//Offset: 16 | ElementSize: 16
		struct FQuat ReturnValue;			//Offset: 32 | ElementSize: 16
	};
	UKismetMathLibrary_Subtract_QuatQuat_Params params;
	params.A = A;
	params.B = B;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Subtract_TimespanTimespan
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: struct FTimespan	Flags: Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: B	Type: struct FTimespan	Flags: Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FTimespan	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FTimespan UKismetMathLibrary::Subtract_TimespanTimespan(struct FTimespan A, struct FTimespan B) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Subtract_TimespanTimespan");

	struct UKismetMathLibrary_Subtract_TimespanTimespan_Params {
		struct FTimespan A;			//Offset: 0 | ElementSize: 8
		struct FTimespan B;			//Offset: 8 | ElementSize: 8
		struct FTimespan ReturnValue;			//Offset: 16 | ElementSize: 8
	};
	UKismetMathLibrary_Subtract_TimespanTimespan_Params params;
	params.A = A;
	params.B = B;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Subtract_Vector2DFloat
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: struct FVector2D	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: B	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FVector2D	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FVector2D UKismetMathLibrary::Subtract_Vector2DFloat(struct FVector2D A, float B) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Subtract_Vector2DFloat");

	struct UKismetMathLibrary_Subtract_Vector2DFloat_Params {
		struct FVector2D A;			//Offset: 0 | ElementSize: 8
		float B;			//Offset: 8 | ElementSize: 4
		struct FVector2D ReturnValue;			//Offset: 12 | ElementSize: 8
	};
	UKismetMathLibrary_Subtract_Vector2DFloat_Params params;
	params.A = A;
	params.B = B;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Subtract_Vector2DVector2D
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: struct FVector2D	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: B	Type: struct FVector2D	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FVector2D	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FVector2D UKismetMathLibrary::Subtract_Vector2DVector2D(struct FVector2D A, struct FVector2D B) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Subtract_Vector2DVector2D");

	struct UKismetMathLibrary_Subtract_Vector2DVector2D_Params {
		struct FVector2D A;			//Offset: 0 | ElementSize: 8
		struct FVector2D B;			//Offset: 8 | ElementSize: 8
		struct FVector2D ReturnValue;			//Offset: 16 | ElementSize: 8
	};
	UKismetMathLibrary_Subtract_Vector2DVector2D_Params params;
	params.A = A;
	params.B = B;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Subtract_Vector4Vector4
// Flags: Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: struct FVector4	Flags: ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: B	Type: struct FVector4	Flags: ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FVector4	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FVector4 UKismetMathLibrary::Subtract_Vector4Vector4(const struct FVector4& A, const struct FVector4& B) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Subtract_Vector4Vector4");

	struct UKismetMathLibrary_Subtract_Vector4Vector4_Params {
		struct FVector4 A;			//Offset: 0 | ElementSize: 16
		struct FVector4 B;			//Offset: 16 | ElementSize: 16
		struct FVector4 ReturnValue;			//Offset: 32 | ElementSize: 16
	};
	UKismetMathLibrary_Subtract_Vector4Vector4_Params params;
	params.A = A;
	params.B = B;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Subtract_VectorFloat
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: struct FVector	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: B	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FVector	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FVector UKismetMathLibrary::Subtract_VectorFloat(struct FVector A, float B) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Subtract_VectorFloat");

	struct UKismetMathLibrary_Subtract_VectorFloat_Params {
		struct FVector A;			//Offset: 0 | ElementSize: 12
		float B;			//Offset: 12 | ElementSize: 4
		struct FVector ReturnValue;			//Offset: 16 | ElementSize: 12
	};
	UKismetMathLibrary_Subtract_VectorFloat_Params params;
	params.A = A;
	params.B = B;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Subtract_VectorInt
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: struct FVector	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: B	Type: int32_t	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FVector	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FVector UKismetMathLibrary::Subtract_VectorInt(struct FVector A, int32_t B) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Subtract_VectorInt");

	struct UKismetMathLibrary_Subtract_VectorInt_Params {
		struct FVector A;			//Offset: 0 | ElementSize: 12
		int32_t B;			//Offset: 12 | ElementSize: 4
		struct FVector ReturnValue;			//Offset: 16 | ElementSize: 12
	};
	UKismetMathLibrary_Subtract_VectorInt_Params params;
	params.A = A;
	params.B = B;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Subtract_VectorVector
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: struct FVector	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: B	Type: struct FVector	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FVector	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FVector UKismetMathLibrary::Subtract_VectorVector(struct FVector A, struct FVector B) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Subtract_VectorVector");

	struct UKismetMathLibrary_Subtract_VectorVector_Params {
		struct FVector A;			//Offset: 0 | ElementSize: 12
		struct FVector B;			//Offset: 12 | ElementSize: 12
		struct FVector ReturnValue;			//Offset: 24 | ElementSize: 12
	};
	UKismetMathLibrary_Subtract_VectorVector_Params params;
	params.A = A;
	params.B = B;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Tan
// Flags: Final, Native, Static, Public, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: float	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
float UKismetMathLibrary::Tan(float A) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Tan");

	struct UKismetMathLibrary_Tan_Params {
		float A;			//Offset: 0 | ElementSize: 4
		float ReturnValue;			//Offset: 4 | ElementSize: 4
	};
	UKismetMathLibrary_Tan_Params params;
	params.A = A;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.TEase
// Flags: Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: struct FTransform	Flags: ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
// Name: B	Type: struct FTransform	Flags: ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
// Name: Alpha	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: EasingFunc	Type: TEnumAsByte<EEasingFunc>	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: BlendExp	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: Steps	Type: int32_t	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FTransform	Flags: Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FTransform UKismetMathLibrary::TEase(const struct FTransform& A, const struct FTransform& B, float Alpha, TEnumAsByte<EEasingFunc> EasingFunc, float BlendExp, int32_t Steps) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.TEase");

	struct UKismetMathLibrary_TEase_Params {
		struct FTransform A;			//Offset: 0 | ElementSize: 48
		struct FTransform B;			//Offset: 48 | ElementSize: 48
		float Alpha;			//Offset: 96 | ElementSize: 4
		TEnumAsByte<EEasingFunc> EasingFunc;			//Offset: 100 | ElementSize: 1
		float BlendExp;			//Offset: 104 | ElementSize: 4
		int32_t Steps;			//Offset: 108 | ElementSize: 4
		struct FTransform ReturnValue;			//Offset: 112 | ElementSize: 48
	};
	UKismetMathLibrary_TEase_Params params;
	params.A = A;
	params.B = B;
	params.Alpha = Alpha;
	params.EasingFunc = EasingFunc;
	params.BlendExp = BlendExp;
	params.Steps = Steps;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.TimespanFromString
// Flags: Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: TimespanString	Type: struct FString	Flags: Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: Result	Type: struct FTimespan	Flags: Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: bool	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
bool UKismetMathLibrary::TimespanFromString(struct FString TimespanString, struct FTimespan* Result) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.TimespanFromString");

	struct UKismetMathLibrary_TimespanFromString_Params {
		struct FString TimespanString;			//Offset: 0 | ElementSize: 16
		struct FTimespan Result;			//Offset: 16 | ElementSize: 8
		bool ReturnValue;			//Offset: 24 | ElementSize: 1
	};
	UKismetMathLibrary_TimespanFromString_Params params;
	params.TimespanString = TimespanString;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	if (Result != nullptr)
		*Result = params.Result;
	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.TimespanMaxValue
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: ReturnValue	Type: struct FTimespan	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FTimespan UKismetMathLibrary::TimespanMaxValue() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.TimespanMaxValue");

	struct UKismetMathLibrary_TimespanMaxValue_Params {
		struct FTimespan ReturnValue;			//Offset: 0 | ElementSize: 8
	};
	UKismetMathLibrary_TimespanMaxValue_Params params;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.TimespanMinValue
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: ReturnValue	Type: struct FTimespan	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FTimespan UKismetMathLibrary::TimespanMinValue() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.TimespanMinValue");

	struct UKismetMathLibrary_TimespanMinValue_Params {
		struct FTimespan ReturnValue;			//Offset: 0 | ElementSize: 8
	};
	UKismetMathLibrary_TimespanMinValue_Params params;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.TimespanRatio
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: struct FTimespan	Flags: Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: B	Type: struct FTimespan	Flags: Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: float	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
float UKismetMathLibrary::TimespanRatio(struct FTimespan A, struct FTimespan B) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.TimespanRatio");

	struct UKismetMathLibrary_TimespanRatio_Params {
		struct FTimespan A;			//Offset: 0 | ElementSize: 8
		struct FTimespan B;			//Offset: 8 | ElementSize: 8
		float ReturnValue;			//Offset: 16 | ElementSize: 4
	};
	UKismetMathLibrary_TimespanRatio_Params params;
	params.A = A;
	params.B = B;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.TimespanZeroValue
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: ReturnValue	Type: struct FTimespan	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FTimespan UKismetMathLibrary::TimespanZeroValue() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.TimespanZeroValue");

	struct UKismetMathLibrary_TimespanZeroValue_Params {
		struct FTimespan ReturnValue;			//Offset: 0 | ElementSize: 8
	};
	UKismetMathLibrary_TimespanZeroValue_Params params;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.TInterpTo
// Flags: Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: Current	Type: struct FTransform	Flags: ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
// Name: Target	Type: struct FTransform	Flags: ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
// Name: DeltaTime	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: interpSpeed	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FTransform	Flags: Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FTransform UKismetMathLibrary::TInterpTo(const struct FTransform& Current, const struct FTransform& Target, float DeltaTime, float interpSpeed) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.TInterpTo");

	struct UKismetMathLibrary_TInterpTo_Params {
		struct FTransform Current;			//Offset: 0 | ElementSize: 48
		struct FTransform Target;			//Offset: 48 | ElementSize: 48
		float DeltaTime;			//Offset: 96 | ElementSize: 4
		float interpSpeed;			//Offset: 100 | ElementSize: 4
		struct FTransform ReturnValue;			//Offset: 112 | ElementSize: 48
	};
	UKismetMathLibrary_TInterpTo_Params params;
	params.Current = Current;
	params.Target = Target;
	params.DeltaTime = DeltaTime;
	params.interpSpeed = interpSpeed;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.TLerp
// Flags: Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: struct FTransform	Flags: ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
// Name: B	Type: struct FTransform	Flags: ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
// Name: Alpha	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: InterpMode	Type: TEnumAsByte<ELerpInterpolationMode>	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FTransform	Flags: Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FTransform UKismetMathLibrary::TLerp(const struct FTransform& A, const struct FTransform& B, float Alpha, TEnumAsByte<ELerpInterpolationMode> InterpMode) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.TLerp");

	struct UKismetMathLibrary_TLerp_Params {
		struct FTransform A;			//Offset: 0 | ElementSize: 48
		struct FTransform B;			//Offset: 48 | ElementSize: 48
		float Alpha;			//Offset: 96 | ElementSize: 4
		TEnumAsByte<ELerpInterpolationMode> InterpMode;			//Offset: 100 | ElementSize: 1
		struct FTransform ReturnValue;			//Offset: 112 | ElementSize: 48
	};
	UKismetMathLibrary_TLerp_Params params;
	params.A = A;
	params.B = B;
	params.Alpha = Alpha;
	params.InterpMode = InterpMode;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Today
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: ReturnValue	Type: struct FDateTime	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FDateTime UKismetMathLibrary::Today() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Today");

	struct UKismetMathLibrary_Today_Params {
		struct FDateTime ReturnValue;			//Offset: 0 | ElementSize: 8
	};
	UKismetMathLibrary_Today_Params params;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.ToDirectionAndLength2D
// Flags: Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: struct FVector2D	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: OutDir	Type: struct FVector2D	Flags: Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: OutLength	Type: float	Flags: Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
void UKismetMathLibrary::ToDirectionAndLength2D(struct FVector2D A, struct FVector2D* OutDir, float* OutLength) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.ToDirectionAndLength2D");

	struct UKismetMathLibrary_ToDirectionAndLength2D_Params {
		struct FVector2D A;			//Offset: 0 | ElementSize: 8
		struct FVector2D OutDir;			//Offset: 8 | ElementSize: 8
		float OutLength;			//Offset: 16 | ElementSize: 4
	};
	UKismetMathLibrary_ToDirectionAndLength2D_Params params;
	params.A = A;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	if (OutDir != nullptr)
		*OutDir = params.OutDir;
	if (OutLength != nullptr)
		*OutLength = params.OutLength;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.ToRounded2D
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: struct FVector2D	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FVector2D	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FVector2D UKismetMathLibrary::ToRounded2D(struct FVector2D A) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.ToRounded2D");

	struct UKismetMathLibrary_ToRounded2D_Params {
		struct FVector2D A;			//Offset: 0 | ElementSize: 8
		struct FVector2D ReturnValue;			//Offset: 8 | ElementSize: 8
	};
	UKismetMathLibrary_ToRounded2D_Params params;
	params.A = A;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.ToSign2D
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: struct FVector2D	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FVector2D	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FVector2D UKismetMathLibrary::ToSign2D(struct FVector2D A) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.ToSign2D");

	struct UKismetMathLibrary_ToSign2D_Params {
		struct FVector2D A;			//Offset: 0 | ElementSize: 8
		struct FVector2D ReturnValue;			//Offset: 8 | ElementSize: 8
	};
	UKismetMathLibrary_ToSign2D_Params params;
	params.A = A;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Transform_Determinant
// Flags: Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: Transform	Type: struct FTransform	Flags: ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: float	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
float UKismetMathLibrary::Transform_Determinant(const struct FTransform& Transform) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Transform_Determinant");

	struct UKismetMathLibrary_Transform_Determinant_Params {
		struct FTransform Transform;			//Offset: 0 | ElementSize: 48
		float ReturnValue;			//Offset: 48 | ElementSize: 4
	};
	UKismetMathLibrary_Transform_Determinant_Params params;
	params.Transform = Transform;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.TransformDirection
// Flags: Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: T	Type: struct FTransform	Flags: ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
// Name: Direction	Type: struct FVector	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FVector	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FVector UKismetMathLibrary::TransformDirection(const struct FTransform& T, struct FVector Direction) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.TransformDirection");

	struct UKismetMathLibrary_TransformDirection_Params {
		struct FTransform T;			//Offset: 0 | ElementSize: 48
		struct FVector Direction;			//Offset: 48 | ElementSize: 12
		struct FVector ReturnValue;			//Offset: 60 | ElementSize: 12
	};
	UKismetMathLibrary_TransformDirection_Params params;
	params.T = T;
	params.Direction = Direction;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.TransformLocation
// Flags: Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: T	Type: struct FTransform	Flags: ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
// Name: Location	Type: struct FVector	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FVector	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FVector UKismetMathLibrary::TransformLocation(const struct FTransform& T, struct FVector Location) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.TransformLocation");

	struct UKismetMathLibrary_TransformLocation_Params {
		struct FTransform T;			//Offset: 0 | ElementSize: 48
		struct FVector Location;			//Offset: 48 | ElementSize: 12
		struct FVector ReturnValue;			//Offset: 60 | ElementSize: 12
	};
	UKismetMathLibrary_TransformLocation_Params params;
	params.T = T;
	params.Location = Location;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.TransformRotation
// Flags: Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: T	Type: struct FTransform	Flags: ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
// Name: Rotation	Type: struct FRotator	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FRotator	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FRotator UKismetMathLibrary::TransformRotation(const struct FTransform& T, struct FRotator Rotation) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.TransformRotation");

	struct UKismetMathLibrary_TransformRotation_Params {
		struct FTransform T;			//Offset: 0 | ElementSize: 48
		struct FRotator Rotation;			//Offset: 48 | ElementSize: 12
		struct FRotator ReturnValue;			//Offset: 60 | ElementSize: 12
	};
	UKismetMathLibrary_TransformRotation_Params params;
	params.T = T;
	params.Rotation = Rotation;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.TransformVector4
// Flags: Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: Matrix	Type: struct FMatrix	Flags: ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
// Name: Vec4	Type: struct FVector4	Flags: ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FVector4	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FVector4 UKismetMathLibrary::TransformVector4(const struct FMatrix& Matrix, const struct FVector4& Vec4) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.TransformVector4");

	struct UKismetMathLibrary_TransformVector4_Params {
		struct FMatrix Matrix;			//Offset: 0 | ElementSize: 64
		struct FVector4 Vec4;			//Offset: 64 | ElementSize: 16
		struct FVector4 ReturnValue;			//Offset: 80 | ElementSize: 16
	};
	UKismetMathLibrary_TransformVector4_Params params;
	params.Matrix = Matrix;
	params.Vec4 = Vec4;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.UtcNow
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: ReturnValue	Type: struct FDateTime	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FDateTime UKismetMathLibrary::UtcNow() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.UtcNow");

	struct UKismetMathLibrary_UtcNow_Params {
		struct FDateTime ReturnValue;			//Offset: 0 | ElementSize: 8
	};
	UKismetMathLibrary_UtcNow_Params params;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.VEase
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: struct FVector	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: B	Type: struct FVector	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: Alpha	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: EasingFunc	Type: TEnumAsByte<EEasingFunc>	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: BlendExp	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: Steps	Type: int32_t	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FVector	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FVector UKismetMathLibrary::VEase(struct FVector A, struct FVector B, float Alpha, TEnumAsByte<EEasingFunc> EasingFunc, float BlendExp, int32_t Steps) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.VEase");

	struct UKismetMathLibrary_VEase_Params {
		struct FVector A;			//Offset: 0 | ElementSize: 12
		struct FVector B;			//Offset: 12 | ElementSize: 12
		float Alpha;			//Offset: 24 | ElementSize: 4
		TEnumAsByte<EEasingFunc> EasingFunc;			//Offset: 28 | ElementSize: 1
		float BlendExp;			//Offset: 32 | ElementSize: 4
		int32_t Steps;			//Offset: 36 | ElementSize: 4
		struct FVector ReturnValue;			//Offset: 40 | ElementSize: 12
	};
	UKismetMathLibrary_VEase_Params params;
	params.A = A;
	params.B = B;
	params.Alpha = Alpha;
	params.EasingFunc = EasingFunc;
	params.BlendExp = BlendExp;
	params.Steps = Steps;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Vector2D_One
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: ReturnValue	Type: struct FVector2D	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FVector2D UKismetMathLibrary::Vector2D_One() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Vector2D_One");

	struct UKismetMathLibrary_Vector2D_One_Params {
		struct FVector2D ReturnValue;			//Offset: 0 | ElementSize: 8
	};
	UKismetMathLibrary_Vector2D_One_Params params;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Vector2D_Unit45Deg
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: ReturnValue	Type: struct FVector2D	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FVector2D UKismetMathLibrary::Vector2D_Unit45Deg() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Vector2D_Unit45Deg");

	struct UKismetMathLibrary_Vector2D_Unit45Deg_Params {
		struct FVector2D ReturnValue;			//Offset: 0 | ElementSize: 8
	};
	UKismetMathLibrary_Vector2D_Unit45Deg_Params params;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Vector2D_Zero
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: ReturnValue	Type: struct FVector2D	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FVector2D UKismetMathLibrary::Vector2D_Zero() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Vector2D_Zero");

	struct UKismetMathLibrary_Vector2D_Zero_Params {
		struct FVector2D ReturnValue;			//Offset: 0 | ElementSize: 8
	};
	UKismetMathLibrary_Vector2D_Zero_Params params;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Vector2DInterpTo
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: Current	Type: struct FVector2D	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: Target	Type: struct FVector2D	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: DeltaTime	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: interpSpeed	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FVector2D	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FVector2D UKismetMathLibrary::Vector2DInterpTo(struct FVector2D Current, struct FVector2D Target, float DeltaTime, float interpSpeed) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Vector2DInterpTo");

	struct UKismetMathLibrary_Vector2DInterpTo_Params {
		struct FVector2D Current;			//Offset: 0 | ElementSize: 8
		struct FVector2D Target;			//Offset: 8 | ElementSize: 8
		float DeltaTime;			//Offset: 16 | ElementSize: 4
		float interpSpeed;			//Offset: 20 | ElementSize: 4
		struct FVector2D ReturnValue;			//Offset: 24 | ElementSize: 8
	};
	UKismetMathLibrary_Vector2DInterpTo_Params params;
	params.Current = Current;
	params.Target = Target;
	params.DeltaTime = DeltaTime;
	params.interpSpeed = interpSpeed;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Vector2DInterpTo_Constant
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: Current	Type: struct FVector2D	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: Target	Type: struct FVector2D	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: DeltaTime	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: interpSpeed	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FVector2D	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FVector2D UKismetMathLibrary::Vector2DInterpTo_Constant(struct FVector2D Current, struct FVector2D Target, float DeltaTime, float interpSpeed) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Vector2DInterpTo_Constant");

	struct UKismetMathLibrary_Vector2DInterpTo_Constant_Params {
		struct FVector2D Current;			//Offset: 0 | ElementSize: 8
		struct FVector2D Target;			//Offset: 8 | ElementSize: 8
		float DeltaTime;			//Offset: 16 | ElementSize: 4
		float interpSpeed;			//Offset: 20 | ElementSize: 4
		struct FVector2D ReturnValue;			//Offset: 24 | ElementSize: 8
	};
	UKismetMathLibrary_Vector2DInterpTo_Constant_Params params;
	params.Current = Current;
	params.Target = Target;
	params.DeltaTime = DeltaTime;
	params.interpSpeed = interpSpeed;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Vector4_Assign
// Flags: Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable
// Params:
// Name: A	Type: struct FVector4	Flags: Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: InVector	Type: struct FVector4	Flags: ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
void UKismetMathLibrary::Vector4_Assign(struct FVector4* A, const struct FVector4& InVector) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Vector4_Assign");

	struct UKismetMathLibrary_Vector4_Assign_Params {
		struct FVector4 A;			//Offset: 0 | ElementSize: 16
		struct FVector4 InVector;			//Offset: 16 | ElementSize: 16
	};
	UKismetMathLibrary_Vector4_Assign_Params params;
	params.InVector = InVector;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	if (A != nullptr)
		*A = params.A;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Vector4_CrossProduct3
// Flags: Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: struct FVector4	Flags: ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: B	Type: struct FVector4	Flags: ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FVector4	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FVector4 UKismetMathLibrary::Vector4_CrossProduct3(const struct FVector4& A, const struct FVector4& B) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Vector4_CrossProduct3");

	struct UKismetMathLibrary_Vector4_CrossProduct3_Params {
		struct FVector4 A;			//Offset: 0 | ElementSize: 16
		struct FVector4 B;			//Offset: 16 | ElementSize: 16
		struct FVector4 ReturnValue;			//Offset: 32 | ElementSize: 16
	};
	UKismetMathLibrary_Vector4_CrossProduct3_Params params;
	params.A = A;
	params.B = B;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Vector4_DotProduct
// Flags: Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: struct FVector4	Flags: ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: B	Type: struct FVector4	Flags: ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: float	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
float UKismetMathLibrary::Vector4_DotProduct(const struct FVector4& A, const struct FVector4& B) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Vector4_DotProduct");

	struct UKismetMathLibrary_Vector4_DotProduct_Params {
		struct FVector4 A;			//Offset: 0 | ElementSize: 16
		struct FVector4 B;			//Offset: 16 | ElementSize: 16
		float ReturnValue;			//Offset: 32 | ElementSize: 4
	};
	UKismetMathLibrary_Vector4_DotProduct_Params params;
	params.A = A;
	params.B = B;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Vector4_DotProduct3
// Flags: Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: struct FVector4	Flags: ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: B	Type: struct FVector4	Flags: ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: float	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
float UKismetMathLibrary::Vector4_DotProduct3(const struct FVector4& A, const struct FVector4& B) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Vector4_DotProduct3");

	struct UKismetMathLibrary_Vector4_DotProduct3_Params {
		struct FVector4 A;			//Offset: 0 | ElementSize: 16
		struct FVector4 B;			//Offset: 16 | ElementSize: 16
		float ReturnValue;			//Offset: 32 | ElementSize: 4
	};
	UKismetMathLibrary_Vector4_DotProduct3_Params params;
	params.A = A;
	params.B = B;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Vector4_IsNAN
// Flags: Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: struct FVector4	Flags: ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: bool	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
bool UKismetMathLibrary::Vector4_IsNAN(const struct FVector4& A) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Vector4_IsNAN");

	struct UKismetMathLibrary_Vector4_IsNAN_Params {
		struct FVector4 A;			//Offset: 0 | ElementSize: 16
		bool ReturnValue;			//Offset: 16 | ElementSize: 1
	};
	UKismetMathLibrary_Vector4_IsNAN_Params params;
	params.A = A;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Vector4_IsNearlyZero3
// Flags: Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: struct FVector4	Flags: ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: Tolerance	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: bool	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
bool UKismetMathLibrary::Vector4_IsNearlyZero3(const struct FVector4& A, float Tolerance) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Vector4_IsNearlyZero3");

	struct UKismetMathLibrary_Vector4_IsNearlyZero3_Params {
		struct FVector4 A;			//Offset: 0 | ElementSize: 16
		float Tolerance;			//Offset: 16 | ElementSize: 4
		bool ReturnValue;			//Offset: 20 | ElementSize: 1
	};
	UKismetMathLibrary_Vector4_IsNearlyZero3_Params params;
	params.A = A;
	params.Tolerance = Tolerance;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Vector4_IsNormal3
// Flags: Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: struct FVector4	Flags: ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: bool	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
bool UKismetMathLibrary::Vector4_IsNormal3(const struct FVector4& A) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Vector4_IsNormal3");

	struct UKismetMathLibrary_Vector4_IsNormal3_Params {
		struct FVector4 A;			//Offset: 0 | ElementSize: 16
		bool ReturnValue;			//Offset: 16 | ElementSize: 1
	};
	UKismetMathLibrary_Vector4_IsNormal3_Params params;
	params.A = A;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Vector4_IsUnit3
// Flags: Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: struct FVector4	Flags: ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: SquaredLenthTolerance	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: bool	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
bool UKismetMathLibrary::Vector4_IsUnit3(const struct FVector4& A, float SquaredLenthTolerance) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Vector4_IsUnit3");

	struct UKismetMathLibrary_Vector4_IsUnit3_Params {
		struct FVector4 A;			//Offset: 0 | ElementSize: 16
		float SquaredLenthTolerance;			//Offset: 16 | ElementSize: 4
		bool ReturnValue;			//Offset: 20 | ElementSize: 1
	};
	UKismetMathLibrary_Vector4_IsUnit3_Params params;
	params.A = A;
	params.SquaredLenthTolerance = SquaredLenthTolerance;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Vector4_IsZero
// Flags: Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: struct FVector4	Flags: ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: bool	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
bool UKismetMathLibrary::Vector4_IsZero(const struct FVector4& A) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Vector4_IsZero");

	struct UKismetMathLibrary_Vector4_IsZero_Params {
		struct FVector4 A;			//Offset: 0 | ElementSize: 16
		bool ReturnValue;			//Offset: 16 | ElementSize: 1
	};
	UKismetMathLibrary_Vector4_IsZero_Params params;
	params.A = A;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Vector4_MirrorByVector3
// Flags: Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: Direction	Type: struct FVector4	Flags: ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: SurfaceNormal	Type: struct FVector4	Flags: ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FVector4	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FVector4 UKismetMathLibrary::Vector4_MirrorByVector3(const struct FVector4& Direction, const struct FVector4& SurfaceNormal) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Vector4_MirrorByVector3");

	struct UKismetMathLibrary_Vector4_MirrorByVector3_Params {
		struct FVector4 Direction;			//Offset: 0 | ElementSize: 16
		struct FVector4 SurfaceNormal;			//Offset: 16 | ElementSize: 16
		struct FVector4 ReturnValue;			//Offset: 32 | ElementSize: 16
	};
	UKismetMathLibrary_Vector4_MirrorByVector3_Params params;
	params.Direction = Direction;
	params.SurfaceNormal = SurfaceNormal;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Vector4_Negated
// Flags: Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: struct FVector4	Flags: ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FVector4	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FVector4 UKismetMathLibrary::Vector4_Negated(const struct FVector4& A) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Vector4_Negated");

	struct UKismetMathLibrary_Vector4_Negated_Params {
		struct FVector4 A;			//Offset: 0 | ElementSize: 16
		struct FVector4 ReturnValue;			//Offset: 16 | ElementSize: 16
	};
	UKismetMathLibrary_Vector4_Negated_Params params;
	params.A = A;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Vector4_Normal3
// Flags: Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: struct FVector4	Flags: ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: Tolerance	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FVector4	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FVector4 UKismetMathLibrary::Vector4_Normal3(const struct FVector4& A, float Tolerance) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Vector4_Normal3");

	struct UKismetMathLibrary_Vector4_Normal3_Params {
		struct FVector4 A;			//Offset: 0 | ElementSize: 16
		float Tolerance;			//Offset: 16 | ElementSize: 4
		struct FVector4 ReturnValue;			//Offset: 32 | ElementSize: 16
	};
	UKismetMathLibrary_Vector4_Normal3_Params params;
	params.A = A;
	params.Tolerance = Tolerance;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Vector4_Normalize3
// Flags: Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable
// Params:
// Name: A	Type: struct FVector4	Flags: Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: Tolerance	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
void UKismetMathLibrary::Vector4_Normalize3(struct FVector4* A, float Tolerance) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Vector4_Normalize3");

	struct UKismetMathLibrary_Vector4_Normalize3_Params {
		struct FVector4 A;			//Offset: 0 | ElementSize: 16
		float Tolerance;			//Offset: 16 | ElementSize: 4
	};
	UKismetMathLibrary_Vector4_Normalize3_Params params;
	params.Tolerance = Tolerance;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	if (A != nullptr)
		*A = params.A;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Vector4_NormalUnsafe3
// Flags: Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: struct FVector4	Flags: ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FVector4	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FVector4 UKismetMathLibrary::Vector4_NormalUnsafe3(const struct FVector4& A) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Vector4_NormalUnsafe3");

	struct UKismetMathLibrary_Vector4_NormalUnsafe3_Params {
		struct FVector4 A;			//Offset: 0 | ElementSize: 16
		struct FVector4 ReturnValue;			//Offset: 16 | ElementSize: 16
	};
	UKismetMathLibrary_Vector4_NormalUnsafe3_Params params;
	params.A = A;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Vector4_Set
// Flags: Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable
// Params:
// Name: A	Type: struct FVector4	Flags: Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: X	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: Y	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: Z	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: W	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
void UKismetMathLibrary::Vector4_Set(struct FVector4* A, float X, float Y, float Z, float W) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Vector4_Set");

	struct UKismetMathLibrary_Vector4_Set_Params {
		struct FVector4 A;			//Offset: 0 | ElementSize: 16
		float X;			//Offset: 16 | ElementSize: 4
		float Y;			//Offset: 20 | ElementSize: 4
		float Z;			//Offset: 24 | ElementSize: 4
		float W;			//Offset: 28 | ElementSize: 4
	};
	UKismetMathLibrary_Vector4_Set_Params params;
	params.X = X;
	params.Y = Y;
	params.Z = Z;
	params.W = W;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	if (A != nullptr)
		*A = params.A;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Vector4_Size
// Flags: Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: struct FVector4	Flags: ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: float	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
float UKismetMathLibrary::Vector4_Size(const struct FVector4& A) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Vector4_Size");

	struct UKismetMathLibrary_Vector4_Size_Params {
		struct FVector4 A;			//Offset: 0 | ElementSize: 16
		float ReturnValue;			//Offset: 16 | ElementSize: 4
	};
	UKismetMathLibrary_Vector4_Size_Params params;
	params.A = A;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Vector4_Size3
// Flags: Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: struct FVector4	Flags: ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: float	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
float UKismetMathLibrary::Vector4_Size3(const struct FVector4& A) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Vector4_Size3");

	struct UKismetMathLibrary_Vector4_Size3_Params {
		struct FVector4 A;			//Offset: 0 | ElementSize: 16
		float ReturnValue;			//Offset: 16 | ElementSize: 4
	};
	UKismetMathLibrary_Vector4_Size3_Params params;
	params.A = A;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Vector4_SizeSquared
// Flags: Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: struct FVector4	Flags: ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: float	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
float UKismetMathLibrary::Vector4_SizeSquared(const struct FVector4& A) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Vector4_SizeSquared");

	struct UKismetMathLibrary_Vector4_SizeSquared_Params {
		struct FVector4 A;			//Offset: 0 | ElementSize: 16
		float ReturnValue;			//Offset: 16 | ElementSize: 4
	};
	UKismetMathLibrary_Vector4_SizeSquared_Params params;
	params.A = A;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Vector4_SizeSquared3
// Flags: Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: struct FVector4	Flags: ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: float	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
float UKismetMathLibrary::Vector4_SizeSquared3(const struct FVector4& A) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Vector4_SizeSquared3");

	struct UKismetMathLibrary_Vector4_SizeSquared3_Params {
		struct FVector4 A;			//Offset: 0 | ElementSize: 16
		float ReturnValue;			//Offset: 16 | ElementSize: 4
	};
	UKismetMathLibrary_Vector4_SizeSquared3_Params params;
	params.A = A;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Vector4_Zero
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: ReturnValue	Type: struct FVector4	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FVector4 UKismetMathLibrary::Vector4_Zero() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Vector4_Zero");

	struct UKismetMathLibrary_Vector4_Zero_Params {
		struct FVector4 ReturnValue;			//Offset: 0 | ElementSize: 16
	};
	UKismetMathLibrary_Vector4_Zero_Params params;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Vector_AddBounded
// Flags: Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable
// Params:
// Name: A	Type: struct FVector	Flags: Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: InAddVect	Type: struct FVector	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: InRadius	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
void UKismetMathLibrary::Vector_AddBounded(struct FVector* A, struct FVector InAddVect, float InRadius) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Vector_AddBounded");

	struct UKismetMathLibrary_Vector_AddBounded_Params {
		struct FVector A;			//Offset: 0 | ElementSize: 12
		struct FVector InAddVect;			//Offset: 12 | ElementSize: 12
		float InRadius;			//Offset: 24 | ElementSize: 4
	};
	UKismetMathLibrary_Vector_AddBounded_Params params;
	params.InAddVect = InAddVect;
	params.InRadius = InRadius;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	if (A != nullptr)
		*A = params.A;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Vector_Assign
// Flags: Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable
// Params:
// Name: A	Type: struct FVector	Flags: Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: InVector	Type: struct FVector	Flags: ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
void UKismetMathLibrary::Vector_Assign(struct FVector* A, const struct FVector& InVector) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Vector_Assign");

	struct UKismetMathLibrary_Vector_Assign_Params {
		struct FVector A;			//Offset: 0 | ElementSize: 12
		struct FVector InVector;			//Offset: 12 | ElementSize: 12
	};
	UKismetMathLibrary_Vector_Assign_Params params;
	params.InVector = InVector;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	if (A != nullptr)
		*A = params.A;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Vector_Backward
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: ReturnValue	Type: struct FVector	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FVector UKismetMathLibrary::Vector_Backward() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Vector_Backward");

	struct UKismetMathLibrary_Vector_Backward_Params {
		struct FVector ReturnValue;			//Offset: 0 | ElementSize: 12
	};
	UKismetMathLibrary_Vector_Backward_Params params;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Vector_BoundedToBox
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: InVect	Type: struct FVector	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: InBoxMin	Type: struct FVector	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: InBoxMax	Type: struct FVector	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FVector	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FVector UKismetMathLibrary::Vector_BoundedToBox(struct FVector InVect, struct FVector InBoxMin, struct FVector InBoxMax) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Vector_BoundedToBox");

	struct UKismetMathLibrary_Vector_BoundedToBox_Params {
		struct FVector InVect;			//Offset: 0 | ElementSize: 12
		struct FVector InBoxMin;			//Offset: 12 | ElementSize: 12
		struct FVector InBoxMax;			//Offset: 24 | ElementSize: 12
		struct FVector ReturnValue;			//Offset: 36 | ElementSize: 12
	};
	UKismetMathLibrary_Vector_BoundedToBox_Params params;
	params.InVect = InVect;
	params.InBoxMin = InBoxMin;
	params.InBoxMax = InBoxMax;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Vector_BoundedToCube
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: InVect	Type: struct FVector	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: InRadius	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FVector	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FVector UKismetMathLibrary::Vector_BoundedToCube(struct FVector InVect, float InRadius) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Vector_BoundedToCube");

	struct UKismetMathLibrary_Vector_BoundedToCube_Params {
		struct FVector InVect;			//Offset: 0 | ElementSize: 12
		float InRadius;			//Offset: 12 | ElementSize: 4
		struct FVector ReturnValue;			//Offset: 16 | ElementSize: 12
	};
	UKismetMathLibrary_Vector_BoundedToCube_Params params;
	params.InVect = InVect;
	params.InRadius = InRadius;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Vector_ClampSize2D
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: struct FVector	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: Min	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: Max	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FVector	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FVector UKismetMathLibrary::Vector_ClampSize2D(struct FVector A, float Min, float Max) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Vector_ClampSize2D");

	struct UKismetMathLibrary_Vector_ClampSize2D_Params {
		struct FVector A;			//Offset: 0 | ElementSize: 12
		float Min;			//Offset: 12 | ElementSize: 4
		float Max;			//Offset: 16 | ElementSize: 4
		struct FVector ReturnValue;			//Offset: 20 | ElementSize: 12
	};
	UKismetMathLibrary_Vector_ClampSize2D_Params params;
	params.A = A;
	params.Min = Min;
	params.Max = Max;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Vector_ClampSizeMax
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: struct FVector	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: Max	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FVector	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FVector UKismetMathLibrary::Vector_ClampSizeMax(struct FVector A, float Max) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Vector_ClampSizeMax");

	struct UKismetMathLibrary_Vector_ClampSizeMax_Params {
		struct FVector A;			//Offset: 0 | ElementSize: 12
		float Max;			//Offset: 12 | ElementSize: 4
		struct FVector ReturnValue;			//Offset: 16 | ElementSize: 12
	};
	UKismetMathLibrary_Vector_ClampSizeMax_Params params;
	params.A = A;
	params.Max = Max;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Vector_ClampSizeMax2D
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: struct FVector	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: Max	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FVector	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FVector UKismetMathLibrary::Vector_ClampSizeMax2D(struct FVector A, float Max) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Vector_ClampSizeMax2D");

	struct UKismetMathLibrary_Vector_ClampSizeMax2D_Params {
		struct FVector A;			//Offset: 0 | ElementSize: 12
		float Max;			//Offset: 12 | ElementSize: 4
		struct FVector ReturnValue;			//Offset: 16 | ElementSize: 12
	};
	UKismetMathLibrary_Vector_ClampSizeMax2D_Params params;
	params.A = A;
	params.Max = Max;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Vector_ComponentMax
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: struct FVector	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: B	Type: struct FVector	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FVector	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FVector UKismetMathLibrary::Vector_ComponentMax(struct FVector A, struct FVector B) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Vector_ComponentMax");

	struct UKismetMathLibrary_Vector_ComponentMax_Params {
		struct FVector A;			//Offset: 0 | ElementSize: 12
		struct FVector B;			//Offset: 12 | ElementSize: 12
		struct FVector ReturnValue;			//Offset: 24 | ElementSize: 12
	};
	UKismetMathLibrary_Vector_ComponentMax_Params params;
	params.A = A;
	params.B = B;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Vector_ComponentMin
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: struct FVector	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: B	Type: struct FVector	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FVector	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FVector UKismetMathLibrary::Vector_ComponentMin(struct FVector A, struct FVector B) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Vector_ComponentMin");

	struct UKismetMathLibrary_Vector_ComponentMin_Params {
		struct FVector A;			//Offset: 0 | ElementSize: 12
		struct FVector B;			//Offset: 12 | ElementSize: 12
		struct FVector ReturnValue;			//Offset: 24 | ElementSize: 12
	};
	UKismetMathLibrary_Vector_ComponentMin_Params params;
	params.A = A;
	params.B = B;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Vector_CosineAngle2D
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: struct FVector	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: B	Type: struct FVector	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: float	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
float UKismetMathLibrary::Vector_CosineAngle2D(struct FVector A, struct FVector B) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Vector_CosineAngle2D");

	struct UKismetMathLibrary_Vector_CosineAngle2D_Params {
		struct FVector A;			//Offset: 0 | ElementSize: 12
		struct FVector B;			//Offset: 12 | ElementSize: 12
		float ReturnValue;			//Offset: 24 | ElementSize: 4
	};
	UKismetMathLibrary_Vector_CosineAngle2D_Params params;
	params.A = A;
	params.B = B;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Vector_Distance
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: v1	Type: struct FVector	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: v2	Type: struct FVector	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: float	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
float UKismetMathLibrary::Vector_Distance(struct FVector v1, struct FVector v2) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Vector_Distance");

	struct UKismetMathLibrary_Vector_Distance_Params {
		struct FVector v1;			//Offset: 0 | ElementSize: 12
		struct FVector v2;			//Offset: 12 | ElementSize: 12
		float ReturnValue;			//Offset: 24 | ElementSize: 4
	};
	UKismetMathLibrary_Vector_Distance_Params params;
	params.v1 = v1;
	params.v2 = v2;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Vector_Distance2D
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: v1	Type: struct FVector	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: v2	Type: struct FVector	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: float	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
float UKismetMathLibrary::Vector_Distance2D(struct FVector v1, struct FVector v2) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Vector_Distance2D");

	struct UKismetMathLibrary_Vector_Distance2D_Params {
		struct FVector v1;			//Offset: 0 | ElementSize: 12
		struct FVector v2;			//Offset: 12 | ElementSize: 12
		float ReturnValue;			//Offset: 24 | ElementSize: 4
	};
	UKismetMathLibrary_Vector_Distance2D_Params params;
	params.v1 = v1;
	params.v2 = v2;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Vector_Distance2DSquared
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: v1	Type: struct FVector	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: v2	Type: struct FVector	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: float	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
float UKismetMathLibrary::Vector_Distance2DSquared(struct FVector v1, struct FVector v2) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Vector_Distance2DSquared");

	struct UKismetMathLibrary_Vector_Distance2DSquared_Params {
		struct FVector v1;			//Offset: 0 | ElementSize: 12
		struct FVector v2;			//Offset: 12 | ElementSize: 12
		float ReturnValue;			//Offset: 24 | ElementSize: 4
	};
	UKismetMathLibrary_Vector_Distance2DSquared_Params params;
	params.v1 = v1;
	params.v2 = v2;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Vector_DistanceSquared
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: v1	Type: struct FVector	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: v2	Type: struct FVector	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: float	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
float UKismetMathLibrary::Vector_DistanceSquared(struct FVector v1, struct FVector v2) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Vector_DistanceSquared");

	struct UKismetMathLibrary_Vector_DistanceSquared_Params {
		struct FVector v1;			//Offset: 0 | ElementSize: 12
		struct FVector v2;			//Offset: 12 | ElementSize: 12
		float ReturnValue;			//Offset: 24 | ElementSize: 4
	};
	UKismetMathLibrary_Vector_DistanceSquared_Params params;
	params.v1 = v1;
	params.v2 = v2;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Vector_Down
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: ReturnValue	Type: struct FVector	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FVector UKismetMathLibrary::Vector_Down() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Vector_Down");

	struct UKismetMathLibrary_Vector_Down_Params {
		struct FVector ReturnValue;			//Offset: 0 | ElementSize: 12
	};
	UKismetMathLibrary_Vector_Down_Params params;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Vector_Forward
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: ReturnValue	Type: struct FVector	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FVector UKismetMathLibrary::Vector_Forward() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Vector_Forward");

	struct UKismetMathLibrary_Vector_Forward_Params {
		struct FVector ReturnValue;			//Offset: 0 | ElementSize: 12
	};
	UKismetMathLibrary_Vector_Forward_Params params;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Vector_GetAbs
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: struct FVector	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FVector	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FVector UKismetMathLibrary::Vector_GetAbs(struct FVector A) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Vector_GetAbs");

	struct UKismetMathLibrary_Vector_GetAbs_Params {
		struct FVector A;			//Offset: 0 | ElementSize: 12
		struct FVector ReturnValue;			//Offset: 12 | ElementSize: 12
	};
	UKismetMathLibrary_Vector_GetAbs_Params params;
	params.A = A;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Vector_GetAbsMax
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: struct FVector	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: float	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
float UKismetMathLibrary::Vector_GetAbsMax(struct FVector A) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Vector_GetAbsMax");

	struct UKismetMathLibrary_Vector_GetAbsMax_Params {
		struct FVector A;			//Offset: 0 | ElementSize: 12
		float ReturnValue;			//Offset: 12 | ElementSize: 4
	};
	UKismetMathLibrary_Vector_GetAbsMax_Params params;
	params.A = A;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Vector_GetAbsMin
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: struct FVector	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: float	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
float UKismetMathLibrary::Vector_GetAbsMin(struct FVector A) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Vector_GetAbsMin");

	struct UKismetMathLibrary_Vector_GetAbsMin_Params {
		struct FVector A;			//Offset: 0 | ElementSize: 12
		float ReturnValue;			//Offset: 12 | ElementSize: 4
	};
	UKismetMathLibrary_Vector_GetAbsMin_Params params;
	params.A = A;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Vector_GetProjection
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: struct FVector	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FVector	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FVector UKismetMathLibrary::Vector_GetProjection(struct FVector A) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Vector_GetProjection");

	struct UKismetMathLibrary_Vector_GetProjection_Params {
		struct FVector A;			//Offset: 0 | ElementSize: 12
		struct FVector ReturnValue;			//Offset: 12 | ElementSize: 12
	};
	UKismetMathLibrary_Vector_GetProjection_Params params;
	params.A = A;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Vector_GetSignVector
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: struct FVector	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FVector	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FVector UKismetMathLibrary::Vector_GetSignVector(struct FVector A) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Vector_GetSignVector");

	struct UKismetMathLibrary_Vector_GetSignVector_Params {
		struct FVector A;			//Offset: 0 | ElementSize: 12
		struct FVector ReturnValue;			//Offset: 12 | ElementSize: 12
	};
	UKismetMathLibrary_Vector_GetSignVector_Params params;
	params.A = A;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Vector_HeadingAngle
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: struct FVector	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: float	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
float UKismetMathLibrary::Vector_HeadingAngle(struct FVector A) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Vector_HeadingAngle");

	struct UKismetMathLibrary_Vector_HeadingAngle_Params {
		struct FVector A;			//Offset: 0 | ElementSize: 12
		float ReturnValue;			//Offset: 12 | ElementSize: 4
	};
	UKismetMathLibrary_Vector_HeadingAngle_Params params;
	params.A = A;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Vector_IsNAN
// Flags: Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: struct FVector	Flags: ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: bool	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
bool UKismetMathLibrary::Vector_IsNAN(const struct FVector& A) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Vector_IsNAN");

	struct UKismetMathLibrary_Vector_IsNAN_Params {
		struct FVector A;			//Offset: 0 | ElementSize: 12
		bool ReturnValue;			//Offset: 12 | ElementSize: 1
	};
	UKismetMathLibrary_Vector_IsNAN_Params params;
	params.A = A;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Vector_IsNearlyZero
// Flags: Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: struct FVector	Flags: ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: Tolerance	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: bool	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
bool UKismetMathLibrary::Vector_IsNearlyZero(const struct FVector& A, float Tolerance) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Vector_IsNearlyZero");

	struct UKismetMathLibrary_Vector_IsNearlyZero_Params {
		struct FVector A;			//Offset: 0 | ElementSize: 12
		float Tolerance;			//Offset: 12 | ElementSize: 4
		bool ReturnValue;			//Offset: 16 | ElementSize: 1
	};
	UKismetMathLibrary_Vector_IsNearlyZero_Params params;
	params.A = A;
	params.Tolerance = Tolerance;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Vector_IsNormal
// Flags: Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: struct FVector	Flags: ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: bool	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
bool UKismetMathLibrary::Vector_IsNormal(const struct FVector& A) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Vector_IsNormal");

	struct UKismetMathLibrary_Vector_IsNormal_Params {
		struct FVector A;			//Offset: 0 | ElementSize: 12
		bool ReturnValue;			//Offset: 12 | ElementSize: 1
	};
	UKismetMathLibrary_Vector_IsNormal_Params params;
	params.A = A;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Vector_IsUniform
// Flags: Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: struct FVector	Flags: ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: Tolerance	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: bool	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
bool UKismetMathLibrary::Vector_IsUniform(const struct FVector& A, float Tolerance) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Vector_IsUniform");

	struct UKismetMathLibrary_Vector_IsUniform_Params {
		struct FVector A;			//Offset: 0 | ElementSize: 12
		float Tolerance;			//Offset: 12 | ElementSize: 4
		bool ReturnValue;			//Offset: 16 | ElementSize: 1
	};
	UKismetMathLibrary_Vector_IsUniform_Params params;
	params.A = A;
	params.Tolerance = Tolerance;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Vector_IsUnit
// Flags: Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: struct FVector	Flags: ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: SquaredLenthTolerance	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: bool	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
bool UKismetMathLibrary::Vector_IsUnit(const struct FVector& A, float SquaredLenthTolerance) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Vector_IsUnit");

	struct UKismetMathLibrary_Vector_IsUnit_Params {
		struct FVector A;			//Offset: 0 | ElementSize: 12
		float SquaredLenthTolerance;			//Offset: 12 | ElementSize: 4
		bool ReturnValue;			//Offset: 16 | ElementSize: 1
	};
	UKismetMathLibrary_Vector_IsUnit_Params params;
	params.A = A;
	params.SquaredLenthTolerance = SquaredLenthTolerance;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Vector_IsZero
// Flags: Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: struct FVector	Flags: ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: bool	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
bool UKismetMathLibrary::Vector_IsZero(const struct FVector& A) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Vector_IsZero");

	struct UKismetMathLibrary_Vector_IsZero_Params {
		struct FVector A;			//Offset: 0 | ElementSize: 12
		bool ReturnValue;			//Offset: 12 | ElementSize: 1
	};
	UKismetMathLibrary_Vector_IsZero_Params params;
	params.A = A;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Vector_Left
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: ReturnValue	Type: struct FVector	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FVector UKismetMathLibrary::Vector_Left() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Vector_Left");

	struct UKismetMathLibrary_Vector_Left_Params {
		struct FVector ReturnValue;			//Offset: 0 | ElementSize: 12
	};
	UKismetMathLibrary_Vector_Left_Params params;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Vector_MirrorByPlane
// Flags: Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: struct FVector	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: InPlane	Type: struct FPlane	Flags: ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FVector	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FVector UKismetMathLibrary::Vector_MirrorByPlane(struct FVector A, const struct FPlane& InPlane) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Vector_MirrorByPlane");

	struct UKismetMathLibrary_Vector_MirrorByPlane_Params {
		struct FVector A;			//Offset: 0 | ElementSize: 12
		struct FPlane InPlane;			//Offset: 16 | ElementSize: 16
		struct FVector ReturnValue;			//Offset: 32 | ElementSize: 12
	};
	UKismetMathLibrary_Vector_MirrorByPlane_Params params;
	params.A = A;
	params.InPlane = InPlane;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Vector_Normal2D
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: struct FVector	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: Tolerance	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FVector	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FVector UKismetMathLibrary::Vector_Normal2D(struct FVector A, float Tolerance) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Vector_Normal2D");

	struct UKismetMathLibrary_Vector_Normal2D_Params {
		struct FVector A;			//Offset: 0 | ElementSize: 12
		float Tolerance;			//Offset: 12 | ElementSize: 4
		struct FVector ReturnValue;			//Offset: 16 | ElementSize: 12
	};
	UKismetMathLibrary_Vector_Normal2D_Params params;
	params.A = A;
	params.Tolerance = Tolerance;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Vector_Normalize
// Flags: Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable
// Params:
// Name: A	Type: struct FVector	Flags: Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: Tolerance	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
void UKismetMathLibrary::Vector_Normalize(struct FVector* A, float Tolerance) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Vector_Normalize");

	struct UKismetMathLibrary_Vector_Normalize_Params {
		struct FVector A;			//Offset: 0 | ElementSize: 12
		float Tolerance;			//Offset: 12 | ElementSize: 4
	};
	UKismetMathLibrary_Vector_Normalize_Params params;
	params.Tolerance = Tolerance;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	if (A != nullptr)
		*A = params.A;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Vector_NormalUnsafe
// Flags: Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: struct FVector	Flags: ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FVector	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FVector UKismetMathLibrary::Vector_NormalUnsafe(const struct FVector& A) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Vector_NormalUnsafe");

	struct UKismetMathLibrary_Vector_NormalUnsafe_Params {
		struct FVector A;			//Offset: 0 | ElementSize: 12
		struct FVector ReturnValue;			//Offset: 12 | ElementSize: 12
	};
	UKismetMathLibrary_Vector_NormalUnsafe_Params params;
	params.A = A;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Vector_One
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: ReturnValue	Type: struct FVector	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FVector UKismetMathLibrary::Vector_One() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Vector_One");

	struct UKismetMathLibrary_Vector_One_Params {
		struct FVector ReturnValue;			//Offset: 0 | ElementSize: 12
	};
	UKismetMathLibrary_Vector_One_Params params;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Vector_ProjectOnToNormal
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: V	Type: struct FVector	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: InNormal	Type: struct FVector	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FVector	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FVector UKismetMathLibrary::Vector_ProjectOnToNormal(struct FVector V, struct FVector InNormal) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Vector_ProjectOnToNormal");

	struct UKismetMathLibrary_Vector_ProjectOnToNormal_Params {
		struct FVector V;			//Offset: 0 | ElementSize: 12
		struct FVector InNormal;			//Offset: 12 | ElementSize: 12
		struct FVector ReturnValue;			//Offset: 24 | ElementSize: 12
	};
	UKismetMathLibrary_Vector_ProjectOnToNormal_Params params;
	params.V = V;
	params.InNormal = InNormal;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Vector_Reciprocal
// Flags: Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: struct FVector	Flags: ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FVector	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FVector UKismetMathLibrary::Vector_Reciprocal(const struct FVector& A) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Vector_Reciprocal");

	struct UKismetMathLibrary_Vector_Reciprocal_Params {
		struct FVector A;			//Offset: 0 | ElementSize: 12
		struct FVector ReturnValue;			//Offset: 12 | ElementSize: 12
	};
	UKismetMathLibrary_Vector_Reciprocal_Params params;
	params.A = A;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Vector_Right
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: ReturnValue	Type: struct FVector	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FVector UKismetMathLibrary::Vector_Right() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Vector_Right");

	struct UKismetMathLibrary_Vector_Right_Params {
		struct FVector ReturnValue;			//Offset: 0 | ElementSize: 12
	};
	UKismetMathLibrary_Vector_Right_Params params;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Vector_Set
// Flags: Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable
// Params:
// Name: A	Type: struct FVector	Flags: Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: X	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: Y	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: Z	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
void UKismetMathLibrary::Vector_Set(struct FVector* A, float X, float Y, float Z) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Vector_Set");

	struct UKismetMathLibrary_Vector_Set_Params {
		struct FVector A;			//Offset: 0 | ElementSize: 12
		float X;			//Offset: 12 | ElementSize: 4
		float Y;			//Offset: 16 | ElementSize: 4
		float Z;			//Offset: 20 | ElementSize: 4
	};
	UKismetMathLibrary_Vector_Set_Params params;
	params.X = X;
	params.Y = Y;
	params.Z = Z;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	if (A != nullptr)
		*A = params.A;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Vector_SnappedToGrid
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: InVect	Type: struct FVector	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: InGridSize	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FVector	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FVector UKismetMathLibrary::Vector_SnappedToGrid(struct FVector InVect, float InGridSize) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Vector_SnappedToGrid");

	struct UKismetMathLibrary_Vector_SnappedToGrid_Params {
		struct FVector InVect;			//Offset: 0 | ElementSize: 12
		float InGridSize;			//Offset: 12 | ElementSize: 4
		struct FVector ReturnValue;			//Offset: 16 | ElementSize: 12
	};
	UKismetMathLibrary_Vector_SnappedToGrid_Params params;
	params.InVect = InVect;
	params.InGridSize = InGridSize;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Vector_ToDegrees
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: struct FVector	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FVector	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FVector UKismetMathLibrary::Vector_ToDegrees(struct FVector A) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Vector_ToDegrees");

	struct UKismetMathLibrary_Vector_ToDegrees_Params {
		struct FVector A;			//Offset: 0 | ElementSize: 12
		struct FVector ReturnValue;			//Offset: 12 | ElementSize: 12
	};
	UKismetMathLibrary_Vector_ToDegrees_Params params;
	params.A = A;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Vector_ToRadians
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: struct FVector	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FVector	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FVector UKismetMathLibrary::Vector_ToRadians(struct FVector A) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Vector_ToRadians");

	struct UKismetMathLibrary_Vector_ToRadians_Params {
		struct FVector A;			//Offset: 0 | ElementSize: 12
		struct FVector ReturnValue;			//Offset: 12 | ElementSize: 12
	};
	UKismetMathLibrary_Vector_ToRadians_Params params;
	params.A = A;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Vector_UnitCartesianToSpherical
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: struct FVector	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FVector2D	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FVector2D UKismetMathLibrary::Vector_UnitCartesianToSpherical(struct FVector A) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Vector_UnitCartesianToSpherical");

	struct UKismetMathLibrary_Vector_UnitCartesianToSpherical_Params {
		struct FVector A;			//Offset: 0 | ElementSize: 12
		struct FVector2D ReturnValue;			//Offset: 12 | ElementSize: 8
	};
	UKismetMathLibrary_Vector_UnitCartesianToSpherical_Params params;
	params.A = A;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Vector_UnwindEuler
// Flags: Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable
// Params:
// Name: A	Type: struct FVector	Flags: Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
void UKismetMathLibrary::Vector_UnwindEuler(struct FVector* A) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Vector_UnwindEuler");

	struct UKismetMathLibrary_Vector_UnwindEuler_Params {
		struct FVector A;			//Offset: 0 | ElementSize: 12
	};
	UKismetMathLibrary_Vector_UnwindEuler_Params params;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	if (A != nullptr)
		*A = params.A;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Vector_Up
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: ReturnValue	Type: struct FVector	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FVector UKismetMathLibrary::Vector_Up() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Vector_Up");

	struct UKismetMathLibrary_Vector_Up_Params {
		struct FVector ReturnValue;			//Offset: 0 | ElementSize: 12
	};
	UKismetMathLibrary_Vector_Up_Params params;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Vector_Zero
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: ReturnValue	Type: struct FVector	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FVector UKismetMathLibrary::Vector_Zero() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Vector_Zero");

	struct UKismetMathLibrary_Vector_Zero_Params {
		struct FVector ReturnValue;			//Offset: 0 | ElementSize: 12
	};
	UKismetMathLibrary_Vector_Zero_Params params;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.VectorSpringInterp
// Flags: Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable
// Params:
// Name: Current	Type: struct FVector	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: Target	Type: struct FVector	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: SpringState	Type: struct FVectorSpringState	Flags: Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic
// Name: Stiffness	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: CriticalDampingFactor	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: DeltaTime	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: Mass	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FVector	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FVector UKismetMathLibrary::VectorSpringInterp(struct FVector Current, struct FVector Target, struct FVectorSpringState* SpringState, float Stiffness, float CriticalDampingFactor, float DeltaTime, float Mass) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.VectorSpringInterp");

	struct UKismetMathLibrary_VectorSpringInterp_Params {
		struct FVector Current;			//Offset: 0 | ElementSize: 12
		struct FVector Target;			//Offset: 12 | ElementSize: 12
		struct FVectorSpringState SpringState;			//Offset: 24 | ElementSize: 24
		float Stiffness;			//Offset: 48 | ElementSize: 4
		float CriticalDampingFactor;			//Offset: 52 | ElementSize: 4
		float DeltaTime;			//Offset: 56 | ElementSize: 4
		float Mass;			//Offset: 60 | ElementSize: 4
		struct FVector ReturnValue;			//Offset: 64 | ElementSize: 12
	};
	UKismetMathLibrary_VectorSpringInterp_Params params;
	params.Current = Current;
	params.Target = Target;
	params.Stiffness = Stiffness;
	params.CriticalDampingFactor = CriticalDampingFactor;
	params.DeltaTime = DeltaTime;
	params.Mass = Mass;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	if (SpringState != nullptr)
		*SpringState = params.SpringState;
	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.VInterpTo
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: Current	Type: struct FVector	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: Target	Type: struct FVector	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: DeltaTime	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: interpSpeed	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FVector	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FVector UKismetMathLibrary::VInterpTo(struct FVector Current, struct FVector Target, float DeltaTime, float interpSpeed) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.VInterpTo");

	struct UKismetMathLibrary_VInterpTo_Params {
		struct FVector Current;			//Offset: 0 | ElementSize: 12
		struct FVector Target;			//Offset: 12 | ElementSize: 12
		float DeltaTime;			//Offset: 24 | ElementSize: 4
		float interpSpeed;			//Offset: 28 | ElementSize: 4
		struct FVector ReturnValue;			//Offset: 32 | ElementSize: 12
	};
	UKismetMathLibrary_VInterpTo_Params params;
	params.Current = Current;
	params.Target = Target;
	params.DeltaTime = DeltaTime;
	params.interpSpeed = interpSpeed;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.VInterpTo_Constant
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: Current	Type: struct FVector	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: Target	Type: struct FVector	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: DeltaTime	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: interpSpeed	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FVector	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FVector UKismetMathLibrary::VInterpTo_Constant(struct FVector Current, struct FVector Target, float DeltaTime, float interpSpeed) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.VInterpTo_Constant");

	struct UKismetMathLibrary_VInterpTo_Constant_Params {
		struct FVector Current;			//Offset: 0 | ElementSize: 12
		struct FVector Target;			//Offset: 12 | ElementSize: 12
		float DeltaTime;			//Offset: 24 | ElementSize: 4
		float interpSpeed;			//Offset: 28 | ElementSize: 4
		struct FVector ReturnValue;			//Offset: 32 | ElementSize: 12
	};
	UKismetMathLibrary_VInterpTo_Constant_Params params;
	params.Current = Current;
	params.Target = Target;
	params.DeltaTime = DeltaTime;
	params.interpSpeed = interpSpeed;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.VLerp
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: struct FVector	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: B	Type: struct FVector	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: Alpha	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FVector	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FVector UKismetMathLibrary::VLerp(struct FVector A, struct FVector B, float Alpha) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.VLerp");

	struct UKismetMathLibrary_VLerp_Params {
		struct FVector A;			//Offset: 0 | ElementSize: 12
		struct FVector B;			//Offset: 12 | ElementSize: 12
		float Alpha;			//Offset: 24 | ElementSize: 4
		struct FVector ReturnValue;			//Offset: 28 | ElementSize: 12
	};
	UKismetMathLibrary_VLerp_Params params;
	params.A = A;
	params.B = B;
	params.Alpha = Alpha;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.VSize
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: struct FVector	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: float	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
float UKismetMathLibrary::VSize(struct FVector A) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.VSize");

	struct UKismetMathLibrary_VSize_Params {
		struct FVector A;			//Offset: 0 | ElementSize: 12
		float ReturnValue;			//Offset: 12 | ElementSize: 4
	};
	UKismetMathLibrary_VSize_Params params;
	params.A = A;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.VSize2D
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: struct FVector2D	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: float	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
float UKismetMathLibrary::VSize2D(struct FVector2D A) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.VSize2D");

	struct UKismetMathLibrary_VSize2D_Params {
		struct FVector2D A;			//Offset: 0 | ElementSize: 8
		float ReturnValue;			//Offset: 8 | ElementSize: 4
	};
	UKismetMathLibrary_VSize2D_Params params;
	params.A = A;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.VSize2DSquared
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: struct FVector2D	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: float	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
float UKismetMathLibrary::VSize2DSquared(struct FVector2D A) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.VSize2DSquared");

	struct UKismetMathLibrary_VSize2DSquared_Params {
		struct FVector2D A;			//Offset: 0 | ElementSize: 8
		float ReturnValue;			//Offset: 8 | ElementSize: 4
	};
	UKismetMathLibrary_VSize2DSquared_Params params;
	params.A = A;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.VSizeSquared
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: struct FVector	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: float	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
float UKismetMathLibrary::VSizeSquared(struct FVector A) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.VSizeSquared");

	struct UKismetMathLibrary_VSizeSquared_Params {
		struct FVector A;			//Offset: 0 | ElementSize: 12
		float ReturnValue;			//Offset: 12 | ElementSize: 4
	};
	UKismetMathLibrary_VSizeSquared_Params params;
	params.A = A;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.VSizeXY
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: struct FVector	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: float	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
float UKismetMathLibrary::VSizeXY(struct FVector A) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.VSizeXY");

	struct UKismetMathLibrary_VSizeXY_Params {
		struct FVector A;			//Offset: 0 | ElementSize: 12
		float ReturnValue;			//Offset: 12 | ElementSize: 4
	};
	UKismetMathLibrary_VSizeXY_Params params;
	params.A = A;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.VSizeXYSquared
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: struct FVector	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: float	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
float UKismetMathLibrary::VSizeXYSquared(struct FVector A) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.VSizeXYSquared");

	struct UKismetMathLibrary_VSizeXYSquared_Params {
		struct FVector A;			//Offset: 0 | ElementSize: 12
		float ReturnValue;			//Offset: 12 | ElementSize: 4
	};
	UKismetMathLibrary_VSizeXYSquared_Params params;
	params.A = A;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.WeightedMovingAverage_Float
// Flags: Final, Native, Static, Public, BlueprintCallable, BlueprintPure
// Params:
// Name: CurrentSample	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: PreviousSample	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: Weight	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: float	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
float UKismetMathLibrary::WeightedMovingAverage_Float(float CurrentSample, float PreviousSample, float Weight) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.WeightedMovingAverage_Float");

	struct UKismetMathLibrary_WeightedMovingAverage_Float_Params {
		float CurrentSample;			//Offset: 0 | ElementSize: 4
		float PreviousSample;			//Offset: 4 | ElementSize: 4
		float Weight;			//Offset: 8 | ElementSize: 4
		float ReturnValue;			//Offset: 12 | ElementSize: 4
	};
	UKismetMathLibrary_WeightedMovingAverage_Float_Params params;
	params.CurrentSample = CurrentSample;
	params.PreviousSample = PreviousSample;
	params.Weight = Weight;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.WeightedMovingAverage_FRotator
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: CurrentSample	Type: struct FRotator	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
// Name: PreviousSample	Type: struct FRotator	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
// Name: Weight	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FRotator	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FRotator UKismetMathLibrary::WeightedMovingAverage_FRotator(struct FRotator CurrentSample, struct FRotator PreviousSample, float Weight) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.WeightedMovingAverage_FRotator");

	struct UKismetMathLibrary_WeightedMovingAverage_FRotator_Params {
		struct FRotator CurrentSample;			//Offset: 0 | ElementSize: 12
		struct FRotator PreviousSample;			//Offset: 12 | ElementSize: 12
		float Weight;			//Offset: 24 | ElementSize: 4
		struct FRotator ReturnValue;			//Offset: 28 | ElementSize: 12
	};
	UKismetMathLibrary_WeightedMovingAverage_FRotator_Params params;
	params.CurrentSample = CurrentSample;
	params.PreviousSample = PreviousSample;
	params.Weight = Weight;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.WeightedMovingAverage_FVector
// Flags: Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure
// Params:
// Name: CurrentSample	Type: struct FVector	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: PreviousSample	Type: struct FVector	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: Weight	Type: float	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: struct FVector	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
struct FVector UKismetMathLibrary::WeightedMovingAverage_FVector(struct FVector CurrentSample, struct FVector PreviousSample, float Weight) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.WeightedMovingAverage_FVector");

	struct UKismetMathLibrary_WeightedMovingAverage_FVector_Params {
		struct FVector CurrentSample;			//Offset: 0 | ElementSize: 12
		struct FVector PreviousSample;			//Offset: 12 | ElementSize: 12
		float Weight;			//Offset: 24 | ElementSize: 4
		struct FVector ReturnValue;			//Offset: 28 | ElementSize: 12
	};
	UKismetMathLibrary_WeightedMovingAverage_FVector_Params params;
	params.CurrentSample = CurrentSample;
	params.PreviousSample = PreviousSample;
	params.Weight = Weight;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Wrap
// Flags: Final, Native, Static, Public, BlueprintCallable, BlueprintPure
// Params:
// Name: Value	Type: int32_t	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: Min	Type: int32_t	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: Max	Type: int32_t	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: int32_t	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
int32_t UKismetMathLibrary::Wrap(int32_t Value, int32_t Min, int32_t Max) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Wrap");

	struct UKismetMathLibrary_Wrap_Params {
		int32_t Value;			//Offset: 0 | ElementSize: 4
		int32_t Min;			//Offset: 4 | ElementSize: 4
		int32_t Max;			//Offset: 8 | ElementSize: 4
		int32_t ReturnValue;			//Offset: 12 | ElementSize: 4
	};
	UKismetMathLibrary_Wrap_Params params;
	params.Value = Value;
	params.Min = Min;
	params.Max = Max;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Xor_Int64Int64
// Flags: Final, Native, Static, Public, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: int64_t	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: B	Type: int64_t	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: int64_t	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
int64_t UKismetMathLibrary::Xor_Int64Int64(int64_t A, int64_t B) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Xor_Int64Int64");

	struct UKismetMathLibrary_Xor_Int64Int64_Params {
		int64_t A;			//Offset: 0 | ElementSize: 8
		int64_t B;			//Offset: 8 | ElementSize: 8
		int64_t ReturnValue;			//Offset: 16 | ElementSize: 8
	};
	UKismetMathLibrary_Xor_Int64Int64_Params params;
	params.A = A;
	params.B = B;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

/////////////////////////////////////////////
// Function Engine.KismetMathLibrary.Xor_IntInt
// Flags: Final, Native, Static, Public, BlueprintCallable, BlueprintPure
// Params:
// Name: A	Type: int32_t	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: B	Type: int32_t	Flags: Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
// Name: ReturnValue	Type: int32_t	Flags: Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
/////////////////////////////////////////////
int32_t UKismetMathLibrary::Xor_IntInt(int32_t A, int32_t B) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Xor_IntInt");

	struct UKismetMathLibrary_Xor_IntInt_Params {
		int32_t A;			//Offset: 0 | ElementSize: 4
		int32_t B;			//Offset: 4 | ElementSize: 4
		int32_t ReturnValue;			//Offset: 8 | ElementSize: 4
	};
	UKismetMathLibrary_Xor_IntInt_Params params;
	params.A = A;
	params.B = B;

	uint32_t flags = (uint32_t)fn->GetFunctionFlags();
	uint32_t newFlags = flags;
	newFlags |= 0x00000400;
	fn->SetFunctionFlags((EFunctionFlags)newFlags);

	static auto Obj = StaticClass()->CreateDefaultObject();
	Obj->ProcessEvent(fn, &params);

	fn->SetFunctionFlags((EFunctionFlags)flags);

	return params.ReturnValue;
}

#pragma endregion
}